class DSparilBase : AetheriusBossZSC
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (levelbehavior) extrasteps = user_monsterlevel / 8;
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New", string crisismissiletype = "SorcererFX1Crisis")
	{
		A_MonsterCrisisCheck(); // D'Sparil [Mounted] - Attack
		string projtype = missiletype;
		if (user_canusecrisisatk == 1) 
		{
			projtype = crisismissiletype;
			meleedamage *= CrisisMultiplier; 
		}

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (dvdsdebug_showactormoveinformation) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (levelbehavior) extrasteps = user_monsterlevel / 6;
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (user_legendaryevolved)
			{
				ExtraChance = 1 + (user_monsterlevel / 90);
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (user_monsterlevel / 90);
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype1crisis = "Sorcerer2FX1Crisis", string missiletype2 = "Sorcerer2FX2New",  string missiletype2crisis = "Sorcerer2FX2Crisis")
	{
		A_MonsterCrisisCheck(); // D'Sparil [Unmounted] - Attack
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;
		if (user_canusecrisisatk == 1) 
		{
			attacktype1 = missiletype1crisis;
			attacktype2 = missiletype2crisis;
			meleedamage *= CrisisMultiplier;
		}

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}

}

//******************
//*MONSTER SPAWNERS*
//******************
// Gargoyle spawner
class GargoyleSpawner : AetheriusMonsterSpawner replaces HereticImp
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,256) <= evolveChance)
			{
				if (random(1,2) == 1)
					return "WatcherImp";
				else
					return "PlagueImp";
			}
			else
				return "HereticImpLeaderNew";
		}
		else
			return "HereticImpNew";
	}
}

// Gargoyle Leader spawner
class GargoyleLeaderSpawner : AetheriusMonsterSpawner replaces HereticImpLeader
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,2) == 1)
				return "WatcherImp";
			else
				return "PlagueImp";
		}
		else
			return "HereticImpLeaderNew";
	}
}

// Golem Spawner
class GolemSpawner : AetheriusMonsterSpawner replaces Mummy
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,256) <= evolveChance)
				{
					evolveChance = A_GetEvolveChance();
					if (random(1,256) <= evolveChance)
					{
						evolveChance = A_GetEvolveChance();
						if (random(1,1024) <= evolveChance)
						{
							evolveChance = A_GetEvolveChance();
							if (random(1,256) <= evolveChance)
							{
								if (random(1,4) == 1)
								{
									if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
									else return "MummyLeaderGhostNew";
								}
								else
								{
									if (CanFitHere("FrostGolem")) return "FrostGolem";
									else return "MummyLeaderNew";
								}
							}
							else
							{
								if (random(1,4) == 1)
								{
									if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
									else return "MummyLeaderGhostNew";
								}
								else
								{
									if (CanFitHere("IceGolem")) return "IceGolem";
									else return "MummyLeaderNew";
								}
							}
						}
						else
							return "MummyLeaderGhostNew";
					}
					else
						return "MummyLeaderNew";
				}
				else
					return "MummyGhostNew";
			}
			else
				return "MummyNew";
		}
	}
}

// Golem Ghost Spawner
class GolemGhostSpawner : AetheriusMonsterSpawner replaces MummyGhost
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,256) <= evolveChance)
				{
					evolveChance = A_GetEvolveChance();
					if (random(1,1024) <= evolveChance)
					{
						evolveChance = A_GetEvolveChance();
						if (random(1,256) <= evolveChance)
						{
							if (random(1,4) == 1)
							{
								if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
								else return "MummyLeaderGhostNew";
							}
							else
							{
								if (CanFitHere("FrostGolem")) return "FrostGolem";
								else return "MummyLeaderNew";
							}
						}
						else
						{
							if (random(1,4) == 1)
							{
								if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
								else return "MummyLeaderGhostNew";
							}
							else
							{
								if (CanFitHere("IceGolem")) return "IceGolem";
								else return "MummyLeaderNew";
							}
						}
					}
					else
						return "MummyLeaderGhostNew";
				}
				else
					return "MummyLeaderNew";
			}
			else
				return "MummyGhostNew";
		}
	}
}

// NitroGolem Spawner
class NitroGolemSpawner : AetheriusMonsterSpawner replaces MummyLeader
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,1024) <= evolveChance)
				{
					evolveChance = A_GetEvolveChance();
					if (random(1,256) <= evolveChance)
					{
						if (random(1,4) == 1)
						{
							if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
							else return "MummyLeaderGhostNew";
						}
						else
						{
							if (CanFitHere("FrostGolem")) return "FrostGolem";
							else return "MummyLeaderNew";
						}
					}
					else
					{
						if (random(1,4) == 1)
						{
							if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
							else return "MummyLeaderGhostNew";
						}
						else
						{
							if (CanFitHere("IceGolem")) return "IceGolem";
							else return "MummyLeaderNew";
						}
					}
				}
				else
					return "MummyLeaderGhostNew";
			}
			else
				return "MummyLeaderNew";
		}
	}
}

// NitroGolem Ghost Spawner
class NitroGolemGhostSpawner : AetheriusMonsterSpawner replaces MummyLeaderGhost
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,1024) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,256) <= evolveChance)
				{
					if (random(1,4) == 1)
					{
						if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
						else return "MummyLeaderGhostNew";
					}
					else
					{
						if (CanFitHere("FrostGolem")) return "FrostGolem";
						else return "MummyLeaderNew";
					}
				}
				else
				{
					if (random(1,4) == 1)
					{
						if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
						else return "MummyLeaderGhostNew";
					}
					else
					{
						if (CanFitHere("IceGolem")) return "IceGolem";
						else return "MummyLeaderNew";
					}
				}
			}
			else
				return "MummyLeaderGhostNew";
		}
	}
}

// Undead Warrior/Knight spawner
class KnightSpawner : AetheriusMonsterSpawner replaces Knight
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 2 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,2048) <= evolveChance)
				{
					if (random(1,4) == 1)
						return "DeathKnightGhost";
					else
						return "DeathKnight";
				}
				else
					return "KnightGhostNew";
			}
			else
				return "KnightNew";
		}
	}
}

// Undead Warrior/Knight spawner
class KnightGhostSpawner : AetheriusMonsterSpawner replaces KnightGhost
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;

		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,2048) <= evolveChance)
				return "DeathKnightGhost";
			else
				return "KnightNew";
		}
	}
}

// Disciple Spawner
class WizardSpawner : AetheriusMonsterSpawner replaces Wizard
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,384) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,768) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,1152) <= evolveChance)
					return "Banshee";
				else 
					return "HereticApprenticeNew";
			}
			else
				return "GreaterDisciple";
		}
		else
			return "WizardNew";
		
	}
}

// Disciple Spawner
class FWizardSpawner : AetheriusMonsterSpawner
{
	Default
	{
		+FRIENDLY
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,384) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,768) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,1152) <= evolveChance)
					return "FBanshee";
				else 
					return "FHereticApprentice";
			}
			else
				return "FGreaterDisciple";
		}
		else
			return "FWizard";
		
	}
}

// IronLich Spawner
class LichSpawner : AetheriusMonsterSpawner replaces Ironlich
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,384) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,512) <= evolveChance)
					return "BloodLich";
				else
					return "GoldLich";
			}
			else
				return "IceLich";
		}
		else
			return "IronLichNew";
	}
}

// Disciple Spawner
class ClinkSpawner : AetheriusMonsterSpawner replaces Clink
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,768) <= evolveChance)
			{
				if (CanFitHere("DarkClink")) return "DarkClink";
				else return "ClinkNew";
			}
			else
				return "ClinkNew";
		}
	}
}

// Disciple Spawner
class WeredragonSpawner : AetheriusMonsterSpawner replaces Beast
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,768) <= evolveChance)
			{
				if (CanFitHere("ShadowBeast")) return "ShadowBeast";
				else return "BeastNew";
			}
			else
				return "BeastNew";
		}
	}
}

// Ophidian spawner
class SnakeSpawner : AetheriusMonsterSpawner replaces Snake
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,384) <= evolvechance)
			{
				if (random(1,384) <= evolvechance)
					return "Serpathor";
				else
					return "HellGuard";
			}
			else
				return "SnakeNew";
		}
	}
}

// ITEMS
class GauntletsNew : RandomSpawner2 replaces Gauntlets
{
	default
	{
		+DONTGIB;
		DropItem "BerserkSphere", 255, 511;
		DropItem "RandomHereticWeapon", 255, 256;
		DropItem "RandomHellcoreWeapon", 255, 256;
		DropItem "DiarisLongbow", 255, 256;
		DropItem "PoisonNeedle", 255, 256;
		DropItem "RandomSeedDropForcedAlways", 255, 256;
		DropItem "FyggForced", 255, 1;
	}
}

class RandomHereticWeapon : RandomSpawner2
{
	default
	{
		+DONTGIB;
		DropItem "GoldWandNew", 255, 32;
		DropItem "CrossbowNew", 255, 30;
		DropItem "SuperCrossbowNew", 255, 30;
		DropItem "DragonClawNew", 255, 30;
		DropItem "HellStaffNew", 255, 30;
		DropItem "PhoenixRodNew", 255, 30;
		DropItem "FiremaceNew", 255, 30;
		DropItem "DSparilStaff", 255, 2;
	}
}

class RandomHereticWeapon2 : RandomSpawner2
{
	default
	{
		+DONTGIB;
		DropItem "GoldWandNew", 255, 32;
		DropItem "CrossbowNew", 255, 30;
		DropItem "SuperCrossbowNew", 255, 30;
		DropItem "DragonClawNew", 255, 30;
		DropItem "HellStaffNew", 255, 30;
		DropItem "PhoenixRodNew", 255, 30;
		DropItem "FiremaceNew", 255, 30;
	}
}

class ArtiTimeBombNew : AetheriusBaseZSC replaces ArtiTimeBomb
{
	default
	{
		Radius 16;
		Height 16;
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,1) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,0,0,0,0,tid,0); }
				if (random(1,4) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				if (random(1,16) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				if (random(1,64) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				if (random(1,256) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				A_Fadeout(1.0);
			}
			Stop;
	}
}

class ArtiTorchNew : RandomSpawner2 replaces ArtiTorch
{
	default
	{
		+DONTGIB;
		DropItem "RandomMagicSpawner", 256;
	}
}

class ArtiEggNew : AetheriusBaseCustomInventoryZSC replaces ArtiEgg
{
	default
	{
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.KEEPDEPLETED;
		Inventory.Icon "ARTIEGGC";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTIEGG"; // "MORPH OVUM"
		Inventory.DefMaxAmount;
		Tag "$TAG_ARTIEGG";
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Torpol's Morph Ovum: Transforms up to eleven enemies into chickens.";
	}
	
	States
	{
		Spawn:
			EGGC ABCB 5;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_SpreadAuraFireProjectile("EggFX", -18.75, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -15.0, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -11.25, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -7.5, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -3.75, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 0.0, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 3.75, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 7.5, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 11.25, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 15.0, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 18.75, 0, "", 0, 0, 1, 0);
			}
			Stop;
	}
}
  
class ArtiTeleportNew : ArtiTeleport replaces ArtiTeleport
{
	default
	{
		+DONTGIB;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Darchala's Chaos Device: Teleports you away to near a level's entry point.";
	}
}
  
class ArtiTomeOfPowerNew : RandomSpawner2 replaces ArtiTomeOfPower
{
	default
	{
		DropItem "Experiessence", 255, 112;
		DropItem "LargeExperiessence", 255, 72;
		DropItem "HugeExperiessence", 255, 40;
		DropItem "RandomSeedDropForcedAlways", 255, 22;
		DropItem "FloraRandomArmorAlwaysDrop", 255, 8;
		DropItem "SauronHelmet", 255, 1;
		DropItem "SauronGauntlets", 255, 1;
	}
}

class ArtiInvisibilityNew : AetheriusUsableInventory replaces ArtiInvisibility
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		RenderStyle "Translucent";
		Alpha 0.4;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIINVS";
		Inventory.PickupMessage "$TXT_ARTIINVISIBILITY";
		Tag "ShadowSphere: Gives partial invisiblity for 90 seconds";
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
	}

	States
	{
		Spawn:
			INVS A 350 Bright;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-7);
			fail;
	}
}

class ArtiFlyNew : AetheriusCustomInventory replaces ArtiFly
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTISOAR";
		Inventory.PickupMessage "$TXT_ARTIFLY"; // "WINGS OF WRATH"
		Tag "$TAG_ARTIFLY";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx("SeedOfSkillForced",0,0,0,0,0,0,0,0,0);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,0,0,0,0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("Fygg",0,0,0,0,0,0,0,0,255);
			TNT1 A 0 A_FadeOut(1.0);
			Loop;
	}
}

class ArtiInvulnerabilityNew : AetheriusUsableInventory replaces ArtiInvulnerability
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIINVU";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY"; // "RING OF INVINCIBILITY"
		Tag "Valador's Ring of Invincibility: Gives 45 Seconds of Invulnerability";
	}
	
	States
	{
		Spawn:
			INVU ABCD 3;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-6);
			fail;
	}
}

class SilverShieldNew : RandomSpawner2 replaces SilverShield
{
	default
	{
		DropItem "MaxHealthBonusReal", 255, 96;
		DropItem "FloraRandomArmorAlwaysDrop", 255, 2;
		DropItem "SauronHelmet", 255, 1;
		DropItem "SauronGauntlets", 255, 1;
	}
}

class EnchantedShieldNew : RandomSpawner2 replaces EnchantedShield
{
	default
	{
		DropItem "MaxHealthBonusReal", 255, 88;
		DropItem "FloraRandomArmorAlwaysDrop", 255, 6;
		DropItem "SauronHelmet", 255, 3;
		DropItem "SauronGauntlets", 255, 3;
	}
}

class CrystalVialNew : AetheriusCustomInventory replaces CrystalVial
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		Inventory.Amount 10;
		Inventory.PickupMessage "$TXT_ITEMHEALTH"; // "CRYSTAL VIAL"
		Inventory.PickupSound "pickup/qpotion";
	}
	
	States
	{
			Herb1:
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			Herb2:
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			Herb3:
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

		TurnIntoHerb:
			TNT1 A 0 A_Jump(144,"Herb1");
			TNT1 A 0 A_Jump(112,"Herb2");
			goto Herb3;

		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{
				// Monster Munchies
				if (random(1,128) <= 1)
				{
					A_SpawnItemEx("MonsterMunchies",0,0,0,random(-4,4),random(-4,4),random(-4,4),0,0,0);
				}
				// Vimstones
				if (random(1,1024) <= 1)
				{
					if (random(1,4) <= 3)
					{
						A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,0,0,0);
					}
					else
					{
						A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,0,0,0);
					}
				}
			}
			TNT1 A 0 A_Jump(36,"TurnIntoHerb"); 
		Idle:
			PTN1 ABC 3 bright;
			loop;
		Success:
			TNT1 A 0 A_PickupMedicalItem(0,0);
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(0)) { return resolvestate("Success"); } return resolvestate(null); 
			}
			Fail;
	}
}

class ArtiHealthNew : AetheriusUsableInventory replaces ArtiHealth
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.DefMaxAmount;
		Inventory.Icon "ARTIPTN2";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTIHEALTH"; // "QUARTZ FLASK"
		Tag "Quartz Flask: Recovers 25-30% HP to 112.5% of Maximum";
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
	}
	
	States
	{
		Spawn:
			PTN2 ABC 4 bright;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-1);
			fail;
	}
}

class ArtiSuperHealthNew : AetheriusUsableInventory replaces ArtiSuperHealth
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.DefMaxAmount;
		Inventory.Icon "ARTISPHL";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTISUPERHEALTH"; // "MYSTIC URN"
		Tag "Mystic Urn: Recovers 100-110% HP to 192.5% of Maximum";
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
	}

	States
	{
		Spawn:
			SPHL A 350 bright;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-2);
			fail;
	}
}

class BagOfHoldingNew : AetheriusCustomInventory replaces BagOfHolding
{
	default
	{
		Height 26;
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		Inventory.PickupMessage "Got the \cebag of holding\c-! \cyAmmo and Inventory Limits increased\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetScale(frandom(0.667,1));
				if (Random(1,3) <= 2) { A_SpawnItemEx("GoldWandAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("GoldWandAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("GoldWandHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("CrossbowAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("CrossbowAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("CrossbowHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("BlasterAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("BlasterAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("BlasterHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("PhoenixRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("PhoenixRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("PhoenixRodHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("MaceAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("MaceAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("MaceHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("SkullRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("SkullRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("SkullRodHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("DiarisArrow",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("DiarisArrow",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,12) <= 1) { A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-5,5),random(-5,5),0); }

				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }

				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
			}
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("DimensionalBag",0,0,0,0,0,0,0,0,0,tid);
					A_FadeOut(1.0,FTF_REMOVE);
				}
			}
		Idle:
			BAGH A -1;
			Stop;
		Pickup:
			TNT1 A 0;
			TNT1 A 0 A_GrabBackpack();
			Stop;
	}
}

// ****************
// ***** AMMO *****
// ****************
class GoldWandAmmoNew : GoldWandAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 10; Inventory.PickupMessage "Wand crystal [+10 Crystal Wand]"; } }
class GoldWandHeftyNew : GoldWandHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 50; Inventory.PickupMessage "Crystal geode [+50 Crystal Wand]"; } }
class CrossbowAmmoNew : CrossbowAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 4; Inventory.PickupMessage "Ethereal arrows [+4] (Super) Ethereal Crossbow"; } }
class CrossbowHeftyNew : CrossbowHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 20; Inventory.PickupMessage "Quiver of ethereal arrows [+20] (Super) Ethereal Crossbow"; } }
class BlasterAmmoNew : BlasterAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 10; Inventory.PickupMessage "Claw orb [+10 Dragon Claw]"; } }
class BlasterHeftyNew : BlasterHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 50; Inventory.PickupMessage "Energy orb [+50 Dragon Claw]"; } }
class PhoenixRodAmmoNew : PhoenixRodAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 1; Inventory.PickupMessage "Flame orb [+1 Phoenix Rod]"; } }
class PhoenixRodHeftyNew : PhoenixRodHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 10; Inventory.PickupMessage "Inferno Orb [+10 Phoenix Rod]"; } }
class MaceAmmoNew : MaceAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 20; Inventory.PickupMessage "Mace Spheres [+20 Firemace]"; } }
class MaceHeftyNew : MaceHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 100; Inventory.PickupMessage "Pile of mace spheres [+100 Firemace]"; } }
class SkullRodAmmoNew : SkullRodAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 20; Inventory.PickupMessage "Lesser Runes [+20 Hellstaff]"; } }
class SkullRodHeftyNew : SkullRodHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 100; Inventory.PickupMessage "Greater Runes [+100 Hellstaff]"; } }

// **************************
// ***** AMMO REPLACERS *****
// **************************
class GoldWandAmmoSpawner : GoldWandAmmo replaces GoldWandAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("GoldWandNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("GoldWandNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualGoldWandNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualGoldWandNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("GoldWandAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("GoldWandAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("GoldWandAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("GoldWandAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class GoldWandHeftySpawner : GoldWandHefty replaces GoldWandHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("GoldWandNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("GoldWandNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualGoldWandNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualGoldWandNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("GoldWandHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("GoldWandHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("GoldWandHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("GoldWandHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class CrossbowAmmoSpawner : CrossbowAmmo replaces CrossbowAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("CrossbowNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("CrossbowNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualCrossbowNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualCrossbowNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("SuperCrossbowNew",AAPTR_PLAYER1) <= 0)
						{
							if (random(1,2048) <= 1)
							{
								A_SpawnItemEx("SuperCrossbowNew");
								A_FadeOut(1,1);
							}
						}
						else
						{
							if (CountInv("DualSuperCrossbowNew",AAPTR_PLAYER1) <= 0)
							{
								if (random(1,4096) <= 1)
								{
									A_SpawnItemEx("DualSuperCrossbowNew");
									A_FadeOut(1,1);
								}
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("CrossbowAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("CrossbowAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("CrossbowAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("CrossbowAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class CrossbowHeftySpawner : CrossbowHefty replaces CrossbowHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("CrossbowNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("CrossbowNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualCrossbowNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualCrossbowNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("SuperCrossbowNew",AAPTR_PLAYER1) <= 0)
						{
							if (random(1,2048) <= 1)
							{
								A_SpawnItemEx("SuperCrossbowNew");
								A_FadeOut(1,1);
							}
						}
						else
						{
							if (CountInv("DualSuperCrossbowNew",AAPTR_PLAYER1) <= 0)
							{
								if (random(1,4096) <= 1)
								{
									A_SpawnItemEx("DualSuperCrossbowNew");
									A_FadeOut(1,1);
								}
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("CrossbowHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("CrossbowHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("CrossbowHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class BlasterAmmoSpawner : BlasterAmmo replaces BlasterAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("DragonClawNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("DragonClawNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualDragonClawNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualDragonClawNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("DSparilStaff",AAPTR_PLAYER1) > 0)
						{
							if (random(1,8192) <= 1)
							{
								A_SpawnItemEx("DualDSparilStaff");
								A_FadeOut(1,1);
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("BlasterAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <=  1)	{ A_SpawnItemEx("BlasterAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("BlasterAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("BlasterAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class BlasterHeftySpawner : BlasterHefty replaces BlasterHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("DragonClawNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("DragonClawNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualDragonClawNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualDragonClawNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("DSparilStaff",AAPTR_PLAYER1) > 0)
						{
							if (random(1,8192) <= 1)
							{
								A_SpawnItemEx("DualDSparilStaff");
								A_FadeOut(1,1);
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("BlasterHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("BlasterHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("BlasterHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("BlasterHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class PhoenixRodAmmoSpawner : PhoenixRodAmmo replaces PhoenixRodAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("PhoenixRodNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("PhoenixRodNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualPhoenixRodNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualPhoenixRodNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("PhoenixRodAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("PhoenixRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("PhoenixRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("PhoenixRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class PhoenixRodHeftySpawner : PhoenixRodHefty replaces PhoenixRodHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("PhoenixRodNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("PhoenixRodNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualPhoenixRodNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualPhoenixRodNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("PhoenixRodHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("PhoenixRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("PhoenixRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class MaceAmmoSpawner : MaceAmmo replaces MaceAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("FiremaceNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("FiremaceNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualFiremaceNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualFiremaceNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("MaceAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("MaceAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("MaceAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("MaceAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class MaceHeftySpawner : MaceHefty replaces MaceHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("FiremaceNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("FiremaceNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualFiremaceNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualFiremaceNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("MaceHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("MaceHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("MaceHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("MaceHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class SkullRodAmmoSpawner : SkullRodAmmo replaces SkullRodAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("HellStaffNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("HellStaffNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualHellStaffNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualHellStaffNew");
							A_FadeOut(1,1);
						}
					}
				}
				if (Random(1,1) <= 1)		{ A_SpawnItemEx("SkullRodAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("SkullRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("SkullRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("SkullRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class SkullRodHeftySpawner : SkullRodHefty replaces SkullRodHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1) <= 1)		{ A_SpawnItemEx("SkullRodHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("SkullRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("SkullRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("SkullRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}
