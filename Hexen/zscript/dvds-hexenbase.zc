class MaulotaurFriendBase : MaulotaurBase
{
	int StartTime;

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		StartTime = -1;
	}

	override void Die (Actor source, Actor inflictor, int dmgflags)
	{
		Super.Die (source, inflictor, dmgflags);

		if (tracer && tracer.health > 0 && tracer.player)
		{
			// Search thinker list for minotaur
			ThinkerIterator it = ThinkerIterator.Create("MaulotaurFriendBase");
			MinotaurFriend mo;

			while ((mo = MinotaurFriend(it.Next())) != null)
			{
				if (mo.health <= 0) continue;
				// [RH] Minotaurs can't be morphed, so this isn't needed
				//if (!(mo.flags&MF_COUNTKILL)) continue;		// for morphed minotaurs
				if (mo.bCorpse) continue;
				if (mo.StartTime >= 0 && (level.maptime - StartTime) >= MAULATORTICS) continue;
				if (mo.tracer != null && mo.tracer.player == tracer.player) break;
			}

			if (mo == null)
			{
				Inventory power = tracer.FindInventory("PowerMinotaur");
				if (power != null)
				{
					power.Destroy ();
				}
			}
		}
	}
}

// Korax
class KoraxNew : AetheriusBossZSC
{
	// Korax
	const KORAX_ARM_EXTENSION_SHORT = 40;
	const KORAX_ARM_EXTENSION_LONG = 55;
	const KORAX_ARM1_HEIGHT = 108;
	const KORAX_ARM2_HEIGHT = 82;
	const KORAX_ARM3_HEIGHT = 54;
	const KORAX_ARM4_HEIGHT = 104;
	const KORAX_ARM5_HEIGHT = 86;
	const KORAX_ARM6_HEIGHT = 53;
	const KORAX_FIRST_TELEPORT_TID = 248;
	const KORAX_TELEPORT_TID = 249;
	const KORAX_DELTAANGLE = 85;
	const KORAX_COMMAND_HEIGHT = 120;
	const KORAX_COMMAND_OFFSET = 27;
	const KORAX_SPIRIT_LIFETIME = 5*TICRATE/5;	// 5 seconds
	
	int maxhealchance;
	int timeshealed;
	int maxhealsallowed;
	int user_koraxrepeatchance;
	
	default
	{
		Tag "Korax";
		Health 80000;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.667;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		DamageFactor "Crush", 0.0625;
		Speed 20;
		Radius 65;
		Height 115;
		Mass 2000;
		Damage 15;
		Monster;
		+BOSS;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+NOTARGET;
		+NOICEDEATH;
		+NOFEAR;
		SeeSound "KoraxSight";
		AttackSound "KoraxAttack";
		PainSound "KoraxPain";
		DeathSound "KoraxDeath";
		ActiveSound "KoraxActive";
		Obituary "$OB_KORAX"; // "%o was swept from the board by Korax."
	}
	
	override void PostBeginPlay()
	{
		maxhealchance = 32 + random(-4,4);
		maxhealsallowed = random(4,6);
		Super.PostBeginPlay();
	}
	
	//*******
	//*Korax*
	//*******
	//===========================================================================
	// Korax Variables
	//	tracer		last teleport destination
	//	special2	set if "below half" script not yet run
	//
	// Korax Scripts (reserved)
	//	249		Tell scripts that we are below half health
	//	250-254	Control scripts (254 is only used when less than half health)
	//	255		Death script
	//
	// Korax TIDs (reserved)
	//	245		Reserved for Korax himself
	//  248		Initial teleport destination
	//	249		Teleport destination
	//	250-254	For use in respective control scripts
	//	255		For use in death script (spawn spots)
	//===========================================================================
	void A_KoraxStep(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0)
	{
		A_StartSound("KoraxStep"); 
		A_DVDSChase(melee,missile,flags,type,value1,value2,value3,value4,value5); 
	}

	void A_KoraxChase()
	{
		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = (SpawnHealth() / 2); 
										else teleporthealth = (User_MaxHP / 2);
		if ((!special2) && (health <= (teleporthealth)))
		{
			ActorIterator it = level.CreateActorIterator(KORAX_FIRST_TELEPORT_TID);
			Actor spot = it.Next ();
			if (spot != null)
			{
				Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
			}
			ACS_Execute(249, 0);
			special2 = 1;	// Don't run again
			return;
		}

		if (target == null)
		{
			return;
		}
		if (random[KoraxChase]() < 30)
		{
			SetState(MissileState);
		}
		else if (random[KoraxChase]() < 30)
		{
			A_StartSound("KoraxActive", CHAN_VOICE, 1, false, ATTN_NONE);
		}

		// Teleport away
		int teleporthealth2;
		if (User_MaxHP <= 0) teleporthealth2 = SpawnHealth() >> 1; else teleporthealth2 = User_MaxHP >> 1;
		if (health < (teleporthealth2))
		{
			if (random[KoraxChase]() < 10)
			{
				ActorIterator it = level.CreateActorIterator(KORAX_TELEPORT_TID);
				Actor spot;

				if (tracer != null)
				{
					// Find the previous teleport destination
					do
					{
						spot = it.Next ();
					} while (spot != null && spot != tracer);
				}

				// Go to the next teleport destination
				spot = it.Next ();
				tracer = spot;
				if (spot)
				{
					Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
				}
			}
		}
	}

	void A_KoraxDecide()
	{
		if (random[KoraxDecide]() < 220)
		{
			SetStateLabel ("Attack");
		}
		else
		{
			SetStateLabel ("Command");
		}
	}

	void A_KoraxBonePop(int numspirits = 6)
	{
		// Spawn (usually 6?) spirits equalangularly
		double spiritangle = 360.0 / numspirits;
		for (int i = 0; i < numspirits; ++i)
		{
			Actor mo = SpawnMissileAngle ("KoraxSpiritNew", spiritangle*i, 5.);
			if (mo)
			{
				KSpiritInit (mo);
			}
		}
		ACS_Execute(255, 0);
	}

	private void KSpiritInit (Actor spirit)
	{
		spirit.health = KORAX_SPIRIT_LIFETIME;

		spirit.tracer = self;						// Swarm around korax
		spirit.WeaveIndexZ = 32 + (random[Kspiritnit]() & 7);	// Float bob index
		spirit.args[0] = 10; 						// initial turn value
		spirit.args[1] = 0; 						// initial look angle

		// Spawn a tail for spirit
		HolyTail.SpawnSpiritTail (spirit);
	}

	void A_KoraxMissile()
	{
		static const class<Actor> choices[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace"
		};
		static const class<Actor> choices2[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace",
			
			"HolyMissileNew",
			"HolyMissileNew",
			"FSwordMissileNew",
			"FSwordMissileNew",
			"MageStaffFX2New",
			"MageStaffFX2New"
		};
		static const class<Actor> crisischoices[] =
		{
			"WraithFX1Crisis", 

			"IceGuyFXCrisis", 

			"Demon1FX1Crisis", 
			"Demon2FX1Crisis", 
			"Demon3FXCrisis",
			"Demon4FXCrisis",
			"Demon5FX1Crisis",

			"FireDemonMissileCrisis", 
			"FireDemonLeaderMissileCrisis", 
			"FireDemonCommanderMissileCrisis", 
			"FireDemonQueenMissileCrisis", 

			"CentaurFXCrisis", 

			"SerpentFXCrisis", 

			"ThrownMaceCrisis"
		};
		static const class<Actor> crisischoices2[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace",
			
			"HolyMissileCrisis",
			"HolyMissileCrisis",
			"FSwordMissileCrisis",
			"FSwordMissileCrisis",
			"MageStaffFX2Crisis",
			"MageStaffFX2Crisis"
		};
		static const sound sounds[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss"
		};
		static const sound sounds2[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss",
			
			"HolyMissilePuff",
			"HolyMissilePuff",
			"FighterSwordFire",
			"FighterSwordFire",
			"MageStaffFire",
			"MageStaffFire"
		};
		int type = random[KoraxMissile]() % 14;
		int type2 = random[KoraxMissile]() % 20;

		A_StartSound("KoraxAttack", CHAN_VOICE);

		// Fire all 6 missiles at once
		A_StartSound(sounds[type], CHAN_WEAPON, 1, false, ATTN_NONE);

		A_MonsterCrisisCheck(); // Korax - Attack [Multiple (6) at once]
		class<Actor> info = choices[type];
		class<Actor> crisisinfo = crisischoices[type];

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		// Throws out the fireballs form Korax's arms
		//Console.Printf("Korax Volley 1");
		for (int i = 0; i < 6; ++i)
		{
			if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(0.0,0.2)); } else { KoraxFire(info, i, frandom(0.0,0.2)); }
		}
		if (health <= commandhealth)
		{
			if (random(1,256) <= 192)
			{
				//Console.Printf("Korax Volley 2 [low health]");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(2.0,2.2)); } else { KoraxFire(info, i, frandom(2.0,2.2)); }
				}
			}
			if (random(1,256) <= 128)
			{
				//Console.Printf("Korax Volley 3 [low health]");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(3.2,3.4)); } else { KoraxFire(info, i, frandom(3.2,3.4)); }
				}
			}
			if (random(1,256) <= 64)
			{
				//Console.Printf("Korax Volley 4 [low health]");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(4.4,4.6)); } else { KoraxFire(info, i, frandom(4.4,4.6)); }
				}
			}
			if (random(1,256) <= 32)
			{
				//Console.Printf("Korax Volley 5 [low health]");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(5.6,5.8)); } else { KoraxFire(info, i, frandom(5.6,5.8)); }
				}
			}
		}
		else
		{
			if (random(1,256) <= 96)
			{
				//Console.Printf("Korax Volley 2");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(2.0,2.2)); } else { KoraxFire(info, i, frandom(2.0,2.2)); }
				}
			}
			if (random(1,256) <= 48)
			{
				//Console.Printf("Korax Volley 3");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(3.2,3.4)); } else { KoraxFire(info, i, frandom(3.2,3.4)); }
				}
			}
			if (random(1,256) <= 24)
			{
				//Console.Printf("Korax Volley 4");
				for (int i = 0; i < 6; ++i)
				{
					if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); KoraxFire(crisisinfo, i, frandom(4.4,4.6)); } else { KoraxFire(info, i, frandom(4.4,4.6)); }
				}
			}
		}
	}

	void KoraxFire (Class<Actor> type, int arm, double angleerror = 0.0)
	{
		static const int extension[] =
		{
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG
		};
		static const int armheight[] =
		{
			KORAX_ARM1_HEIGHT,
			KORAX_ARM2_HEIGHT,
			KORAX_ARM3_HEIGHT,
			KORAX_ARM4_HEIGHT,
			KORAX_ARM5_HEIGHT,
			KORAX_ARM6_HEIGHT
		};

		double angerr2 = frandom(-angleerror,angleerror);
		double ang = angle + (arm < 3 ? -KORAX_DELTAANGLE : KORAX_DELTAANGLE) + angerr2;
		Vector3 pos = Vec3Angle(extension[arm], ang, armheight[arm] - Floorclip);
		SpawnKoraxMissile (pos, target, type, angerr2);
	}

	private void SpawnKoraxMissile (Vector3 pos, Actor dest, Class<Actor> type, double angleerror = 0.0)
	{
		Actor th = Spawn (type, pos, ALLOW_REPLACE);
		if (th != null)
		{
			th.target = self; // Originator
			double an = th.AngleTo(dest);
			if (dest.bShadow)
			{
				// Invisible target
				an += Random2[KoraxMissile]() * (45/256.);
			}
			an += frandom(-angleerror,angleerror);
			//Console.Printf("angle: %8f, angleerror: %8f", an, angleerror);

			th.angle = an;
			th.VelFromAngle();
			double dist = dest.DistanceBySpeed(th, th.Speed);
			th.Vel.Z = (dest.pos.z - pos.Z + 30) / dist;
			th.CheckMissileSpawn(radius);
		}
	}

	void A_KoraxCommand(int firstscriptnum = 250, int lastscriptnum = 254)
	{
		int numcommands;

		A_StartSound("KoraxCommand", CHAN_VOICE);

		// Shoot stream of lightning to ceiling
		double ang = angle - 90;
		Vector3 pos = Vec3Angle(KORAX_COMMAND_OFFSET, ang, KORAX_COMMAND_HEIGHT);

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		int maxhealchance2 = maxhealchance;
		if (health >= (User_MaxHP * 2)) maxhealchance2 *= 256;
		if (health >= (User_MaxHP * 1.5)) maxhealchance2 *= 1.75;
		if (health >= (User_MaxHP * 1.0)) maxhealchance2 *= 1.5;
		if (health <= (User_MaxHP * 0.75)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.5)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.25)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.0625)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.03125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.015625)) maxhealchance2 *= 0.5;
		if (maxhealchance2 < 1) maxhealchance2 = 1;

		int TrueGameSkill = dvds_gendifficultycurve + Skill;

		//Console.Printf("\cycommandhealth: %d", commandhealth);
		int maxheals = (maxhealsallowed + (TrueGameSkill * 0.625));
		if (timeshealed <= maxheals)
		{
			int healroll = random(1,maxhealchance2);
			//Console.Printf("\cxhealroll: %d / maxhealchance: %d", healroll, maxhealchance2);
			if (healroll <= 1)
			{
				Spawn("KoraxBoltHealing", pos, ALLOW_REPLACE);
				int healamount;
				healamount = user_MaxHP * (frandompick(frandom(0.0375,0.075), frandom(0.10,0.15), frandom(0.20,0.30)) * (1.00 + ((TrueGameSkill * 0.125))));
				int temphealth = health + healamount;
				if (temphealth > (user_MaxHP * 2)) temphealth = (user_MaxHP * 2);
				health = temphealth;
				A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_StartSound("healing_dq",84,CHANF_DEFAULT,1.0,ATTN_NONE);
				A_PrintHealingMessage(self, healamount);
				int healscale = frandom(1.25,1.75);
				maxhealchance *= (frandompick(1.125,1.25,1.375,1.5,1.625,1.75,1.875) * (1.00 - (TrueGameSkill * 0.0625)));
				A_UCIIHealSpark(self,"CustomHealSpark",healscale,healscale,"Heal3Glitter",random(12,20),(healscale*5),(healscale*5),(healscale*5));
				timeshealed++;
				//Console.Printf("\czKorax Healed Himself %d Times So Far!", timeshealed);
			}
			else
			{
				Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
				ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
			}
		}
		else
		{
			Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
			ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
		}
	}
	
	States
	{
		Pain.Charm: Goto See;
		Spawn:
			KORX A 0 NoDelay;
			KORX A 5 A_Look();
			goto Spawn+1;
		See:
			KORX A 0;
			KORX AAA 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX B 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			KORX BBB 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX C 0 A_StartSound("KoraxStep");
			KORX C 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			KORX CCC 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX D 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			KORX DDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX A 0 A_StartSound("KoraxStep");
			KORX A 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			KORX H 5 A_DVDSPain();
			KORX H 5;
			Goto See;
		Pain.Fist:
			KORX H 5 A_DVDSPain();
			KORX HH 5;
			Goto See;
		Pain.Kick:
			KORX H 5 A_DVDSPain();
			KORX HHH 5;
			Goto See;
		Missile:
			KORX E 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_FaceTarget();
			}
			KORX E 5 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_KoraxDecide();
				A_FaceTarget();
			}
			Wait;
		Attack:
			KORX E 4 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();
			}
		AttackLoop:
			KORX F 8 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_KoraxMissile();
				A_FaceTarget();
			}
			KORX E 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			KORX E 0 Bright
			{
				user_koraxrepeatchance = 32 + (user_monsterlevel/5);
				if (user_koraxrepeatchance >= 160) { user_koraxrepeatchance = 160; }

				if (random(1,256) <= user_koraxrepeatchance) { return resolvestate("AttackLoop"); }
				return resolvestate(null);
			}
			Goto See;
		Command:
			KORX E 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			KORX W 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX G 15 Bright 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 125) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 50) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 25) { A_SetTics(14); }
				A_FaceTarget();
				A_KoraxCommand();
			}
			KORX W 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX E 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			KORX I 5;
			KORX J 5 A_FaceTarget();
			KORX K 5 A_Scream;
			KORX LMNOP 5;
			KORX Q 10;
			KORX R 5 A_KoraxBonePop(randompick(6,6,6,12,12,18));
			KORX S 5 A_NoBlocking();
			KORX TU 5;
			KORX V -1;
			Stop;
	}
}

class KoraxSpiritNew : AetheriusBaseZSC replaces KoraxSpirit
{
	Default
	{
		Speed 8;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			SPIR AB 5 A_KSpiritRoam;
			Loop;
		Death:
			SPIR DEFGHI 5;
			Stop;
	}
	
	//============================================================================
	//
	// A_KSpiritSeeker
	//
	//============================================================================

	private void KSpiritSeeker (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == null)
		{
			return;
		}
		double dir = deltaangle(angle, AngleTo(target));
		double delta = abs(dir);
		if (delta > thresh)
		{
			delta /= 2;
			if(delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if(dir > 0)
		{ // Turn clockwise
			angle += delta;
		}
		else
		{ // Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(Level.maptime&15) 
			|| pos.z > target.pos.z + target.Default.Height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + random[KoraxRoam]() * target.Default.Height / 256;
			double deltaZ = newZ - pos.z;

			if (abs(deltaZ) > 15)
			{
				if(deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ + DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_KSpiritRoam
	//
	//============================================================================

	void A_KSpiritRoam()
	{
		if (health-- <= 0)
		{
			A_StartSound("SpiritDie", CHAN_VOICE);
			SetStateLabel ("Death");
		}
		else
		{
			if (tracer)
			{
				KSpiritSeeker(args[0], args[0] * 2.);
			}
			int xyspeed = random[KoraxRoam](0, 4);
			int zspeed = random[KoraxRoam](0, 4);
			A_Weave(xyspeed, zspeed, 4., 2.);

			if (random[KoraxRoam]() < 50)
			{
				A_StartSound("SpiritActive", CHAN_VOICE, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}

class KoraxBoltNew : AetheriusBaseZSC replaces KoraxBolt
{
	const KORAX_BOLT_HEIGHT		= 48.;
	const KORAX_BOLT_LIFETIME		= 3;
	
	Default
	{
		Radius 15;
		Height 35;
		Projectile;
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltNew");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
	
	//============================================================================
	//
	// A_KBolt
	//
	//============================================================================

	void A_KBolt()
	{
		// Countdown lifetime
		if (special1-- <= 0)
		{
			Destroy ();
		}
	}

	//============================================================================
	//
	// A_KBoltRaise
	//
	//============================================================================

	void A_KBoltRaise(string actorname = "KoraxBoltNew")
	{
		// Spawn a child upward
		double z = pos.z + KORAX_BOLT_HEIGHT;

		if ((z + KORAX_BOLT_HEIGHT) < ceilingz)
		{
			Actor mo = Spawn(actorname, (pos.xy, z), ALLOW_REPLACE);
			if (mo)
			{
				mo.special1 = KORAX_BOLT_LIFETIME;
			}
		}
	}
}

class KoraxBoltHealing : KoraxBoltNew
{
	default
	{
		Translation "217:223=211:216", "32:32=216:216";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltHealing");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
}

// Heresiarch Stuff O______________o
class HeresiarchNew : AetheriusBossZSC replaces Heresiarch
{
	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBallBase> StopBall;
	int HPLowRange;
	int HPCritRange;
	Actor ptrheresiarch;
	
	Default
	{
		Tag "Heresiarch";
		Health 50000;
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 15; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		DamageFactor "Crush", 0.3; // 2.4
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3 NoDelay;
			SORC A 0
			{
				HPLowRange = user_HPLowRange;
				HPCritRange = user_HPCritRange;
			}
			SORC A 2 
			{
				A_ShieldCheck();
				A_SorcSpinBalls();
			}
		Idle:
			SORC A 10 
			{
				A_ShieldCheck();
				A_Look();
			}
			Wait;
		See:
			SORC A 0 
			{
				A_ShieldCheck();
			}
			SORC ABCD 5
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = 1; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_ShieldCheck();
				A_Chase();
			}
			Loop;
		Pain:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_Pain();
				A_ShieldCheck();
			}
			Goto See;
		Pain.Fist:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_Pain();
				A_ShieldCheck();
			}
			SORC G 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Pain.Kick:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_Pain();
				A_ShieldCheck();
			}
			SORC GG 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC F 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			SORC F 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_SpeedBalls();
				A_ShieldCheck();
			}
			SORC F 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Wait;
		Missile1:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC E 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_ShieldCheck();
			}
			SORC E 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_SpawnFizzle();
				A_ShieldCheck();
			}
			SORC E 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Goto Missile1+1;
		Missile2:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC E 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_ShieldCheck();
			}
			SORC E 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_SorcBossAttack();
				A_ShieldCheck();
			}
			Goto See;
		Death:
			TNT1 A 0 
			{
				A_DVDSNormalDeath(-2,0,1);
				A_ShieldCheck();
			}
			SORC H 5 Bright
			{
				A_ShieldCheck();
			}
			SORC I 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC J 5 Bright 
			{
				A_ShieldCheck();
				A_Scream();
			}
			SORC KLMNOPQRST 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC U 5 Bright 
			{
				A_ShieldCheck();
				A_NoBlocking();
			}
			SORC VWXY 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC Z -1 Bright;
			Stop;
	}


	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_ShieldCheck()
	{
		if (args[0] <= 0)
		{
			bReflective = false; 
			bInvulnerable = false; 
			bNoPain = false; 
			bNoBlood = false; 
			bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_DEFAULT);
		}
	}
	//============================================================================
	//
	// A_StopBalls
	//
	// Instant stop when rotation gets to ball in special2
	//		self is sorcerer
	//
	//============================================================================

	// Selects which Mana Cube to use a spell from. :V
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2Base";	// Blue
		}
		else if ((health < (Score/2)) && (chance < 200))
		{
			StopBall = "SorcBall3Base";	// Green
		}
		else
		{
			StopBall = "SorcBall1Base";	// Yellow
		}
	}

	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1Base", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}

class FHeresiarch : HeresiarchNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

// Projectiles
// Base class for the balls flying around the Heresiarch's head -------------
class SorcBallBase : AetheriusProjectileZSC
{
	Default
	{
		Tag "Heresiarch Mana Cube";
		Speed 10;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererBigBallExplode";
	}

	double OldAngle, AngleOffset;

	//============================================================================
	//
	// SorcBall::DoFireSpell
	//
	//============================================================================

	virtual void DoFireSpell ()
	{
		CastSorcererSpell ();
		target.args[3] = HeresiarchNew.SORC_STOPPED;
	}

	
	virtual void SorcUpdateBallAngle ()
	{
	}
	
	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// don't blast sorcerer balls
		return false;
	}
	
	//============================================================================
	//
	// ASorcBall::CastSorcererSpell
	//
	// Make noise and change the parent sorcerer's animation
	//
	//============================================================================

	virtual void CastSorcererSpell ()
	{
		target.A_StartSound("SorcererSpellCast", CHAN_VOICE);

		// Put sorcerer into throw spell animation
		if (target.health > 0)
			target.SetStateLabel ("Missile2");
	}

	//============================================================================
	//
	// A_SorcBallOrbit
	//
	// - actor is ball
	//============================================================================

	void A_SorcBallOrbit()
	{
		// [RH] If no parent, then die instead of crashing
		if (target == null || target.health <= 0)
		{
			SetStateLabel ("Pain");
			return;
		}

		int mode = target.args[3];
		HeresiarchNew parent = HeresiarchNew(target);
		double dist = parent.radius - (radius*2);

		double prevangle = OldAngle;
		double baseangle = parent.BallAngle;
		double curangle = baseangle + AngleOffset;

		angle = curangle;

		switch (mode)
		{
		case HeresiarchNew.SORC_NORMAL:			// Balls rotating normally
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_DECELERATE:		// Balls decelerating
			A_DecelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_ACCELERATE:		// Balls accelerating
			A_AccelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_STOPPING:			// Balls stopping
			if ((parent.StopBall == GetClass()) &&
				(parent.args[1] > HeresiarchNew.SORCBALL_SPEED_ROTATIONS) &&
				absangle(curangle, parent.angle) < 42.1875)
			{
				// Can stop now
				target.args[3] = HeresiarchNew.SORC_FIRESPELL;
				target.args[4] = 0;
				// Set angle so self angle == sorcerer angle
				parent.BallAngle = parent.angle - AngleOffset;
			}
			else
			{
				SorcUpdateBallAngle ();
			}
			break;

		case HeresiarchNew.SORC_FIRESPELL:			// Casting spell
			if (parent.StopBall == GetClass())
			{
				// Put sorcerer into special throw spell anim
				if (parent.health > 0)
					parent.SetStateLabel("Missile1");

				DoFireSpell ();
			}
			break;

		case HeresiarchNew.SORC_FIRING_SPELL:
			if (parent.StopBall == GetClass())
			{
				if (special2-- <= 0)
				{
					// Done rapid firing 
					parent.args[3] = HeresiarchNew.SORC_STOPPED;
					// Back to orbit balls
					if (parent.health > 0)
						parent.SetStateLabel("Missile2");
				}
				else
				{
					// Do rapid fire spell
					A_SorcOffense2();
				}
			}
			break;

		default:
			break;
		}

		// The comparison here depends on binary angle semantics and cannot be done in floating point.
		// It also requires very exact conversion that must be done natively.
		if (BAM(curangle) < BAM(prevangle) && (parent.args[4] == HeresiarchNew.SORCBALL_TERMINAL_SPEED))
		{
			parent.args[1]++;			// Bump rotation counter
			// Completed full rotation - make woosh sound
			A_StartSound("SorcererBallWoosh", CHAN_BODY);
		}
		OldAngle = curangle;		// Set previous angle

		Vector3 pos = parent.Vec3Angle(dist, curangle, -parent.Floorclip + parent.Height);
		SetOrigin (pos, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}

	//============================================================================
	//
	// A_SorcOffense2
	//
	// Actor is ball
	//
	//============================================================================

	void A_SorcOffense2()
	{
		Actor parent = target;
		Actor dest = parent.target;

		// [RH] If no enemy, then don't try to shoot.
		if (dest == null)
		{
			return;
		}

		// Heresiarch's Purple Fireballs
		string basemissile4 = "SorcFX4New";

		let parentHeresiarch = HeresiarchNew(parent);

		int canusecrisisatk = 0;
		if (parentHeresiarch.health <= parentHeresiarch.user_HPLowRange) { if (parentHeresiarch.health <= parentHeresiarch.user_HPCritRange) { canusecrisisatk = 1; } else { if (random(1,4) == 4) { canusecrisisatk = 1;	} } }
		if (dvds_monstercrisisattacks == 0) { canusecrisisatk = 0; }
		if (canusecrisisatk == 1) 
		{
			A_PlayCrisisAtkSound();
 			basemissile4 = "SorcFX4Crisis"; 
		}

		int index = args[4];
		args[4] = (args[4] + 15) & 255;
		double delta = sin(index * (360 / 256.f)) * HeresiarchNew.SORCFX4_SPREAD_ANGLE;

		double ang1 = Angle + delta;
		Actor mo = parent.SpawnMissileAngle(basemissile4, ang1, 0);
		if (mo)
		{
			mo.special2 = 35*5/2;		// 5 seconds
			double dist = mo.DistanceBySpeed(dest, mo.Speed);
			mo.Vel.Z = (dest.pos.z - mo.pos.z) / dist;
		}
	}

	//============================================================================
	//
	// A_AccelBalls
	//
	// Increase ball orbit speed - actor is ball
	//
	//============================================================================

	void A_AccelBalls()
	{
		HeresiarchNew sorc = HeresiarchNew(target);

		if (sorc.args[4] < sorc.args[2])
		{
			sorc.args[4]++;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
			if (sorc.args[4] >= HeresiarchNew.SORCBALL_TERMINAL_SPEED)
			{
				// Reached terminal velocity - stop balls
				sorc.A_StopBalls();
			}
		}
	}

	//============================================================================
	//
	// A_DecelBalls
	//
	// Decrease ball orbit speed - actor is ball
	//
	//============================================================================

	void A_DecelBalls()
	{
		Actor sorc = target;

		if (sorc.args[4] > sorc.args[2])
		{
			sorc.args[4]--;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
		}
	}


	void A_SorcBallExplode()
	{
		bNoBounceSound = true;
		A_Explode(255, 255);
	}
	
	//============================================================================
	//
	// A_SorcBallPop
	//
	// Ball death - bounce away in a random direction
	//
	//============================================================================

	void A_SorcBallPop()
	{
		A_StartSound("SorcererBallPop", CHAN_BODY, 1, false, ATTN_NONE);
		bNoGravity = false;
		Gravity = 1. / 8;

		Vel.X = ((random[Heresiarch]()%10)-5);
		Vel.Y = ((random[Heresiarch]()%10)-5);
		Vel.Z = (2+(random[Heresiarch]()%3));
		args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;	// Bounce time unit
		args[3] = 5;					// Bounce time in seconds
	}
	
	//============================================================================
	//
	// A_BounceCheck
	//
	//============================================================================

	void A_BounceCheck ()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererBigBallExplode", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
	}
	
}

// First ball (purple) - fires projectiles ----------------------------------
class SorcBall1Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMP ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMP A 5 A_SorcBallPop;
			SBMP B 2 A_BounceCheck;
			Wait;
		Death:
			SBS4 D 5 A_SorcBallExplode;
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL1_ANGLEOFFSET;
	}

	//============================================================================
	//
	// SorcBall1::CastSorcererSpell
	//
	// Offensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{

		Super.CastSorcererSpell ();

		Actor parent = target;

		// Heresiarch's Bouncing Lavaballs
		string basemissile1 = "SorcFX1New";

		let parentHeresiarch = HeresiarchNew(parent);
		int canusecrisisatk = 0;
		if (parentHeresiarch.health <= parentHeresiarch.user_HPLowRange) { if (parentHeresiarch.health <= parentHeresiarch.user_HPCritRange) { canusecrisisatk = 1; } else { if (random(1,4) == 4) { canusecrisisatk = 1;	} } }
		if (dvds_monstercrisisattacks == 0) { canusecrisisatk = 0; }
		if (canusecrisisatk == 1) 
		{
			A_PlayCrisisAtkSound();
 			basemissile1 = "SorcFX1Crisis"; 
		}

		double ang1 = Angle + 70;
		double ang2 = Angle - 70;
		Class<Actor> cls = basemissile1;
		Actor mo = parent.SpawnMissileAngle (cls, ang1, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
		mo = parent.SpawnMissileAngle (cls, ang2, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
	}

	
	//============================================================================
	//
	// ASorcBall1::SorcUpdateBallAngle
	//
	// Update angle if first ball
	//============================================================================

	override void SorcUpdateBallAngle ()
	{
		(HeresiarchNew(target)).BallAngle += target.args[4];
	}

	//============================================================================
	//
	// SorcBall1::DoFireSpell
	//
	//============================================================================

	override void DoFireSpell ()
	{
		if (random[Heresiarch]() < 200)
		{
			target.A_StartSound("SorcererSpellCast", CHAN_VOICE, 1, false, ATTN_NONE);
			special2 = HeresiarchNew.SORCFX4_RAPIDFIRE_TIME;
			args[4] = 128;
			target.args[3] = HeresiarchNew.SORC_FIRING_SPELL;
		}
		else
		{
			Super.DoFireSpell ();
		}
	}
}

// Second ball (blue) - generates the shield --------------------------------
class SorcBall2Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMB ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMB A 5 A_SorcBallPop;
			SBMB B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL2_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall2::CastSorcererSpell
	//
	// Defensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Super.CastSorcererSpell ();

		Actor parent = target;
		Actor mo = Spawn("SorcFX2", Pos + (0, 0, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT), ALLOW_REPLACE);
		parent.bReflective = true;
		//parent.bInvulnerable = true;
		parent.bNoPain = true;
		parent.bNoBlood = true;
		parent.bBuddha = true;
		A_GiveInventory("HeresiarchShieldDefense",1,AAPTR_TARGET);
		parent.args[0] = HeresiarchNew.SORC_DEFENSE_TIME;
		if (mo) mo.target = parent;
	}

	
}

// Third ball (green) - summons Bishops -------------------------------------
class SorcBall3Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMG ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMG A 5 A_SorcBallPop;
			SBMG B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL3_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall3::CastSorcererSpell
	//
	// Reinforcements
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Actor mo;
		Super.CastSorcererSpell ();
		Actor parent = target;

		double ang1 = Angle - 45;
		double ang2 = Angle + 45;
		Class<Actor> cls = "SorcFX3";

		if (parent.health < (parent.Score/4))
		{
			// Spawn 2 at a time
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
			mo = parent.SpawnMissileAngle(cls, ang2, 4.);
			if (mo) mo.target = parent;
		}			
		else
		{
			if (random[Heresiarch]() < 128)	ang1 = ang2;
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
		}
	}

}


// Sorcerer spell 1 (The burning, bouncing head thing) ----------------------
class SorcFX1Base : AetheriusProjectileZSC
{
	Default
	{
		Tag "Heresiarch Bouncing Fireface";
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		-NOGRAVITY
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceFactor 1.0;
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}

	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek;
			Loop;
		Death:
			FHFX S 2 Bright A_Explode(30, 128);
			FHFX SS 6 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX1Seek
	//
	// Yellow spell - offense
	//
	//============================================================================

	void A_SorcFX1Seek()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererHeadScream", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
		A_SeekerMissile(2, 6);
	}
	
}

// Sorcerer spell 2 (The visible part of the shield) ------------------------
class SorcFX2Base : AetheriusProjectileZSC
{
	Default
	{
		Speed 15;
		Radius 5;
		Height 5;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
	}

	states
	{
		Spawn:
			SBS2 A 3 Bright A_SorcFX2Split;
			Loop;
		Orbit:
			SBS2 A 2 Bright;
			SBS2 BCDEFGHIJKLMNOPA 2 Bright A_SorcFX2Orbit;
			Goto Orbit+1;
		Death:
			SBS2 A 10;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX2Split
	//
	// Blue spell - defense
	//
	//============================================================================
	//
	// FX2 Variables
	//		specialf1		current angle
	//		special2
	//		args[0]		0 = CW,  1 = CCW
	//		args[1]		
	//============================================================================

	// Split ball in two
	void A_SorcFX2Split()
	{
		Actor mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 0;									// CW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 1;									// CCW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		Destroy ();
	}

	//============================================================================
	//
	// A_SorcFX2Orbit
	//
	// Orbit FX2 about sorcerer
	//
	//============================================================================

	void A_SorcFX2Orbit ()
	{
		Actor parent = target;

		// [RH] If no parent, then disappear
		if (parent == null)
		{
			Destroy();
			return;
		}

		double dist = parent.radius;

		if ((parent.health <= 0) ||		// Sorcerer is dead
			(!parent.args[0]))				// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bInvulnerable = false;
			parent.bNoPain = false; 
			parent.bNoBlood = false;
			parent.bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_TARGET);
		}

		if (args[0] && (parent.args[0]-- <= 0))		// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bNoPain = false;
			parent.bNoBlood = false;
			parent.bBuddha = false;
		}

		Vector3 posi;
		// Move to new position based on angle
		if (args[0])		// Counter clock-wise
		{
			specialf1 += 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 15 * cos(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}
		else							// Clock wise
		{
			specialf1 -= 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 20 * sin(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}

		SetOrigin (posi, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}
}

// Sorcerer spell 3 (The Bishop spawner) ------------------------------------
class SorcFX3Base : AetheriusProjectileZSC
{
	Default
	{
		Tag "Heresiarch Spawn Sphere";
		Speed 15;
		Radius 22;
		Height 65;
		+NOBLOCKMAP
		+MISSILE
		+NOTELEPORT
		SeeSound "SorcererBishopSpawn";
	}

	States
	{
		Spawn:
			SBS3 ABC 2 Bright;
			Loop;
		Death:
			SBS3 A 4 Bright;
			BISH P 4 A_SorcererBishopEntry;
			BISH ON 4;
			BISH MLKJIH 3;
			BISH G 3 A_SpawnBishop;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcererBishopEntry
	//
	//============================================================================

	void A_SorcererBishopEntry()
	{
		Spawn("SorcFX3Explosion", Pos, ALLOW_REPLACE);
		A_StartSound(SeeSound, CHAN_VOICE);
	}

	//============================================================================
	//
	// A_SpawnBishop
	//
	// Green spell - spawn bishops
	//
	//============================================================================

	void A_SpawnBishop()
	{
		Actor mo = Spawn("Bishop", Pos, ALLOW_REPLACE);
		if (mo)
		{
			if (!mo.TestMobjLocation())
			{
				mo.ClearCounters();
				mo.Destroy ();
			}
			else if (target != null)
			{
				// [RH] Make the new bishops inherit the Heriarch's target
				mo.CopyFriendliness (target, true);
				mo.master = target;
			}
		}
		Destroy ();
	}
}


// Sorcerer spell 4 (The purple projectile) ---------------------------------
class SorcFX4Base : AetheriusProjectileZSC
{
	Default
	{
		Tag "Heresiarch Magic Missile";
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		DeathSound "SorcererBallExplode";
	}

	States
	{
	Spawn:
		SBS4 ABC 2 Bright A_SorcFX4Check;
		Loop;
	Death:
		SBS4 D 2 Bright;
		SBS4 E 2 Bright A_Explode(20, 128);
		SBS4 FGH 2 Bright;
		Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX4Check
	//
	// FX4 - rapid fire balls
	//
	//============================================================================

	void A_SorcFX4Check()
	{
		if (special2-- <= 0)
		{
			SetStateLabel ("Death");
		}
	}
}

// Heresiarch
class SorcBall1New : SorcBall1Base replaces SorcBall1
{
	States
	{
		Death:
			SBS4 D 0 { bNOBOUNCESOUND = true; }
			SBS4 D 5 A_Explode(255, 255);
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}
}
class SorcBall2New : SorcBall2Base replaces SorcBall2
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}

class SorcBall3New : SorcBall3Base replaces SorcBall3
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}

class SorcFX1New : SorcFX1Base replaces SorcFX1
{
	default
	{
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+FULLVOLDEATH;
		+CANBOUNCEWATER;
		+NOWALLBOUNCESND;
		BounceFactor 1.0;
		DamageType "Magic";
		+HEXENBOUNCE;
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}
	
	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek();
			Loop;
		Death:
			FHFX S 2 Bright 
			{
				A_Explode(30, 128, 0);
			}
			FHFX SS 6 Bright;
			Stop;
	}
}
class SorcFX1Crisis : SorcFX1New
{
	default
	{
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+FULLVOLDEATH;
		+CANBOUNCEWATER;
		+NOWALLBOUNCESND;
		BounceFactor 1.0;
		DamageType "Magic";
		+HEXENBOUNCE;
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}
	
	States
	{
		Spawn:
			SBS1 A 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			SBS1 BCD 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_SorcFX1Seek();
			}
			Loop;
		Death:
			FHFX S 2 Bright 
			{
				A_Explode(30*CrisisMultiplier, 128, 0);
			}
			FHFX SS 6 Bright;
			Stop;
	}
}

class SorcFX4New : SorcFX4Base replaces SorcFX4
{
	default
	{
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		DamageType "Magic";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "SorcererBallExplode";
	}
	
	States
	{
		Spawn:
			SBS4 ABC 2 Bright 
			{
				A_SorcFX4Check();
			}
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright
			{
				A_Explode(20, 128, 0);
			}
			SBS4 FGH 2 Bright;
			Stop;
	}
}
class SorcFX4Crisis : SorcFX4New
{
	default
	{
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		DamageType "Magic";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "SorcererBallExplode";
	}
	
	States
	{
		Spawn:
			SBS4 ABC 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_SorcFX4Check();
			}
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright
			{
				A_Explode(20*CrisisMultiplier, 128, 0);
			}
			SBS4 FGH 2 Bright;
			Stop;
	}
}

// MONSTER SPAWNERS

// Ettin
class EttinSpawner : AetheriusMonsterSpawner replaces Ettin
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,1024) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,4096) <= evolveChance)
				return "Bormereth";
			else
				return "EttinCommander";
		}
		else
			return "EttinNew";
	}
}

// Green Chaos Serpent Spawner
class Demon1Spawner : AetheriusMonsterSpawner replaces Demon1
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,512) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,4096) <= evolveChance)
				return "EtherealChaosSerpentNew";
			else
				return "MagmaChaosSerpentNew";
		}
		else
			return "GreenChaosSerpentNew";
	}
}

// Brown Chaos Serpent Spawner
class Demon2Spawner : AetheriusMonsterSpawner replaces Demon2
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,512) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,4096) <= evolveChance)
				return "EtherealChaosSerpentNew";
			else
				return "BlackChaosSerpentNew";
		}
		else
			return "BrownChaosSerpentNew";
	}
}

class AfritSpawner : AetheriusMonsterSpawner replaces FireDemon
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,512) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,2048) <= evolveChance)
					return "FireDemonQueen";
				else
					return "FireDemonCommander";
			}
			else
				return "FireDemonLeader";
		}
		else
			return "FireDemonNew";
	}
}

class BishopSpawner : AetheriusMonsterSpawner replaces Bishop
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,512) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,2048) <= evolveChance)
					return "DarkPatriarch";
				else
					return "VampireDVDS";
			}
			else
				return "DarkDisciple";
		}
		else
			return "BishopNew";
	}
}

class StalkerSpawner : AetheriusMonsterSpawner replaces Serpent
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
			return "IceStalker";
		else
			return "StalkerNew";
	}
}

class StalkerLeaderSpawner : AetheriusMonsterSpawner replaces SerpentLeader
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
			return "IceStalkerLeader";
		else
			return "StalkerLeaderNew";
	}
}

class PatriarchRadiusHeal : AetheriusCustomInventory
{
	default
	{
		Inventory.MaxAmount 1;
		+Inventory.AUTOACTIVATE
	}

	override void Tick()
	{
		//Console.Printf("e324");
		let healactor = AetheriusMonsterZSC(owner);
		if (healactor)
		{
			if (healactor.health > 0 && healactor.health < healactor.user_MaxHP) { healactor.health += random(10,12); }
		}
		super.Tick();
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ThrustFloorDVDS : AetheriusBaseZSC replaces ThrustFloor
{
	int bloodtimer;
	Default
	{
		Tag "Thrusting Trap Spike";
		Radius 20;
		Height 128;
	}
	
	override void Tick()
	{
		if (args[1])
		{
			bloodtimer++;
			if (bloodtimer >= (35*60))
			{
				bloodtimer = (random(-6,6) * 35);
				args[1] = 0; // Unbloodies the spike after 60 seconds
			}
		}

		super.Tick();
	}

	States
	{
		ThrustRaising:
			TSPK A 1 A_ThrustRaise;
			Loop;
		BloodThrustRaising:
			TSPK B 1 A_ThrustRaise;
			Loop;
		ThrustLower:
			TSPK A 1 A_ThrustLower(12);
			Loop;
		BloodThrustLower:
			TSPK B 1 A_ThrustLower(12);
			Loop;
		ThrustInit1:
			TSPK A 1;
			TSPK A 1 A_ThrustInitDn(10);
			TSPK A -1;
			Loop;
		BloodThrustInit1:
			TSPK B 1;
			TSPK B 1 A_ThrustInitDn(10);
			TSPK B -1;
			Loop;
		ThrustInit2:
			TSPK A 1;
			TSPK A 1 A_ThrustInitUp(10);
			TSPK A 3;
			Loop;
		BloodThrustInit2:
			TSPK B 1;
			TSPK B 1 A_ThrustInitUp(10);
			TSPK B 3;
			Loop;
		ThrustRaise:
			TSPK A 1
			{
				A_ThrustRaise();
			}
			TSPK A 1
			{
				A_ThrustRaise();
				A_SetSolid();
				A_ThrustImpale();
			}
			Loop;
		BloodThrustRaise:
			TSPK B 1
			{
				A_ThrustRaise();
			}
			TSPK B 1
			{
				A_ThrustRaise();
				A_SetSolid();
				A_ThrustImpale();
			}
			Loop;
	}
	
	override void Activate (Actor activator)
	{
		if (args[0] == 0)
		{
			A_StartSound ("ThrustSpikeLower", CHAN_BODY);
			bInvisible = false;
			if (args[1])
				SetStateLabel("BloodThrustRaise");
			else
				SetStateLabel("ThrustRaise");
		}
	}

	override void Deactivate (Actor activator)
	{
		if (args[0] == 1)
		{
			A_StartSound ("ThrustSpikeRaise", CHAN_BODY);
			if (args[1])
				SetStateLabel("BloodThrustLower");
			else
				SetStateLabel("ThrustLower");
		}
	}
	
	//===========================================================================
	//
	// Thrust floor stuff
	//
	// Thrust Spike Variables
	//		master		pointer to dirt clump actor
	//		special2	speed of raise
	//		args[0]		0 = lowered,  1 = raised
	//		args[1]		0 = normal,   1 = bloody
	//===========================================================================

	void A_ThrustInitUp(int speed = 5)
	{
		special2 = speed;	// Raise speed
		args[0] = 1;		// Mark as up
		Floorclip = 0;
		bSolid = true;
		bNoTeleport = true;
		bFloorClip = true;
		special1 = 0;
	}

	void A_ThrustInitDn(int speed = 5)
	{
		special2 = speed;	// Raise speed
		args[0] = 0;		// Mark as down
		Floorclip = Default.Height;
		bSolid = false;
		bNoTeleport = true;
		bFloorClip = true;
		bInvisible = true;
		master = Spawn("DirtClump", Pos, ALLOW_REPLACE);
	}


	void A_ThrustRaise()
	{
		if (RaiseMobj (special2))
		{	// Reached it's target height
			args[0] = 1;
			if (args[1])
				SetStateLabel ("BloodThrustInit2", true);
			else
				SetStateLabel ("ThrustInit2", true);
		}

		// Lose the dirt clump
		if ((Floorclip < Height) && master)
		{
			master.Destroy ();
			master = null;
		}

		// Spawn some dirt
		if (random[Thrustraise]()<40)
			SpawnDirt (radius);
		special2++;							// Increase raise speed
	}

	void A_ThrustLower(int speed = 12)
	{
		if (SinkMobj (speed))
		{
			args[0] = 0;
			if (args[1])
				SetStateLabel ("BloodThrustInit1", true);
			else
				SetStateLabel ("ThrustInit1", true);
		}
	}

	
	void A_ThrustImpale()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self);
		while (it.Next())
		{
			let targ = it.thing;
			if (targ != null)
			{
				AetheriusPlayerPawn playpawn;
				AetheriusMonsterZSC DVDSActor;
				playpawn = AetheriusPlayerPawn(targ);
				DVDSActor = AetheriusMonsterZSC(targ);

				double blockdist = radius + targ.radius;
				if (abs(targ.pos.x - it.Position.X) >= blockdist || abs(targ.pos.y - it.Position.Y) >= blockdist)
					continue;

				// Q: Make this z-aware for everything? It never was before.
				if (targ.pos.z + targ.height < pos.z || targ.pos.z > pos.z + height)
				{
					if (CurSector.PortalGroup != targ.CurSector.PortalGroup)
						continue;
				}

				if (!targ.bShootable)
					continue;

				if (targ == self)
					continue;	// don't clip against self
				
				int newdam2;
				if (playpawn)
				{
					if (!(CallACS("GetBuffTimer",4) > 0 || playpawn.bINVULNERABLE || playpawn.player.cheats & CF_GODMODE2 || playpawn.player.cheats & CF_GODMODE || playpawn.CountInv("InvulnerabilitySpell") || playpawn.CountInv("IsInvulnerable") || playpawn.CountInv("InGameMenu") || CallACS("MenuVarCheckDECORATE",0) > 0))
					{
						newdam2 = CallACS("StatCheck",1) * (frandom(0.95,1.05) * random(1,4));
					}
					else
					{
						newdam2 = 0;
					}
				}
				else
				if (DVDSActor)
				{
					if (!(DVDSActor.bINVULNERABLE || CallACS("MenuVarCheckDECORATE",0) > 0))
					{
						newdam2 = DVDSActor.user_MaxHP * (frandom(0.95,1.05) * random(1,4));
						if (DVDSActor.bBOSS) newdam2 *= 0.25;
					}
					else
					{
						newdam2 = 0;
					}
				}
				else
				{
					newdam2 = 10001;
				}

				int newdam = targ.DamageMobj (self, self, newdam2, 'Crush');
				targ.TraceBleed (newdam > 0 ? newdam : newdam2, null);
				args[1] = 1;	// Mark thrust thing as bloody
			}
		}
	}
}

class BatNew : AetheriusBaseZSC replaces Bat
{
	Default
	{
		Speed 5;
		Radius 3;
		Height 3;
		+NOBLOCKMAP +NOGRAVITY +MISSILE
		+NOTELEPORT +CANPASS
	}

	States
	{
		Spawn:
			ABAT ABC 2 A_BatMove;
			Loop;
		Death:
			ABAT A 2;
			Stop;
	}
	
	void A_BatMove()
	{
		if (special2 < 0)
		{
			SetStateLabel ("Death");
		}
		special2 -= 2;		// Called every 2 tics

		double newangle;
		if (random[BatMove]() < 128)
		{
			newangle = Angle + args[4];
		}
		else
		{
			newangle = Angle - args[4];
		}

		// Adjust velocity vector to new direction
		VelFromAngle(Speed, newangle);

		if (random[BatMove]() < 15)
		{
			A_StartSound ("BatScream", CHAN_VOICE, CHANF_DEFAULT, 1, ATTN_IDLE);
		}

		// Handle Z movement
		if (target)
		{
			SetZ(target.pos.Z + 2 * BobSin(args[0]));
			args[0] = (args[0] + 3) & 63;	
		}
	}
}

class PoisonCloudDVDS : AetheriusBaseZSC replaces PoisonCloud
{
	Default
	{
		Tag "Poisonous Mushroom Bog";
		Radius 20;
		Height 30;
		Mass 0x7fffffff;
		+NOBLOCKMAP +NOGRAVITY +DROPOFF
		+NODAMAGETHRUST
		+DONTSPLASH +FOILINVUL +CANBLAST +BLOODLESSIMPACT +BLOCKEDBYSOLIDACTORS +FORCEZERORADIUSDMG +OLDRADIUSDMG
		RenderStyle "Translucent";
		Alpha 0.6;
		DeathSound "PoisonShroomDeath";
		DamageType "PoisonCloud";
	}

	States
	{
		Spawn:
			PSBG D 1;
			PSBG D 1 A_Scream;
			PSBG DEEEFFFGGGHHHII 2 A_PoisonBagDamage;
			PSBG I 2 A_PoisonBagCheck;
			PSBG I 1 A_PoisonBagCheck;
			Goto Spawn + 3;
		Death:
			PSBG HG 7;
			PSBG FD 6;
			Stop;
	}
	
	//===========================================================================
	//
	// 
	//
	//===========================================================================

	override void BeginPlay ()
	{
		Vel.X = MinVel; // missile objects must move to impact other objects
		special1 = random[PoisonCloud](24, 31);
		special2 = 0;
	}
	
	//===========================================================================
	//
	// 
	//
	//===========================================================================

	override int DoSpecialDamage (Actor victim, int damage, Name damagetype)
	{
		if (victim.player)
		{
			AetheriusPlayerPawn playpawn;
			playpawn = AetheriusPlayerPawn(victim);
			bool mate = (target != null && victim.player != target.player && victim.IsTeammate (target));
			bool dopoison;
			
			if (!mate)
			{
				dopoison = victim.player.poisoncount < 4;
			}
			else
			{
				dopoison = victim.player.poisoncount < (int)(4. * level.teamdamage);
			}

			if (dopoison)
			{
				damage = random[PoisonCloud](15, 30);
				if (mate)
				{
					damage = (int)(damage * level.teamdamage);
				}
				// Handle passive damage modifiers (e.g. PowerProtection)
				damage = victim.GetModifiedDamage(damagetype, damage, true);
				// Modify with damage factors
				damage = victim.ApplyDamageFactor(damagetype, damage);
				if (damage > 0)
				{
					victim.player.PoisonDamage (self, random[PoisonCloud](15, 30), false); // Don't play painsound

					// If successful, play the poison sound.
					if (victim.player.PoisonPlayer (self, self.target, 50)) 
					{
						if (CallACS("CheckCharacterClass") == 2) playpawn.A_APPPain();
						else if (CallACS("CheckCharacterClass") == 1) victim.A_Pain();
						else if (CallACS("CheckCharacterClass") == 0) victim.A_Pain();
						else victim.A_StartSound ("*poison", CHAN_VOICE);
					}
				}
			}	
			return -1;
		}
		else if (!victim.bIsMonster)
		{ // only damage monsters/players with the poison cloud
			return -1;
		}
		return damage;
	}
	
	//===========================================================================
	//
	// A_PoisonBagCheck
	//
	//===========================================================================

	void A_PoisonBagCheck()
	{
		if (--special1 <= 0)
		{
			SetStateLabel("Death");
		}
	}

	//===========================================================================
	//
	// A_PoisonBagDamage
	//
	//===========================================================================

	void A_PoisonBagDamage()
	{
		A_Explode(4, 40);
		AddZ(BobSin(special2) / 16);
		special2 = (special2 + 1) & 63;
	}
}

// ITEMS
class ArtiTorchNew : RandomSpawner2 replaces ArtiTorch
{
	default
	{
		+DONTGIB;
		DropItem "RandomMagicSpawner", 255;
	}
}

class ArtiPorkNew : AetheriusBaseCustomInventoryZSC replaces ArtiPork
{
	default
	{
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.KEEPDEPLETED;
		Inventory.Icon "ARTIPORK";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTIEGG2"; // "PORKALATOR"
		Inventory.DefMaxAmount;
		Tag "Porkulator: Transforms up to eleven enemies into pigs.";
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
	}
	
	States
	{
		Spawn:
			PORK ABCDEFGH 5;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_SpreadAuraFireProjectile("PorkFX", -18.75, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", -15.0, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", -11.25, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", -7.5, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", -3.75, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", 0.0, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", 3.75, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", 7.5, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", 11.25, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", 15.0, 0,"", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("PorkFX", 18.75, 0,"", 0, 0, 1, 0);
			}
			Stop;
	}
}
  
class ArtiDarkServantNew : ArtiDarkServant replaces ArtiDarkServant
{
	default
	{
		+DONTGIB;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Dark Servant: Summons a friendly Maulotaur to fight for you.";
	}
}
  
class ArtiTeleportOtherNew : ArtiTeleportOther replaces ArtiTeleportOther
{
	default
	{
		+DONTGIB;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Banishment Device: Teleports away the first creature it hits.";
	}
}
  
class ArtiTeleportNew : ArtiTeleport replaces ArtiTeleport
{
	default
	{
		+DONTGIB;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Chaos Device: Teleports you away to near a level's entry point.";
	}
}
  
class ArtiSpeedBootsNew : AetheriusCustomInventory replaces ArtiSpeedBoots
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.Icon "ARTISPED";
		Inventory.PickupMessage "$TXT_ARTISPEED"; // "BOOTS OF SPEED"
		Tag "$TAG_ARTISPEED";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx("MercuryBandana",0,0,0,0,0,0,0,0,0);
			TNT1 A 0 A_SpawnItemEx("MercuryBandana",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,192);
			TNT1 A 0 A_SpawnItemEx("MercuryBandana",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
			TNT1 A 0 A_SpawnItemEx("MercuryBandana",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
			TNT1 A 0 A_FadeOut(1.0);
			Loop;
	}
}
class ArtiFlyNew : AetheriusCustomInventory replaces ArtiFly
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTISOAR";
		Inventory.PickupMessage "$TXT_ARTIFLY"; // "WINGS OF WRATH"
		Tag "$TAG_ARTIFLY";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx("SeedOfSkillForced",0,0,0,0,0,0,0,0,0);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,0);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,0);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,0,0,0,0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,184);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("Fygg",0,0,0,0,0,0,0,0,255);
			TNT1 A 0 A_SpawnItemEx("Fygg",0,0,0,0,0,0,0,0,255);
			TNT1 A 0 A_SpawnItemEx("Fygg",0,0,0,0,0,0,0,0,255);
			TNT1 A 0 A_FadeOut(1.0);
			Loop;
	}
}

class ArtiInvulnerability2New : AetheriusUsableInventory replaces ArtiInvulnerability2
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIDEFN";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY2"; // "ICON OF THE DEFENDER"
		Tag "Icon of the Defender: Gives 45 Seconds of Invulnerability";
	}
	
	States
	{
		Spawn:
			DEFN ABCD 3;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-5);
			fail;
	}
}

class ArtiHealingRadiusNew : AetheriusUsableInventory replaces ArtiHealingRadius
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.Icon "ARTIHRAD";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTIHEALINGRADIUS"; // "MYSTIC AMBIT INCANT"
		Tag "Mystic Ambit Incant: Recovers 62.5% HP/MP (you/allies in moderate range) and 125% Stamina (you only) up to 200%/500% of Maximums";
	}
	
	States
	{
		Spawn:
			HRAD ABCDEFGHIJKLMNOP 4 Bright;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-4);
			fail;
	}
}
class FlechetteReplacer : RandomSpawner2 replaces ArtiPoisonBag
{
	default
	{
		+DONTGIB;
		DropItem "CrystalVial", 96, 18;
		DropItem "ArtiHealth", 96, 18;
		DropItem "MedicinalHerb", 96, 14;
		DropItem "ArtiSuperHealth", 96, 14;
		DropItem "StrongMedicine", 96, 10;
		DropItem "SpecialMedicine", 96, 10;
		DropItem "SapphireWandNew", 96, 10;
		DropItem "Experiessence", 96, 5;
		DropItem "RockBombShard", 96, 5;
		DropItem "PaxaPunch", 96, 5;
		DropItem "MercuryBandana", 96, 5;
		DropItem "ArtiBoostMana", 96, 3;
		DropItem "LesserVimstone", 96, 3;
		DropItem "ArtiHealingRadiusNew", 96, 3;
		DropItem "MiraclePotion", 96, 2;
		DropItem "YggdrasilDew", 96, 1;
		DropItem "GreaterVimstone", 96, 1;
		DropItem "ArtiBoostArmorNew", 96, 1;
	}
}
class ArtiPoisonBag1New : FlechetteReplacer replaces ArtiPoisonBag1 { }
class ArtiPoisonBag2New : FlechetteReplacer replaces ArtiPoisonBag2 { }
class ArtiPoisonBag3New : FlechetteReplacer replaces ArtiPoisonBag3 { }
class ArtiBlastRadiusNew : FlechetteReplacer replaces ArtiBlastRadius 
{ 
	default
	{
		+DONTGIB;
		DropItem "CrystalVial", 96, 18;
		DropItem "ArtiHealth", 96, 18;
		DropItem "MedicinalHerb", 96, 14;
		DropItem "ArtiSuperHealth", 96, 14;
		DropItem "StrongMedicine", 96, 10;
		DropItem "SpecialMedicine", 96, 10;
		DropItem "SapphireWandNew", 96, 10;
		DropItem "Experiessence", 96, 5;
		DropItem "RockBombShard", 96, 5;
		DropItem "PaxaPunch", 96, 5;
		DropItem "MercuryBandana", 96, 5;
		DropItem "ArtiBoostMana", 96, 3;
		DropItem "LesserVimstone", 96, 3;
		DropItem "ArtiHealingRadiusNew", 96, 3;
		DropItem "MiraclePotion", 96, 2;
		DropItem "YggdrasilDew", 96, 1;
		DropItem "GreaterVimstone", 96, 1;
		DropItem "ArtiBoostArmorNew", 96, 1;
	}
}

//**********************
//**Armor Replacements**
//**********************
class ArtiBoostArmorNew : RandomSpawner2 replaces ArtiBoostArmor
{
	default
	{
		+DONTGIB;
		DropItem "FloraRandomArmorAlwaysDrop", 24, 96;
		DropItem "SauronHelmet", 64, 2;
		DropItem "SauronGauntlets", 64, 2;
	}
}
class PlatinumHelmNew : RandomSpawner2 replaces PlatinumHelm
{
	default
	{
		+DONTGIB;
		DropItem "FloraRandomArmorAlwaysDrop", 24, 96;
		DropItem "SauronHelmet", 255, 2;
		DropItem "SauronGauntlets", 255, 2;
	}
}
class AmuletOfWardingNew : RandomSpawner2 replaces AmuletOfWarding
{
	default
	{
		+DONTGIB;
		DropItem "FloraRandomArmorAlwaysDrop", 24, 96;
		DropItem "SauronHelmet", 255, 2;
		DropItem "SauronGauntlets", 255, 2;
	}
}
class FalconShieldNew : RandomSpawner2 replaces FalconShield
{
	default
	{
		+DONTGIB;
		DropItem "FloraRandomArmorAlwaysDrop", 24, 96;
		DropItem "SauronHelmet", 255, 2;
		DropItem "SauronGauntlets", 255, 2;
	}
}
class MeshArmorNew : RandomSpawner2 replaces MeshArmor
{
	default
	{
		+DONTGIB;
		DropItem "FloraRandomArmorAlwaysDrop", 24, 96;
		DropItem "SauronHelmet", 255, 2;
		DropItem "SauronGauntlets", 255, 2;
	}
}

//***********************
//**Weapon Replacements**
//***********************
// Slot 4 Hellcore [replaces 2nd weapons in Hexen]
class FWeapAxeNew : RandomSpawner2 replaces FWeapAxe
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "SapphireWandNew";
		DropItem "DiarisLongbow";
		DropItem "ImpSoulCI";
		DropItem "DarkImpSoulCI";
		DropItem "CacodemonSoulCI";
		DropItem "CacolanternSoulCI";
		DropItem "AbaddonSoulCI";
		DropItem "KnightSoulCI";
	}
}
class CWeapStaffNew : RandomSpawner2 replaces CWeapStaff
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "SapphireWandNew";
		DropItem "DiarisLongbow";
		DropItem "ImpSoulCI";
		DropItem "DarkImpSoulCI";
		DropItem "CacodemonSoulCI";
		DropItem "CacolanternSoulCI";
		DropItem "AbaddonSoulCI";
		DropItem "KnightSoulCI";
	}
}
class MWeapFrostNew : RandomSpawner2 replaces MWeapFrost
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "SapphireWandNew";
		DropItem "DiarisLongbow";
		DropItem "ImpSoulCI";
		DropItem "DarkImpSoulCI";
		DropItem "CacodemonSoulCI";
		DropItem "CacolanternSoulCI";
		DropItem "AbaddonSoulCI";
		DropItem "KnightSoulCI";
	}
}

// Slot 5 Hellcore [replaces 3rd weapons in Hexen]
class FWeapHammerNew : RandomSpawner2 replaces FWeapHammer
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "SapphireWandNew";
		DropItem "DiarisLongbow";
		DropItem "IncarnateSoulCI";
		DropItem "BaronSoulCI";
		DropItem "BelphegorSoulCI";
		DropItem "BruiserSoulCI";
		DropItem "ArchonSoulCI";
		DropItem "PyroDemonSoulCI";
	}
}
class CWeapFlameNew : RandomSpawner2 replaces CWeapFlame
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "SapphireWandNew";
		DropItem "DiarisLongbow";
		DropItem "IncarnateSoulCI";
		DropItem "BaronSoulCI";
		DropItem "BelphegorSoulCI";
		DropItem "BruiserSoulCI";
		DropItem "ArchonSoulCI";
		DropItem "PyroDemonSoulCI";
	}
}
class MWeapLightningNew : RandomSpawner2 replaces MWeapLightning
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "SapphireWandNew";
		DropItem "DiarisLongbow";
		DropItem "IncarnateSoulCI";
		DropItem "BaronSoulCI";
		DropItem "BelphegorSoulCI";
		DropItem "BruiserSoulCI";
		DropItem "ArchonSoulCI";
		DropItem "PyroDemonSoulCI";
	}
}

class FWeaponPiece1New : RandomSpawner2 replaces FWeaponPiece1
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class FWeaponPiece2New : RandomSpawner2 replaces FWeaponPiece2
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class FWeaponPiece3New : RandomSpawner2 replaces FWeaponPiece3
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class FWeapQuietusNew : RandomSpawner2 replaces FWeapQuietus
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class CWeaponPiece1New : RandomSpawner2 replaces CWeaponPiece1
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class CWeaponPiece2New : RandomSpawner2 replaces CWeaponPiece2
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class CWeaponPiece3New : RandomSpawner2 replaces CWeaponPiece3
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class CWeapWraithvergeNew : RandomSpawner2 replaces CWeapWraithverge
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class MWeaponPiece1New : RandomSpawner2 replaces MWeaponPiece1
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class MWeaponPiece2New : RandomSpawner2 replaces MWeaponPiece2
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class MWeaponPiece3New : RandomSpawner2 replaces MWeaponPiece3
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}
class MWeapBloodscourgeNew : RandomSpawner2 replaces MWeapBloodscourge
{
	default
	{
		+DONTGIB;
		DropItem "PoisonNeedle";
		DropItem "DiarisLongbow";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
		DropItem "HElementalSoulCI";
		DropItem "HOverlordSoulCI";
	}
}

//*******************
//**Mana Conversion**
//*******************
class Mana1New : Ammo replaces Mana1
{
	default
	{
		+DONTGIB;
		Inventory.Amount 15;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 15;
		Ammo.BackpackMaxAmount 200;
		Radius 8;
		Height 8;
		+FLOATBOB;
		+NOGRAVITY;
		Inventory.Icon "MAN1I0";
		Inventory.PickupMessage "$TXT_MANA_1";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("DoomSpellMana",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,156);
				A_SpawnItemEx("DoomSpellMana",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,231);
				A_SpawnItemEx("DoomSpellMana",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,250);
				A_SpawnItemEx("DiarisArrow",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,240);
				A_SpawnItemEx("DiarisArrow",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,240);
				A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,254);
				A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,254);
			}
			Stop;
	}
}

class Mana2New : Ammo replaces Mana2
{
	default
	{
		+DONTGIB;
		Inventory.Amount 15;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 15;
		Ammo.BackpackMaxAmount 200;
		Radius 8;
		Height 8;
		+FLOATBOB;
		+NOGRAVITY;
		Inventory.Icon "MAN1I0";
		Inventory.PickupMessage "$TXT_MANA_1";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("DoomSpellMana",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,156);
				A_SpawnItemEx("DoomSpellMana",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,231);
				A_SpawnItemEx("DoomSpellMana",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,250);
				A_SpawnItemEx("DiarisArrow",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,240);
				A_SpawnItemEx("DiarisArrow",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,240);
				A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,254);
				A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,254);
			}
			Stop;
	}
}

class Mana3New : Ammo replaces Mana3
{
	default
	{
		+DONTGIB;
		Inventory.Amount 15;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 15;
		Ammo.BackpackMaxAmount 200;
		Radius 8;
		Height 8;
		+FLOATBOB;
		+NOGRAVITY;
		Inventory.Icon "MAN1I0";
		Inventory.PickupMessage "$TXT_MANA_1";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("DoomSpellMana2",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,156);
				A_SpawnItemEx("DoomSpellMana2",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,231);
				A_SpawnItemEx("DoomSpellMana2",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,249);
				A_SpawnItemEx("DiarisArrow",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,224);
				A_SpawnItemEx("DiarisArrow",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,224);
				A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,252);
				A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,252);
			}
			Stop;
	}
}

//****************
//**Health Items**
//****************
class CrystalVialNew : AetheriusCustomInventory replaces CrystalVial
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		Inventory.Amount 10;
		Inventory.PickupMessage "$TXT_ITEMHEALTH"; // "CRYSTAL VIAL"
		Inventory.PickupSound "pickup/qpotion";
	}
	
	States
	{
			VimstoneSpawn:
				TNT1 A 0 A_Jump(4,"VimstoneSpawn2");
				goto Spawn+2;
			VimstoneSpawn2:
				TNT1 A 0 A_Jump(64,3);
				TNT1 A 0 A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_Jump(256,2);
				TNT1 A 0 A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,0,0,0);
				TNT1 A 0;
				goto Spawn+2;

			Herb1:
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			Herb2:
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			Herb3:
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			TurnIntoHerb:
				TNT1 A 0 A_Jump(144,"Herb1");
				TNT1 A 0 A_Jump(112,"Herb2");
				goto Herb3;

		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_Jump(16,"VimstoneSpawn");   
			TNT1 A 0 A_Jump(36,"TurnIntoHerb");
		Idle:
			PTN1 ABC 3 bright;
			loop;
		Success:
			TNT1 A 0 A_PickupMedicalItem(0,0);
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(0)) { return resolvestate("Success"); } return resolvestate(null); 
			}
			Fail;
  }
}

class Pottery1New : Pottery1 replaces Pottery1
{
	States
	{
		Death:
			POT1 A 0 A_SpawnItemEx("RandomHerbSpawner",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,192,tid);
			POT1 A 0 A_SpawnItemEx("RandomMagicSpawner",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,222,tid);
			POT1 A 0 A_SpawnItemEx("RandomSeedDropAlways",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,252,tid);
			POT1 A 0 A_PotteryExplode();
			Stop;
	}
}

class Pottery2New : Pottery2 replaces Pottery2
{
	States
	{
		Death:
			POT1 A 0 A_SpawnItemEx("RandomHerbSpawner",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,208,tid);
			POT1 A 0 A_SpawnItemEx("RandomMagicSpawner",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,231,tid);
			POT1 A 0 A_SpawnItemEx("RandomSeedDropAlways",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,253,tid);
			POT1 A 0 A_PotteryExplode();
			Stop;
	}
}

class Pottery3New : Pottery3 replaces Pottery3
{
	States
	{
		Death:
			POT1 A 0 A_SpawnItemEx("RandomHerbSpawner",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,224,tid);
			POT1 A 0 A_SpawnItemEx("RandomMagicSpawner",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,239,tid);
			POT1 A 0 A_SpawnItemEx("RandomSeedDropAlways",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0,0,SXF_NOCHECKPOSITION,254,tid);
			POT1 A 0 A_PotteryExplode();
			Stop;
	}
}

class DartNew : AetheriusEffectProjectile replaces Dart
{
	default
	{
		Tag "Poison Dart";
		Speed 6;
		Radius 8;
		Height 4;
		Damage 2;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
	}
	
	States
	{
		Spawn:
			DART A -1;
			Stop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(5);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			DART A 1;
			Stop;
	}
}

class PoisonDartNew : DartNew replaces PoisonDart
{
	default
	{
		Tag "Strong Poison Dart";
		PoisonDamage 20;
		DamageFunction ((2 * random(1,8)) + random(1,8));
	}
	
	States
	{
		Spawn:
			DART A -1;
			Stop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(7);
					if (random(1,user_ailmentmaxchance) <= 5 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(105,175)); // Poison for 3-5 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			DART A 1;
			Stop;
	}
}

class IceShardNew : AetheriusEffectProjectile replaces IceShard
{
	default
	{
		Tag "Ice Shard";
		Speed 25;
		Radius 13;
		Height 8;
		Damage 1;
		DamageType "Ice";
		Projectile;
		DeathSound "MageShardsExplode";
		Obituary "$OB_MPMWEAPFROST";
	}
	
	States
	{
		Spawn:
			SHRD ABC 3 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(6);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(70,105)); // Deceleratle for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			SHEX ABCDE 5 Bright;
			Stop;
	}
}
class ZPoisonCloudNew : PoisonCloud
{
	default
	{
		Tag "Poison Cloud";
		reactiontime 24;
		Radius 20;
		Height 30;
		Mass 0x7fffffff;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DROPOFF;
		+NODAMAGETHRUST;
		+DONTSPLASH;
		+FOILINVUL;
		+CANBLAST;
		+BLOODLESSIMPACT;
		+BLOCKEDBYSOLIDACTORS;
		RenderStyle "Translucent";
		Alpha 0.6;
		DeathSound "PoisonShroomDeath";
		DamageType "PoisonElemental";
	}
	
	States
	{
		Spawn:
			PSBG D 1;
			PSBG D 1 A_Scream();
			PSBG DEEEFFFGGGHHHII 2 A_Explode(4*random(1,8),40,XF_HURTSOURCE,0,10); // A_PoisonBagDamage();
			PSBG I 2 A_CountDown();
			PSBG I 1 A_CountDown();
			Goto Spawn+3;
		Death:
			PSBG HG 7;
			PSBG FD 6;
			Stop;
	}
}
class ZPoisonShroomNew : ZPoisonShroom replaces ZPoisonShroom
{
	default
	{
		Tag "Poison Shroom";
		Radius 6;
		Height 20;
		PainChance 255;
		Health 30;
		Mass 0x7fffffff;
		+NODAMAGETHRUST;
		+SHOOTABLE;
		+SOLID;
		+NOBLOOD;
		+NOICEDEATH;
		-NOBLOCKMAP;
		-NOGRAVITY;
		PainSound "PoisonShroomPain";
		DeathSound "PoisonShroomDeath";
		DamageType "PoisonElemental";
	}
	
	States
	{
		Spawn:
			SHRM A 5 A_PoisonShroom();
			Goto Pain+1;
		Pain:
			SHRM A 6;
			SHRM B 8 A_Pain();
			Goto Spawn;
		Death:
			SHRM CD 5;
			SHRM E 5 A_SpawnItemEx("PoisonCloudDVDS", 0, 0, 28, 0, 0, 0, 0, SXF_TRANSFERPOINTERS); // A_PoisonBagInit();
			SHRM F -1;
			Stop;
	}
}

// Porkulator
class PorkFXNew : PorkFX replaces PorkFX
{
	default
	{
		Tag "Porkulator Shot";
		Radius 8;
		Height 8;
		Speed 18;
		MorphProjectile.PlayerClass "PigPlayer";
		MorphProjectile.MonsterClass "Pig";
		MorphProjectile.MorphStyle MRF_UNDOBYTOMEOFPOWER|MRF_UNDOBYCHAOSDEVICE;
	}
	
	States
	{
		Spawn:
			PRKM ABCDE 4;
			Loop;
		Death:
			FHFX IJKL 3 Bright;
			Stop;
	}
}

// Ettin Commander
class ThrownMace : AetheriusProjectileZSC
{
	default
	{
		Tag "Thrown Mace";
		DamageFunction ((Random(2,8) * 4));
		Speed 15;
		FastSpeed 20;
		Radius 6;
		Height 8;
		PROJECTILE;
		+NOTELEPORT;
		+NODAMAGETHRUST;
		+HEXENBOUNCE;
		-NOGRAVITY;
		+WINDTHRUST;
		+THRUGHOST;
		BounceCount 4;
		BounceFactor 1;
		WallBounceFactor 1;
		DeathSound "Fireball";
	}
	
	States
	{
		Spawn:
			AEMC ABCDEFG 3
			{
			}
			AEMC H 3
			{
				A_StartSound("FighterHammerContinuous");
			}
			Loop;
		Death:
			CFCF Q 0 Bright A_SetTranslucent(1,1);
			CFCF Q 1 Bright A_NoGravity();
			CFCF QQQ 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF RRR 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF SSSS 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF T 3 Bright;
			CFCF U 4 Bright;
			CFCF W 3 Bright;
			CFCF X 4 Bright;
			CFCF Z 3 Bright;
			Stop;
	}
}
class ThrownMaceCrisis : ThrownMace
{
	default
	{
		DamageFunction (((Random(2,8) * 4)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			AEMC ABCDEFG 3
			{
				A_GenerateCrisisParticle();
			}
			AEMC H 3
			{
				A_GenerateCrisisParticle();
				A_StartSound("FighterHammerContinuous");
			}
			Loop;
		Death:
			CFCF Q 0 Bright A_SetTranslucent(1,1);
			CFCF Q 1 Bright A_NoGravity();
			CFCF QQQ 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF RRR 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF SSSS 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF T 3 Bright;
			CFCF U 4 Bright;
			CFCF W 3 Bright;
			CFCF X 4 Bright;
			CFCF Z 3 Bright;
			Stop;
	}
}

// Reiver and Bormereth
class DBigEttinMace : AetheriusProjectileZSC
{
	default
	{
		Tag "Thrown Mace";
		+DOOMBOUNCE;
		Speed 3;
	}
	
	States
	{
		Spawn:
			BORB MNOPQR 5;
			BORB S -1;
			Stop;
	}
}

class WraithFX1New : AetheriusProjectileZSC replaces WraithFX1
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 14;
		Radius 10;
		Height 6;
		Mass 5;
		Projectile;
		+FLOORCLIP;
		SeeSound "WraithMissileFire";
		DeathSound "WraithMissileExplode";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
			}
			WRBL B 3 Bright 
			{
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}
class WraithFX1Crisis : WraithFX1New
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			WRBL B 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}

class BormerethFX1 : WraithFX1New
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (8 * random(1,8));
		DeathSound "bormereth/missilesimpledeath";
		Scale 0.85;
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
			}
			WRBL B 3 Bright 
			{
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}
class BormerethFX1Crisis : BormerethFX1
{
	default
	{
		DamageFunction ((8 * random(1,8)) * CrisisMultiplier);
		DeathSound "bormereth/missilesimpledeath";
		Scale 0.85;
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			WRBL B 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}

class PossEttFakeFireBall : WraithFX1New
{
	default
	{
		+NOCLIP;
		DamageFunction (0);
		Speed 0;
		Scale 1.1;
	}
	
	States
	{
		Spawn:
			TNT1 AA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 1 Bright A_SetTranslucent(0.1);
			WRBL A 1 Bright A_SetTranslucent(0.15);
			WRBL A 1 Bright A_SetTranslucent(0.2);
			TNT1 AAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 1 Bright A_SetTranslucent(0.25);
			WRBL B 1 Bright A_SetTranslucent(0.3);
			WRBL B 1 Bright A_SetTranslucent(0.35);
			TNT1 AAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 1 Bright A_SetTranslucent(0.4);
			WRBL C 1 Bright A_SetTranslucent(0.45);
			WRBL C 1 Bright A_SetTranslucent(0.5);
			TNT1 AAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 1 Bright A_SetTranslucent(0.55);
			WRBL A 1 Bright A_SetTranslucent(0.6);
			WRBL A 1 Bright A_SetTranslucent(0.65);
			TNT1 AAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 1 Bright A_SetTranslucent(0.7);
			WRBL B 1 Bright A_SetTranslucent(0.75);
			WRBL B 1 Bright A_SetTranslucent(0.8);
			TNT1 AAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 1 Bright A_SetTranslucent(0.85);
			WRBL C 1 Bright A_SetTranslucent(0.9);
			WRBL C 1 Bright A_SetTranslucent(0.95);
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 3 Bright;
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 3 Bright;
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 3 Bright;
			Stop;
	}
}

class PossEttFireBall : WraithFX1New
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (15 * random(1,8));
		Scale 1.1;
		Speed 20;
		+SEEKERMISSILE;
		SeeSound "bormereth/missile2fired";
		DeathSound "bormereth/missile2death";
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			WRBL A 1 Bright 
			{
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL AA 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL B 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL BB 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL C 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL CC 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			TNT1 A 0 A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			TNT1 A 0 A_SpawnProjectile("PEFBExplo",0,0,0);
			TNT1 A 0 A_Explode(80,80);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX23",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			WRBL DEF 3 Bright;
			WRBL GHI 3;
			Stop;
	}
}
class PossEttFireBallCrisis : PossEttFireBall
{
	default
	{
		DamageFunction ((15 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			WRBL A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL AA 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL B 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL BB 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL C 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL CC 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			TNT1 A 0 A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			TNT1 A 0 A_SpawnProjectile("PEFBExplo",0,0,0);
			TNT1 A 0 A_Explode(80,80);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX23",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			WRBL DEF 3 Bright;
			WRBL GHI 3;
			Stop;
	}
}	

class WraithFX22 : AetheriusProjectileZSC
{
	default
	{
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			WRBL KLKL 2 Bright;
			TNT1 A 0 A_Jump(128,1);
			Loop;
			WRBL MNOP 2 Bright;
			WRBL P 1 Bright A_FadeOut();
			Wait;
		Death:
			TNT1 A 1;
			Stop;
	}
}

class WraithFX23 : AetheriusProjectileZSC
{
	default
	{
		Projectile;
		Damage 0;
		Speed 0;
		Radius 1;
		Height 1;
		+RIPPER;
		+BLOODLESSIMPACT;
	}
	
	States
	{
		Spawn:
			WRBL KLKL 2 Bright;
			TNT1 A 0 A_Jump(128,1);
			Loop;
			WRBL MNOP 2 Bright;
			WRBL P 1 Bright A_FadeOut();
			Wait;
		Death:
			TNT1 A 1;
			Stop;
	}
}

class PEFBExplo : AetheriusProjectileZSC
{
	default
	{
		Projectile;
		Speed 0;
		Damage 0;
		+NOCLIP;
		RenderStyle "Add";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			FX58 ABCDEFGHIJKLMNOPQ 1 Bright;
			Stop;
	}
}

class PEFBTrail : AetheriusProjectileZSC
{
	default
	{
		Projectile;
		Speed 0;
		Damage 0;
		+NOCLIP;
		RenderStyle "Add";
		Scale 0.4;
		Alpha 0.45;
	}
	
	States
	{
		Spawn:
			FX50 ABCDEFG 1;
			FX50 HIJKLMNOPQR 1;
			Stop;
	}
}

//-------------------------------------------------------
class FirePillarStarter : AetheriusProjectileZSC
{
	default
	{
		Tag "Fire Pillar";
		Projectile;
		Speed 28;
		DamageFunction (0);
		+NOTARGET;
		+RIPPER;
		+BLOODLESSIMPACT;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			PLAY A 3;
			Goto Death;
		Death:
			PLAY A 3 A_SpawnProjectile("FirePillarBase",-20,0,0);
			Stop;
	}
}
class FirePillarStarterCrisis : FirePillarStarter
{
	default
	{
		Tag "Fire Pillar";
	}
	
	States
	{
		Spawn:
			PLAY A 3;
			Goto Death;
		Death:
			PLAY A 3 A_SpawnProjectile("FirePillarBaseCrisis",-20,0,0);
			Stop;
	}
}

class FirePillarBase : AetheriusProjectileZSC
{
	int user_times;
	default
	{
		Tag "Fire Pillar";
		Projectile;
		Speed 0;
		+NOCLIP;
		Damage 0;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			PLAY A 2 
			{
				A_SpawnProjectile("FirePillarShot",5,0,0);
			}
			PLAY A 2
			{
				A_SpawnProjectile("FirePillarShot2",5,0,0);
			}
			TNT1 A 0
			{
				user_times++;
				if (user_times >= 5) { return resolvestate("Expire"); }
				return resolvestate(null);
			}
			Loop;
		Expire:
			PLAY A 2 A_SpawnProjectile("FirePillarShot",5,0,0);
			Stop;
	}
}
class FirePillarBaseCrisis : FirePillarBase
{
	default
	{
		Tag "Fire Pillar";
	}
	
	States
	{
		Spawn: // 5
			PLAY A 2 
			{
				A_SpawnProjectile("FirePillarShotCrisis",5,0,0);
			}
			PLAY A 2
			{
				A_SpawnProjectile("FirePillarShot2Crisis",5,0,0);
			}
			TNT1 A 0
			{
				user_times++;
				if (user_times >= 5) { return resolvestate("Expire"); }
				return resolvestate(null);
			}
			Loop;
		Expire:
			PLAY A 2 A_SpawnProjectile("FirePillarShotCrisis",5,0,0);
			Stop;
	}
}

class FirePillarShot : AetheriusProjectileZSC
{
	default
	{
		Tag "Fire Pillar";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Projectile;
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		Speed 0;
		Radius 4;
		Height 3;
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			INFE ABCD 1 Bright 
			{
				ThrustThingZ(0,7,0,1);
			}
			INFE EFGHIJKLMNOPQRST 1 Bright 
			{
			}
			Stop;	
	}
}	
class FirePillarShotCrisis : FirePillarShot
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
		DamageType "Fire";
		Projectile;
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		Speed 0;
		Radius 4;
		Height 3;
		Scale 0.5;
		RenderStyle "Add";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			INFE ABCD 1 Bright 
			{
				A_GenerateCrisisParticle();
				ThrustThingZ(0,7,0,1);
			}
			INFE EFGHIJKLMNOPQRST 1 Bright 
			{
				A_GenerateCrisisParticle();
			}
			Stop;
	}
}	

class FirePillarShot2 : FirePillarShot	//this one wont have light definition
{
	default
	{
		Tag "Fire Pillar";
		DamageFunction (3 * random(1,8));
		Alpha 0.6;
	}
}
class FirePillarShot2Crisis : FirePillarShotCrisis
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
	}
}

// Slaughtaur
class CentaurFXNew : AetheriusProjectileZSC replaces CentaurFX
{
	default
	{
		Tag "Shield Blast";
		Speed 20;
		DamageFunction (4 * random(1,8));
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "CentaurLeaderAttack";
		DeathSound "CentaurMissileExplode";
	}
	
	States
	{
		Spawn:
			CTFX A -1 Bright;
			Loop;
		Death:
			CTFX B 4 Bright;
			CTFX C 3 Bright;
			CTFX D 4 Bright;
			CTFX E 3 Bright;
			CTFX F 2 Bright;
			Stop;
	}
}
class CentaurFXCrisis : CentaurFXNew
{
	default
	{
		DamageFunction ((4 * random(1,8)) * CrisisMultiplier);
		Speed 20;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "CentaurLeaderAttack";
		DeathSound "CentaurMissileExplode";
	}
	
	States
	{
		Spawn:
			CTFX A 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			CTFX B 4 Bright;
			CTFX C 3 Bright;
			CTFX D 4 Bright;
			CTFX E 3 Bright;
			CTFX F 2 Bright;
			Stop;
	}
}

// Afrits
class FireDemonMissileNew : AetheriusProjectileZSC replaces FireDemonMissile
{
	default
	{
		Tag "Fire Missile";
		Health 1000;
		ReactionTime 8;
		Speed 10;
		Radius 10;
		Height 6;
		Mass 5;
		DamageFunction (1 * random(1,6)); // 1
		DamageType "Fire";
		Projectile;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDMB A 5 Bright;
			Loop;
		Death:
			FDMB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonMissileCrisis : FireDemonMissileNew
{
	default
	{
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FDMB A 1 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			FDMB BCDE 5 Bright;
			Stop;
	}
}

class FireDemonLeaderMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction (random(1,2) * random(1,6));
		DamageType "Fire";
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		Projectile;
		+FLOORCLIP;
		+SEEKERMISSILE;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDLB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonLeaderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDLB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonLeaderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDLB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonLeaderMissileCrisis : FireDemonLeaderMissile
{
	default
	{
		DamageFunction ((random(1,2) * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FDLB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonLeaderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDLB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonLeaderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDLB BCDE 5 Bright;
			Stop;
	}
}

class FireDemonLeaderTrail1 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FLSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FLSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonLeaderTrail2 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FLFX ABCDE 3 BRIGHT;
			Stop;
	}
}

class FireDemonCommanderMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction ((random(1,2) * random(1,6)) + random(3,9));
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDCB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonCommanderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDCB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonCommanderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDCB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonCommanderMissileCrisis : FireDemonCommanderMissile
{
	default
	{
		DamageFunction (((random(1,2) * random(1,8)) + random(4,12)) * CrisisMultiplier);
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDCB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonCommanderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDCB A 1 Bright 
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			FDCB BCDE 5 Bright;
			Stop;
	}
}

class FireDemonCommanderTrail1 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FCSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FCSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonCommanderTrail2 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FCFX ABCDE 3 BRIGHT;
			Stop;
	}
}

class FireDemonQueenMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction ((random(2,3) * random(1,6)) + random(1,4));
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		+SEEKERMISSILE;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenCloneMissile : FireDemonQueenMissile
{
	default
	{
		Tag "Fire Missile";
		DamageFunction (((random(2,3) * random(1,6)) + random(1,4)) / 4);
		Speed 15;
		FastSpeed 20;
		Scale 0.5;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		+SEEKERMISSILE;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenMissileCrisis : FireDemonQueenMissile
{
	default
	{
		DamageFunction (((random(2,4) * random(1,8)) + random(2,6)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenCloneMissileCrisis : FireDemonQueenMissileCrisis
{
	default
	{
		DamageFunction ((((random(2,4) * random(1,8)) + random(2,6)) * CrisisMultiplier) / 4);
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}

class FireDemonQueenTrail1 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FQSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FQSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonQueenTrail2 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FQFX ABCDE 3 BRIGHT;
			Stop;
	}
}
// Dark Bishop
class BishopFXNew2 : BishopFXNew replaces BishopFX
{
	default
	{
		Tag "Green Star";
		DamageFunction (random(2,6) + random(1,4));
		Radius 10;
		Height 6;
		Speed 10;
		Projectile;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+STRIFEDAMAGE;
		DamageType "Magic";
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
	}
	
	States
	{
		Spawn:
			BPFX ABAB 1 Bright 
			{
				A_Weave(2, 2, 2.0, 1.0);
			}
			BPFX B 0 Bright 
			{
				A_SeekerMissile(2, 3);
			}
			Loop;
		Death:
			BPFX CDEF 4 Bright;
			BPFX GH 3 Bright;
			Stop;
	}
}
class BishopFXCrisis : BishopFXNew2
{
	default
	{
		DamageFunction ((random(2,6) + random(1,4)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BPFX ABAB 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_Weave(2, 2, 2.0, 1.0);
			}
			BPFX B 0 Bright 
			{
				A_SeekerMissile(2, 3);
			}
			Loop;
		Death:
			BPFX CDEF 4 Bright;
			BPFX GH 3 Bright;
			Stop;
	}
}

// Dark Disciple
class DiscipleFX : AetheriusProjectileZSC
{
	default
	{
		Tag "Disciple's Star";
		DamageFunction (random(1,4) * random(1,4));
		Radius 10;
		Height 6;
		Speed 10;
		FastSpeed 15;
		Projectile;
		+NODAMAGETHRUST;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
		DamageType "Magic";
	}
	
	States
	{
		Spawn:
			HDFX ABAB 1 Bright 
			{
				A_BishopMissileWeave();
			}
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}
class DiscipleFXCrisis : DiscipleFX
{
	default
	{
		DamageFunction ((random(1,4) * random(1,4)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			HDFX ABAB 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_BishopMissileWeave();
			}
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}

class DiscipleSpreadFX : DiscipleFX
{
	States
	{
		Spawn:
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX ABAB 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Goto Spawn+16;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}
class DiscipleSpreadFXCrisis : DiscipleFXCrisis
{
	States
	{
		Spawn:
			HDFX ABABABAB 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_BishopMissileWeave();
				A_SeekerMissile(2,9,SMF_PRECISE);
			}
		Idle:
			HDFX ABAB 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_BishopMissileWeave();
			}
			TNT1 A 0 
			{
				if (random(1,256) <= 16) { return resolvestate("Spawn"); }
				A_SeekerMissile(2,3,SMF_PRECISE);
				return resolvestate(null);
			}
			Loop;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}

// Vampire
class VampireRoundBeam : AetheriusProjectileZSC
{
	default
	{
		Tag "Vampiric Blood Beam";
		DamageFunction (random(1,5));
		Radius 2;
		Height 4;
		Speed 10;
		Scale 0.50;
		PROJECTILE;
		+THRUGHOST;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			VAM2 A 0 Bright 
			{
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
			}
			VAM2 AAAA 1 Bright 
			{
				A_CStaffMissileSlither();
				A_SpawnItemEx("VampireRoundBeamTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			}
			Loop;
		Death:
			VAM2 CDEFGH 3 Bright;
			Stop;
	}
}
class VampireRoundBeamCrisis : VampireRoundBeam
{
	default
	{
		DamageFunction ((random(1,5)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			VAM2 A 0 Bright 
			{
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
			}
			VAM2 AAAA 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_CStaffMissileSlither();
				A_SpawnItemEx("VampireRoundBeamTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			}
			Loop;
		Death:
			VAM2 CDEFGH 3 Bright;
			Stop;
	}
}

class VampireRoundBeamTrail : AetheriusProjectileZSC
{
	default
	{
		Radius 8;
		Height 16;
		RenderStyle "Add";
		ALPHA 0.67;
		Scale 0.50;
		PROJECTILE;
		+THRUGHOST;
		+FLOATBOB;
		SeeSound "monster/acosht";
		DeathSound "monster/acohit";
	}
	
	States
	{
		Spawn:
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 0 Bright;
			Goto Death;
		Death:
			VAM2 A 1 Bright A_SetTranslucent(0.60);
			VAM2 A 1 Bright A_SetTranslucent(0.50);
			VAM2 A 1 Bright A_SetTranslucent(0.40);
			VAM2 A 1 Bright A_SetTranslucent(0.30);
			VAM2 A 1 Bright A_SetTranslucent(0.20);
			VAM2 A 1 Bright A_SetTranslucent(0.10);
			VAM2 A 1 Bright A_SetTranslucent(0.00);
			Stop;
	}
}

class BatAttack : AetheriusProjectileZSC
{
	default
	{
		Tag "Bat Familiar";
		DamageFunction (3 * random(1,8));
		Radius 8;
		Height 16;
		Speed 12;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
		SeeSound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC 3 BRIGHT
			{
				A_SpawnItemEx("BatTrail");
			}
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}
class BatAttackCrisis : BatAttack
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
		Radius 8;
		Height 16;
		Speed 12 ;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
		seesound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC 3 BRIGHT
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("BatTrail");
			}
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}

class BatTrail : AetheriusProjectileZSC
{
	default
	{
		Radius 8;
		Height 16;
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.3;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
	}
	
	states
	{
		Spawn:
			VAM5 ABCDEFGHI 3 BRIGHT;
			Goto Death;
		Death:
			VAM5 I 1;
			Stop;
	}
}

class BatAttackSafe : AetheriusProjectileZSC
{
	default
	{
		Radius 8;
		Height 16;
		Speed 15;
		DamageFunction (0);
		PROJECTILE;
		+Randomize;
		+NoGravity;
		+Float;
		seesound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}

// Stalker
class SerpentFXNew : AetheriusProjectileZSC replaces SerpentFX
{
	default
	{
		Tag "Sizzling Slime";
		DamageFunction (4 * random(1,8));
		Speed 15;
		Radius 8;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "SerpentFXHit";
	}
	
	States
	{
		Spawn:
			SSFX A 0;
			SSFX A 3 Bright
			{
				A_StartSound("SerpentFXContinuous",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			SSFX BAB 3 Bright
			{
			}
			Goto Spawn+1;
		Death:
			SSFX C 4 Bright A_StopSound(CHAN_BODY);
			SSFX DEFGH 4 Bright;
			Stop;
	}
}
class SerpentFXCrisis : SerpentFXNew
{
	default
	{
		DamageFunction ((4 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			SSFX A 0;
			SSFX A 3 Bright
			{
				A_GenerateCrisisParticle();
				A_StartSound("SerpentFXContinuous",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			SSFX BAB 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			Goto Spawn+1;
		Death:
			SSFX C 4 Bright A_StopSound(CHAN_BODY);
			SSFX DEFGH 4 Bright;
			Stop;
	}
}

// Chaos Serpents
class Demon1FX1New : AetheriusProjectileZSC replaces Demon1FX1
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 15;
		Radius 10;
		Height 6;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			DMFX AABBCC 2 Bright;
			Loop;
		Death:
			DMFX DE 4 Bright;
			DMFX FGH 3 Bright;
			Stop;
	}
}
class Demon1FX1Crisis : Demon1FX1New
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			DMFX AABBCC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			DMFX DE 4 Bright;
			DMFX FGH 3 Bright;
			Stop;
	}
}

class Demon2FX1New : AetheriusEffectProjectile replaces Demon2FX1
{
	default
	{
		Tag "Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		Radius 10;
		Height 6;
		DamageType "Poison";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D2FX AABBCCDDEEFF 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			D2FX GHIJ 4 Bright;
			D2FX KL 3 Bright;
			Stop;
	}
}
class Demon2FX1Crisis : Demon2FX1New
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			D2FX AABBCCDDEEFF 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16, (random(140,210)*CallACS("CrisisMultiplier",5)) ); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			D2FX GHIJ 4 Bright;
			D2FX KL 3 Bright;
			Stop;
	}
}

class Demon3FX : AetheriusProjectileZSC
{
	default
	{
		Tag "Magmatized Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			RDFX AABBCC 2 Bright 
			{
				A_SpawnItemEx("Demon3FX1Trail");
			}
			Loop;
		Death:
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 A 4 BRIGHT A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 B 4 BRIGHT A_Explode(32,52,0);
			XPL1 CDEF 4 BRIGHT;
			Stop;
	}
}
class Demon3FXCrisis : Demon3FX
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			RDFX AABBCC 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("Demon3FX1Trail");
			}
			Loop;
		Death:
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 A 4 BRIGHT A_SpawnProjectile("HrVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 B 4 BRIGHT A_Explode(32*CrisisMultiplier,52,0);
			XPL1 CDEF 4 BRIGHT;
			Stop;
	}
}

class Demon3FX1Trail : AetheriusProjectileZSC
{
	default
	{
		Radius 1;
		Height 1;
		Gravity 0;
		Speed 1;
		Scale 1.1;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+CLIENTSIDEONLY;
		+FORCEXYBILLBOARD;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FBL1 CDEFG 4;
			Stop;
	}
}

class HrVolcanoTBlast : AetheriusProjectileZSC
{
	default
	{
		Tag "Magmatized VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		+NODAMAGETHRUST;
		Gravity 0.825;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		Damagetype "Fire";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			VTFB AABB 2 BRIGHT;
			Loop;
		Death:
			SFFI CBABCDE 4 BRIGHT;
			Stop;
	}
}
class HrVolcanoTBlastCrisis : HrVolcanoTBlast
{
	default
	{
		DamageFunction ((random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			VTFB AABB 2 BRIGHT
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			SFFI CBABCDE 4 BRIGHT;
			Stop;
	}
}

class Demon4FX : AetheriusEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		Alpha 0.99;
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D4FX AABB 2 Bright 
			{
				A_SpawnItemEx("BlackDemonTrail", 0, 0, 0, 0, 0, 0, 0, 0);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(280,420)); // Poison for 8-12 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX C 4 BRIGHT A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX D 4 BRIGHT A_Explode(32,52,0);
			D4FX EFGH 4 BRIGHT;
			Stop;
	}
}
class Demon4FXCrisis : Demon4FX
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			D4FX AABB 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("BlackDemonTrail", 0, 0, 0, 0, 0, 0, 0, 0);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16, (random(280,420)*CallACS("CrisisMultiplier",5)) ); // Poison for 8-12 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX C 4 BRIGHT A_SpawnProjectile("PoisonVolcanoTBlastCrisis",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX D 4 BRIGHT A_Explode(32*CrisisMultiplier,52,0);
			D4FX EFGH 4 BRIGHT;
			Stop;
	}
}

class BlackDemonTrail : AetheriusEffectProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 10;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			D4TR DEFGH 4;
			Stop;
	}
}

class PoisonVolcanoTBlast : AetheriusEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		+NODAMAGETHRUST;
		Gravity 0.825;
		PoisonDamage 5;
		DamageType "Poison";
		DamageType "Fire";
		Obituary "%o was envenomed by a Serpent.";
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			BPBL AABB 2 BRIGHT;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(35,53)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BPBL EDCDEFG 4 BRIGHT;
			Stop;
	}
}
class PoisonVolcanoTBlastCrisis : PoisonVolcanoTBlast
{
	default
	{
		DamageFunction ((random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BPBL AABB 2 BRIGHT
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16, (random(35,53)*CallACS("CrisisMultiplier",5)) ); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BPBL EDCDEFG 4 BRIGHT;
			Stop;
	}
}

// Ethereal Serpent [Demon5]
class Demon5FX1 : AetheriusEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D5FX AABBCCDDEEFF 2 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(5);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,6);
						if (user_random >= 1 && user_random <= 4) { CallACS("ManaDrain", random(7,9), 1, 0, 0); } // Drain 4-6% mana
						else if (user_random == 5) { ACS_NamedExecuteAlways("BuffTimer",0,8,21,random(70,140)); } // Silence for 2-4 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 6) // Silence for 2-4 seconds & drain 4-6% mana
						{
							ACS_NamedExecuteAlways("BuffTimer",0,8,21,random(70,140));
							CallACS("ManaDrain", random(7,9), 1, 0, 0);
						}
					}
				}
			}
		Death2:
			D5FX G 4 Bright A_Explode(32,52,0);
			D5FX HIJ 4 Bright;
			D5FX KL 3 Bright;
			Stop;
	}
}
class Demon5FX1Crisis : Demon5FX1
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			D5FX AABBCCDDEEFF 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(5);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,6);
						if (user_random >= 1 && user_random <= 4) { CallACS("ManaDrain", (random(7,9)*CallACS("CrisisMultiplier",2)) , 1, 0, 0); } // Drain 4-6% mana
						else if (user_random == 5) { ACS_NamedExecuteAlways("BuffTimer",0,8,21, (random(70,140)*CallACS("CrisisMultiplier",5)) ); } // Silence for 2-4 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 6) // Silence for 2-4 seconds & drain 4-6% mana
						{
							ACS_NamedExecuteAlways("BuffTimer",0,8,21, (random(70,140)*CallACS("CrisisMultiplier",5)) );
							CallACS("ManaDrain", (random(7,9)*CallACS("CrisisMultiplier",2)) , 1, 0, 0);
						}
					}
				}
			}
		Death2:
			D5FX G 4 Bright A_Explode(32,52,0);
			D5FX HIJ 4 Bright;
			D5FX KL 3 Bright;
			Stop;
	}
}

class Demon5Jet : AetheriusEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (random(1,4));
		Radius 14;
		Height 12;
		Speed 16;
		PROJECTILE;
		ProjectileKickback 0;
		//+RIPPER;
		+BLOODLESSIMPACT;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 0.5;
		SeeSound "DemonMissileFire";
		DeathSound "FireBall";
		//DamageType "ManaDrain";
	}
	States
	{
		Spawn:
			D5JT AABBCC 2 BRIGHT
			{
				A_Weave(1, 2, 0.25, 0.5);
				A_FadeOut(0.034);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(15);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 10) { CallACS("ManaDrain", random(1,2), 0, 0, 0); } // Drain 0-1 mana
						else if (user_random == 11) { ACS_NamedExecuteAlways("BuffTimer",0,8,21,random(5,10)); } // Silence for 0.14-0.28 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 12) // Silence for 0.28-0.56 seconds & drain 1-2 mana
						{
							ACS_NamedExecuteAlways("BuffTimer",0,8,21,random(10,20));
							CallACS("ManaDrain", random(2,3), 0, 0, 0);
						}
					}
				}
			}
		Death2:
			D5JT DEFG 2 BRIGHT;
			Stop;
	}
}
class Demon5JetCrisis : Demon5Jet
{
	default
	{
		DamageFunction ((random(1,4)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			D5JT AABBCC 2 BRIGHT
			{
				A_GenerateCrisisParticle();
				A_Weave(1, 2, 0.25, 0.5);
				A_FadeOut(0.034);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(15);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 10) { CallACS("ManaDrain", (random(1,2)*CallACS("CrisisMultiplier",2)) , 0, 0, 0); } // Drain 0-1 mana
						else if (user_random == 11) { ACS_NamedExecuteAlways("BuffTimer",0,8,21, (random(5,10)*CallACS("CrisisMultiplier",5)) ); } // Silence for 0.14-0.28 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 12) // Silence for 0.28-0.56 seconds & drain 1-2 mana
						{
							ACS_NamedExecuteAlways("BuffTimer",0,8,21, (random(10,20)*CallACS("CrisisMultiplier",5)) );
							CallACS("ManaDrain", (random(2,3)*CallACS("CrisisMultiplier",2)) , 0, 0, 0);
						}
					}
				}
			}
		Death2:
			D5JT DEFG 2 BRIGHT;
			Stop;
	}
}
class ThrustFloorUpDVDS : ThrustFloorDVDS replaces ThrustFloorUp
{
	default
	{
		+SOLID;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			Goto ThrustInit2;
	}
}
class ThrustFloorDownDVDS : ThrustFloorDVDS replaces ThrustFloorDown
{
	default
	{
		+NOTELEPORT;
		+FLOORCLIP;
		+INVISIBLE;
	}
	
	States
	{
		Spawn:
			Goto ThrustInit1;
	}
}