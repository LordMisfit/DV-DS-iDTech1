class SpectralMonsterBase : AetheriusBossZSC
{
	Default
	{
		Monster;
		+SPECIAL
		+SPECTRAL
		+NOICEDEATH
	}
	
	override void Touch (Actor toucher)
	{
		int dmg = (random(1,256) & 9) * 5;
		string dname = GetClassName();
		if (dname == "AlienSpectre1New") dmg = (random(1,256) & 9) * 5;
		if (dname == "AlienSpectre2New") dmg = (random(1,256) & 9) * random(5,6);
		if (dname == "AlienSpectre3New") dmg = (random(1,256) & 9) * 6;
		if (dname == "AlienSpectre4New") dmg = (random(1,256) & 9) * random(6,7);
		if (dname == "AlienSpectre5New") dmg = (random(1,256) & 9) * 7;
		if (dname == "EntityBossNew") dmg = (random(1,256) & 10) * 7;
		if (dname == "EntitySecondNew") dmg = (random(1,256) & 9) * 6;
		if (dname == "EntityAscended") dmg = (random(1,256) & 11) * 8;
		dmg /= 5;
		A_MonsterCrisisCheck(); // Spectres/Entity - Touch Damage
		if (user_canusecrisisatk == 1) 
		{
			dmg *= CrisisMultiplier;
			if (self.health > 0) A_PlayCrisisAtkSound(); 
		}
		//Console.Printf("dmg = %d", dmg);
		if (self.health > 0) toucher.DamageMobj (self, self, dmg, 'SpectralTouch');
	}
	

	//============================================================================

	void A_SpectreChunkSmall ()
	{
		Actor foo = Spawn("AlienChunkSmall", pos + (0, 0, 10), ALLOW_REPLACE);

		if (foo != null)
		{
			int t;

			t = random[SpectreChunk]() & 15;
			foo.Vel.X = (t - (random[SpectreChunk]() & 7));
			
			t = random[SpectreChunk]() & 15;
			foo.Vel.Y = (t - (random[SpectreChunk]() & 7));

			foo.Vel.Z = (random[SpectreChunk]() & 15);
		}
	}

	void A_SpectreChunkLarge ()
	{
		Actor foo = Spawn("AlienChunkLarge", pos + (0, 0, 10), ALLOW_REPLACE);

		if (foo != null)
		{
			int t;

			t = random[SpectreChunk]() & 7;
			foo.Vel.X = (t - (random[SpectreChunk]() & 15));
			
			t = random[SpectreChunk]() & 7;
			foo.Vel.Y = (t - (random[SpectreChunk]() & 15));

			foo.Vel.Z = (random[SpectreChunk]() & 7);
		}
	}

	void A_Spectre3Attack (string centerball = "SpectralLightningV2Monster", string centerballcrisis = "SpectralLightningV2MonsterCrisis", string subball = "SpectralLightningBall2Monster", string subballcrisis = "SpectralLightningBall2MonsterCrisis")
	{
		string atktype1 = centerball;
		string atktype2 = subball;
		A_MonsterCrisisCheck(); // Spectre3 - Lightning Ball 180
		if (user_canusecrisisatk == 1) 
		{
			atktype1 = centerballcrisis;
			atktype2 = subballcrisis;
			A_PlayCrisisAtkSound(); 
		}

		if (target == null)
			return;

		// Drops the center shot
		Actor foo = Spawn(atktype1, Pos + (0, 0, 32), ALLOW_REPLACE);
		if (foo != null)
		{
			foo.Vel.Z = -12;
			foo.target = self;
			foo.FriendPlayer = 0;
			foo.tracer = target;
		}

		// Fires the 180 attack
		Angle -= 90.;
		for (int i = 0; i < 20; ++i)
		{
			Angle += 9.;
			SpawnSubMissile (atktype2, self);
		}
		Angle -= 90.;
	}
	
	// Spectres
	void A_AlienSpectreDeath ()
	{
		PlayerPawn player = null;
		int log = 0;

		A_NoBlocking(); // [RH] Need this for Sigil rewarding
		if (!CheckBossDeath ())
		{
			return;
		}
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].health > 0)
			{
				player = players[i].mo;
				break;
			}
		}
		if (player == null)
		{
			return;
		}
		
		class<Actor> cls = GetClass();
		if (cls == "AlienSpectre1")
		{
			Floor_LowerToLowest(999, 8);
			log = 95;
		}
		else if (cls == "AlienSpectre2")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_BISHOP");
			log = 74;
			player.GiveInventoryType ("QuestItem21");
		}
		else if (cls == "AlienSpectre3")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_ORACLE");
			// If there are any Oracles still alive, kill them.
			ThinkerIterator it = ThinkerIterator.Create("Oracle");
			Actor oracle;

			while ( (oracle = Actor(it.Next())) != null)
			{
				if (oracle.health > 0)
				{
					oracle.health = 0;
					oracle.Die (self, self);
				}
			}
			player.GiveInventoryType ("QuestItem23");
			if (player.FindInventory ("QuestItem21"))
			{
				// If the Bishop is dead, set quest item 22
				player.GiveInventoryType ("QuestItem22");
			}
			if (player.FindInventory ("QuestItem24") == null)
			{
				// Macil is calling us back...
				log = 87;
			}
			else
			{
				// You wield the power of the complete Sigil.
				log = 85;
			}
			Door_Open(222, 64);
		}
		else if (cls == "AlienSpectre4")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_MACIL");
			player.GiveInventoryType ("QuestItem24");
			if (player.FindInventory ("QuestItem25") == null)
			{
				// Richter has taken over. Macil is a snake.
				log = 79;
			}
			else
			{
				// Back to the factory for another Sigil!
				log = 106;
			}
		}
		else if (cls == "AlienSpectre5")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_LOREMASTER");

			player.GiveInventoryType ("QuestItem26");
			if (!multiplayer)
			{
				player.GiveInventoryType ("UpgradeStamina");
				player.GiveInventoryType ("UpgradeAccuracy");
			}
			Sigil sigl = Sigil(player.FindInventory("Sigil"));
			if (sigl != null && sigl.health == 5)
			{
				// You wield the power of the complete Sigil.
				log = 85;
			}
			else
			{
				// Another Sigil piece. Woohoo!
				log = 83;
			}
			Floor_LowerToLowest(666, 8);
		}
		if (log > 0)
		{
			String voc = "svox/voc" .. log;
			A_StartSound(voc, CHAN_VOICE);
			player.player.SetLogNumber (log);
		}
	}

	// Entity
	private void A_SpectralMissile (class<Actor> missilename)
	{
		if (target != null)
		{
			Actor missile = SpawnMissileXYZ (Pos + (0,0,32), target, missilename, false);
			if (missile != null)
			{
				missile.tracer = target;
				missile.CheckMissileSpawn(radius);
			}
		}
	}

	void A_EntityAttack()
	{
		// Apparent Strife bug: Case 5 was unreachable because they used % 5 instead of % 6.
		// I've fixed that by making case 1 duplicate it, since case 1 did nothing.
		switch (random[Entity]() % 5)
		{
		case 0:
			A_SpotLightning("SpectralLightningSpotNew","SpectralLightningSpotCrisis");
			break;

		case 2:
			A_MonsterCrisisCheck(); // Entity Attack - 180 Spread
			A_CrisisSpawnProjectile("SpectralLightningH3Monster", "SpectralLightningH3MonsterCrisis", 32, 0);
			break;

		case 3:
			A_Spectre3Attack("SpectralLightningV2Monster","SpectralLightningV2MonsterCrisis","SpectralLightningBall2Monster","SpectralLightningBall2MonsterCrisis");
			break;

		case 4:
			A_MonsterCrisisCheck(); // Entity Attack - Large Lightning Column
			A_CrisisSpawnProjectile("SpectralLightningBigV2Monster", "SpectralLightningBigV2MonsterCrisis", 32, 0);
			break;

		default:
			A_MonsterCrisisCheck(); // Entity Attack - Giant Ball
			A_CrisisSpawnProjectile("SpectralLightningBigBall2New", "SpectralLightningBigBall2Crisis", 32, 0);
			break;
		}
	}

	void A_EntityDeath()
	{
		Actor second;
		double secondRadius = GetDefaultByType("EntitySecond").radius * 2;

		static const double turns[] = { 0, 90, -90 };

		Actor spot = tracer;
		if (spot == null) spot = self;

		for (int i = 0; i < 3; i++)
		{
			double an = Angle + turns[i];
			Vector3 pos = spot.Vec3Angle(secondRadius, an, tracer ? 70. : 0.);

			second = Spawn("EntitySecond", pos, ALLOW_REPLACE);
			if (second != null)
			{
				second.CopyFriendliness(self, true);
				second.A_FaceTarget();
				second.VelFromAngle(i == 0? 4.8828125 : secondRadius * 4., an);
			}
		}
	}
	
	// Sub-Entity
	void A_SubEntityDeath ()
	{
		if (CheckBossDeath ())
		{
			Exit_Normal(0);
		}
	}
}

// MONSTER SPAWNERS
class InquisitorSpawner : AetheriusMonsterSpawner replaces Inquisitor
{
	Default
	{
		Radius 40;
		Height 110;
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,1024) <= evolveChance)
			return "DarkInquisitor";
		else
			return "InquisitorNew";
	}
}

//
class AetheriusTeleporterBeaconNew : TeleporterBeacon
{
	void A_Beacon(string cname = "Rebel1New")
	{
		Actor owner = target;
		Actor rebel = Spawn(cname, (pos.xy, floorz), ALLOW_REPLACE);
		if (rebel == null)
		{
			return;
		}
		if (!rebel.TryMove (rebel.Pos.xy, true))
		{
			rebel.Destroy();
			return;
		}
		// Once the rebels start teleporting in, you can't pick up the beacon anymore.
		bSpecial = false;
		Inventory(self).DropTime = 0;
		// Set up the new rebel.
		rebel.threshold = rebel.DefThreshold;
		rebel.ChangeTID(1000);
		rebel.target = null;
		rebel.bInCombat = true;
		rebel.LastHeard = owner;	// Make sure the rebels look for targets
		if (deathmatch)
		{
			rebel.health *= 2;
		}
		if (owner != null)
		{
			// Rebels are the same color as their owner (but only in multiplayer)
			if (multiplayer)
			{
				rebel.Translation = owner.Translation;
			}
			rebel.SetFriendPlayer(owner.player);
			// Set the rebel's target to whatever last hurt the player, so long as it's not
			// one of the player's other rebels.
			if (owner.target != null && !rebel.IsFriend (owner.target))
			{
				rebel.target = owner.target;
			}
		}

		rebel.SetState (rebel.SeeState);
		rebel.Angle = Angle;
		rebel.SpawnTeleportFog(rebel.Vec3Angle(20., Angle, 0), false, true);
		if (--health < 0)
		{
			SetStateLabel("Death");
		}
	}
}

class HealthFillUpNew : DummyStrifeItem replaces HealthFillUp
{
	Default
	{
		Tag "$TAG_HEALTHFILLUP";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		AetheriusPlayerPawn cplayerpawn;

		
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		double healthrestorefactor = 1.0;
		double healthrestorelimit = 1.0;
		int CurrentHealth;
		int PlayerMaxHP = CallACS("StatCheck",1);
		if (TrueGameSkill == 0) { healthrestorefactor = 1.000; healthrestorelimit = 1.000; }
		if (TrueGameSkill == 1) { healthrestorefactor = 0.75; healthrestorelimit = 0.75; }
		if (TrueGameSkill == 2) { healthrestorefactor = 0.75; healthrestorelimit = 0.75; }
		if (TrueGameSkill == 3) { healthrestorefactor = 0.50; healthrestorelimit = 0.50; }
		if (TrueGameSkill == 4) { healthrestorefactor = 0.50; healthrestorelimit = 0.50; }
		if (TrueGameSkill == 5) { healthrestorefactor = 0.375; healthrestorelimit = 0.375; }
		if (TrueGameSkill == 6) { healthrestorefactor = 0.375; healthrestorelimit = 0.375; }
		if (TrueGameSkill == 7) { healthrestorefactor = 0.25; healthrestorelimit = 0.25; }
		if (TrueGameSkill == 8) { healthrestorefactor = 0.25; healthrestorelimit = 0.25; }
		if (TrueGameSkill == 9) { healthrestorefactor = 0.125; healthrestorelimit = 0.125; }
		healthrestorefactor *= 0.25;
		int HealLimit = (PlayerMaxHP * healthrestorelimit);
		
		if (toucher)
		{
			cplayerpawn = AetheriusPlayerPawn(toucher);
			if (cplayerpawn)
			{
				CurrentHealth = cplayerpawn.player.mo.health;
				if (CurrentHealth < HealLimit)
				{
					CurrentHealth += (PlayerMaxHP * healthrestorefactor);
					if (CurrentHealth >= HealLimit) CurrentHealth = HealLimit;
					cplayerpawn.player.mo.health = cplayerpawn.player.health = CurrentHealth;
					toucher.A_StartSound("gethealthkit",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					toucher.A_SetBlend("E0 E0 E0",0.33,random(17,18),"E0 E0 E0",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
					//Console.Printf("[True] CurrentHealth: %d, Limit: %d", CurrentHealth, (PlayerMaxHP * healthrestorelimit));
				}
				else
				{
					//Console.Printf("[False] CurrentHealth: %d, Limit: %d", CurrentHealth, (PlayerMaxHP * healthrestorelimit));
					return false;
				}
			}
			else
			{
				return false;
			}
		}

		GoAwayAndDie();
		return true;
	}
}

class AmmoFillupNew : DummyStrifeItem replaces AmmoFillup
{
	Default
	{
		Tag "$TAG_AMMOFILLUP";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		//Console.Printf("235252");
		int maxammo;
		Inventory item = toucher.FindInventory("ElectricBolts");
		if (item == NULL)
		{
			item = toucher.GiveInventoryType("ElectricBolts");
			if (item != NULL)
			{
				maxammo = item.MaxAmount;
				item.Amount = maxammo / 5;
				toucher.A_StartSound("misc/i_pkup",9,CHANF_DEFAULT,1.0,ATTN_NORM);
				toucher.A_SetBlend("FF FF FF",0.33,random(11,12),"FF FF FF",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
		}
		else 
		{
			maxammo = item.MaxAmount;
			if (item.Amount < (maxammo / 5))
			{
				item.Amount = maxammo / 5;
				toucher.A_StartSound("misc/i_pkup",9,CHANF_DEFAULT,1.0,ATTN_NORM);
				toucher.A_SetBlend("FF FF FF",0.33,random(11,12),"FF FF FF",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
			else
			{
				return false;
			}
		}
		GoAwayAndDie ();
		return true;
	}
	
}


// WEAPONS
class ElectricBoltsNew : ElectricBolts replaces ElectricBolts
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		Inventory.Amount 20;
		Inventory.MaxAmount 50;
		Ammo.BackpackAmount 4;
		Ammo.BackpackMaxAmount 100;
		Inventory.Icon "I_XQRL";
		Tag "$TAG_ELECTRICBOLTS"; // "Electric Bolts";
		Inventory.PickupMessage "$TXT_ELECTRICBOLTS"; // "You picked up the electric bolts."
	}
	
	States
	{
		Spawn:
			XQRL A -1;
			Stop;
	}
}

class PoisonBoltsNew : PoisonBolts replaces PoisonBolts
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		Inventory.Amount 10;
		Inventory.MaxAmount 25;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 50;
		Inventory.Icon "I_PQRL";
		Tag "$TAG_POISONBOLTS"; // "Poison Bolts";
		Inventory.PickupMessage "$TXT_POISONBOLTS"; // "You picked up the poison bolts.";
	}
	States
	{
		Spawn:
			PQRL A -1;
			Stop;
	}
}

// Crossbow Projectiles
class ElectricBoltNew : AetheriusProjectileZSC replaces ElectricBolt
{
	int user_zaptimer;
	int user_zaprad;
	default
	{
		Tag "Electric Bolt";
		Speed 30;
		Radius 10;
		Height 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+STRIFEDAMAGE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DROPOFF;
		DamageType "Thunder";
		MaxStepHeight 4;
		SeeSound "misc/swish";
		ActiveSound "misc/swish";
		DeathSound "weapons/xbowhit";
		Obituary "$OB_MPELECTRICBOLT"; // "%o got bolted to the wall by %k.";
	}
	
	States
	{
		Spawn:
			AROW A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(25,0); 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			AROW A 10 A_LoopActiveSound();
			Loop;
		Death:
			ZAP1 AAABBBCCCDDDEEEFFFEEEDDCCBBA 1
			{
				user_zaprad = randompick(4,5,6) + (CallACS("MiscVarCheckDECORATE",10031) * 0.5);
				user_zaptimer++;
				if ((user_zaptimer % random(3,4)) == 0) 
				{
					bFORCERADIUSDMG = false;
					if (random(1,(8-CallACS("MiscVarCheckDECORATE",10031)) <= 2)) { bFORCERADIUSDMG = true; }
					A_Explode(A_GetPlayerAttackDamage(72),(user_zaprad*2),0,0,user_zaprad,0,0,"BulletPuff","Thunder");
				}
			}
			Stop;
	}
}

class PoisonBoltNew : AetheriusProjectileZSC replaces PoisonBolt
{
	default
	{
		Tag "Poison Bolt";
		Speed 30;
		Radius 10;
		Height 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+STRIFEDAMAGE;
		DamageType "PoisonBolt";
		MaxStepHeight 4;
		SeeSound "misc/swish";
		ActiveSound "misc/swish";
		Obituary "%o recieved a lethal dose of %k's wrath.";
	}
	
	States
	{
		Spawn:
			ARWP A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(26,0); 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			ARWP A 10 A_LoopActiveSound();
			Loop;
		Death:
			AROW A 1;
			Stop;
	}
}

// Crossbow
class StrifeCrossbowNew : StrifeWeaponBase replaces StrifeCrossbow
{
	default
	{
		+FLOORCLIP;
		Weapon.SelectionOrder 1200;
		+WEAPON.NOALERT;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 8;
		Weapon.AmmoType1 "ElectricBolts";
		Weapon.SisterWeapon "StrifeCrossbow2New";
		Inventory.PickupMessage "You picked up the crossbow \cx[Slot 2]\c-";
		Tag "Crossbow [w/ Electric Bolts]";
		Inventory.Icon "CBOWA0";
	}

	States
	{
		Spawn:
			CBOW A -1;
			Stop;
		Ready:
			XBOW A 0 A_GunFlash("Flash", GFF_NOEXTCHANGE);
			XBOW A 1 A_WeaponReady();
			Wait;
		Deselect:
			XBOW A 1 
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			XBOW A 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			TNT1 A 0
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { return resolvestate("Fire5"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { return resolvestate("Fire4"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { return resolvestate("Fire3"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { return resolvestate("Fire2"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { return resolvestate("Fire1"); }
				return resolvestate("Fire0");
			}
		Fire0:
			// 32 [3]
			XBOW A 3 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire1:
			// 29 [3]
			XBOW A 3 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire2:
			// 27 [2]
			XBOW A 2 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire3:
			// 24 [2]
			XBOW A 2 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire4:
			// 22 [1]
			XBOW A 1 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire5:
			// 19 [1]
			XBOW A 1 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		FireArrow:
			TNT1 A 0 
			{
				CallACS("StartTensionCountDown");
				A_StartSound("weapons/xbowshoot",1);
				A_SpreadAuraFireProjectile("ElectricBoltNew",frandom(-(A_GetHitScanXSpread(6)),(A_GetHitScanXSpread(6))),1,"ElectricBolts",0,0,0,0);
			}
			XBOW B 6
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					}
					else
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}
			}
			XBOW C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW D 6
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					}
					else
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}
			}
			XBOW E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
			}
			XBOW F 5
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW G 5
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}

				A_GunFlash ("Flash", GFF_NOEXTCHANGE);
				A_CheckReload();
			}
			Goto Ready+1;
		Flash:
			XBOW KLM 5;
			Loop;
	}
}

class StrifeCrossbow2New : StrifeWeaponBase replaces StrifeCrossbow2
{
	default
	{
		Weapon.SelectionOrder 2700;
		+WEAPON.NOALERT;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType1 "PoisonBolts";
		Weapon.SisterWeapon "StrifeCrossbowNew";
		Tag "Crossbow [w/ Poison Bolts]";
	}
	
	States
	{
		Ready:
			XBOW H 1 A_WeaponReady();
			Loop;
		Deselect:
			XBOW H 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			XBOW H 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			TNT1 A 0
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { return resolvestate("Fire5"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { return resolvestate("Fire4"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { return resolvestate("Fire3"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { return resolvestate("Fire2"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { return resolvestate("Fire1"); }
				return resolvestate("Fire0");
			}
		Fire0:
			// 32 [3]
			XBOW H 3;
			goto FireArrow;
		Fire1:
			// 29 [3]
			XBOW H 3;
			goto FireArrow;
		Fire2:
			// 27 [2]
			XBOW H 2;
			goto FireArrow;
		Fire3:
			// 24 [2]
			XBOW H 2;
			goto FireArrow;
		Fire4:
			// 22 [1]
			XBOW H 1;
			goto FireArrow;
		Fire5:
			// 19 [1]
			XBOW H 1;
			goto FireArrow;
		FireArrow:
			TNT1 A 0 
			{
				CallACS("StartTensionCountDown");
				A_StartSound("weapons/xbowshoot",1);
				A_SpreadAuraFireProjectile("PoisonBoltNew",frandom(-(A_GetHitScanXSpread(6)),(A_GetHitScanXSpread(6))),1,"PoisonBolts",0,0,0,0);
			}
			XBOW B 6 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					}
					else
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}
			}
			XBOW C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW D 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
			}
			XBOW E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
			}
			XBOW I 5
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW J 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}

				A_CheckReload();
			}
			Goto Ready;
		Flash:
			Stop;
	}
}

// AMMO
// Bullet Clip
class ClipOfBulletsNew : ClipOfBullets replaces ClipOfBullets
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			BLIT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 1)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 48)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Box of Bullets
class BoxOfBulletsNew : BoxOfBullets replaces BoxOfBullets
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			BBOX A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 144)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Assault Gun
class AssaultGunNew : AssaultGun replaces AssaultGun
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			RIFL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 16)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 4)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			RIFG A 1 A_WeaponReady();
			Loop;
		Deselect:
			RIFG B 1 A_Lower(18);
			Loop;
		Select:
			RIFG A 1 A_Raise(18);
			Loop;
		Fire:
			RIFF AB 3 A_FireAssaultGun();
			RIFG D 3 A_FireAssaultGun();
			RIFG C 0 A_ReFire();
			RIFG B 2 A_Light0();
			Goto Ready;
	}
}

class AssaultGunStandingNew : AssaultGunStanding replaces AssaultGunStanding
{
	default
	{
		DropItem "AssaultGunNew";
		Inventory.PickupMessage "$TXT_ASSAULTGUN"; // "You picked up the assault gun."
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			RIFL B 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 16)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 4)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Mini Missiles
class MiniMissilesNew : MiniMissiles replaces MiniMissiles
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MSSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 1)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 48)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Crate Of Missiles
class CrateOfMissilesNew : CrateOfMissiles replaces CrateOfMissiles
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			ROKT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 144)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Mini Missile Launcher
class MiniMissileLauncherNew : MiniMissileLauncher replaces MiniMissileLauncher
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MMSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 48)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 24)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 6)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			MMIS A 1 A_WeaponReady();
			Loop;
		Deselect:
			MMIS A 1 A_Lower(18);
			Loop;
		Select:
			MMIS A 1 A_Raise(18);
			Loop;
		Fire:
			MMIS A 4 A_FireMiniMissile();
			MMIS B 4 A_Light1();
			MMIS C 5 Bright;
			MMIS D 2 Bright A_Light2();
			MMIS E 2 Bright;
			MMIS F 2 Bright A_Light0();
			MMIS F 0 A_ReFire();
			Goto Ready;
	}
}

// Flamethrower
class FlameThrowerNew : FlameThrower replaces FlameThrower
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			FLAM A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 64)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 8)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			FLMT AB 3 A_WeaponReady();
			Loop;
		Deselect:
			FLMT A 1 A_Lower(18);
			Loop;
		Select:
			FLMT A 1 A_Raise(18);
			Loop;
		Fire:
			FLMF A 2 A_FireFlamer();
			FLMF B 3 A_ReFire();
			Goto Ready;
	}
}

// HE Grenade Rounds
class HEGrenadeRoundsNew : HEGrenadeRounds replaces HEGrenadeRounds
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MSSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}
// Phosphorus Grenades
class PhosphorusGrenadeRoundsNew : PhosphorusGrenadeRounds replaces PhosphorusGrenadeRounds
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			ROKT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Grenade Launcher
class StrifeGrenadeLauncherNew : StrifeGrenadeLauncher replaces StrifeGrenadeLauncher
{
	default
	{
		Weapon.AmmoType1 "HEGrenadeRounds";
		Weapon.SisterWeapon "StrifeGrenadeLauncher2New";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			GRND A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			GREN A 1 A_WeaponReady();
			Loop;
		Deselect:
			GREN A 1 A_Lower(18);
			Loop;
		Select:
			GREN A 1 A_Raise(18);
			Loop;
		Fire:
			GREN A 5 A_FireGrenade("HEGrenade", -90, "Flash");
			GREN B 10;
			GREN A 5 A_FireGrenade("HEGrenade", 90, "Flash2");
			GREN C 10;
			GREN A 0 A_ReFire();
			Goto Ready;
		Flash:
			GREF A 5 Bright A_Light1();
			Goto LightDone;
		Flash2:
			GREF B 5 Bright A_Light2();
			Goto LightDone;
	}
}
class StrifeGrenadeLauncher2New : StrifeGrenadeLauncher2 replaces StrifeGrenadeLauncher2
{
	default
	{
		Weapon.AmmoType1 "PhosphorusGrenadeRounds";
		Weapon.SisterWeapon "StrifeGrenadeLauncherNew";
	}
	
	States
	{
		Ready:
			GREN D 1 A_WeaponReady();
			Loop;
		Deselect:
			GREN D 1 A_Lower(18);
			Loop;
		Select:
			GREN D 1 A_Raise(18);
			Loop;
		Fire:
			GREN D 5 A_FireGrenade("PhosphorousGrenade", -90, "Flash");
			GREN E 10;
			GREN D 5 A_FireGrenade("PhosphorousGrenade", 90, "Flash2");
			GREN F 10;
			GREN A 0 A_ReFire();
			Goto Ready;
		Flash:
			GREF C 5 Bright A_Light1();
			Goto LightDone;
		Flash2:
			GREF D 5 Bright A_Light2();
			Goto LightDone;
	}
}

// Energy Pod
class EnergyPodNew : EnergyPod replaces EnergyPod
{
	default
	{
		+DONTGIB;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MSSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 5)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 240)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}
// Energy Pack
class EnergyPackNew : EnergyPack replaces EnergyPack
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			ROKT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 15)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 240)
					{
						A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Mauler [both modes]
class MaulerNew : Mauler replaces Mauler
{
	default
	{
		Weapon.SisterWeapon "Mauler2New";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TRPD A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 64)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 16)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			MAUL FGHA 6 A_WeaponReady();
			Loop;
		Deselect:
			MAUL A 1 A_Lower(18);
			Loop;
		Select:
			MAUL A 1 A_Raise(18);
			Loop;
		Fire:
			BLSF A 5 Bright A_FireMauler1(); // see MaulerPuff
			MAUL B 3 Bright A_Light1();
			MAUL C 2 A_Light2();
			MAUL DE 2;
			MAUL A 7 A_Light0();
			MAUL H 7;
			MAUL G 7 A_CheckReload();
			Goto Ready;
	}
}
class Mauler2New : Mauler2 replaces Mauler2
{
	default
	{
		Weapon.SisterWeapon "MaulerNew";
	}
	
	States
	{
		Ready:
			MAUL IJKL 7 A_WeaponReady();
			Loop;
		Deselect:
			MAUL I 1 A_Lower(18);
			Loop;
		Select:
			MAUL I 1 A_Raise(18);
			Loop;
		Fire:
			MAUL I 20 A_FireMauler2Pre();
			MAUL J 10 A_Light1();
			BLSF A 10 Bright A_FireMauler2(); // see MaulerTorpedo
			MAUL B 10 Bright A_Light2();
			MAUL C 2;
			MAUL D 2 A_Light0();
			MAUL E 2 A_ReFire();
			Goto Ready;
	}
}

// SELL ITEMS
// IMPORTANT: THESE ARE FOR USE BY STRIFE DIALOGxx SCRIPTS TO GIVE THE PLAYER A SPECIFIC AMOUNT OF 
// GOLD FOR THE RESPECTIVE ITEMS. SINCE ITEMS CAN ONLY BE GIVEN 1 AT A TIME, THIS THE BEST WORKAROUND I HAVE :V
class BaseSellItem : AetheriusCustomInventory
{
	default
	{
		radius 5;
		height 5;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
}

// MEDICAL ITEMS
class MedicinalHerbSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",10,AAPTR_PLAYER1);
				A_TakeInventory("MedicinalHerbSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class StrongMediceneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",25,AAPTR_PLAYER1);
				A_TakeInventory("StrongMediceneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class SpecialMediceneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",75,AAPTR_PLAYER1);
				A_TakeInventory("SpecialMediceneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class YggdrasilDewSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",625,AAPTR_PLAYER1);
				A_TakeInventory("YggdrasilDewSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MedPatchSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",5,AAPTR_PLAYER1);
				A_TakeInventory("MedPatchSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MedicalKitSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",12,AAPTR_PLAYER1);
				A_TakeInventory("MedicalKitSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class SurgeryKitSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",37,AAPTR_PLAYER1);
				A_TakeInventory("SurgeryKitSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// BUFF ITEMS
class PaxaPunchSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",250,AAPTR_PLAYER1);
				A_TakeInventory("PaxaPunchSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MercuryBandanaSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",250,AAPTR_PLAYER1);
				A_TakeInventory("MercuryBandanaSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// MAGICAL ITEMS
class MagicWaterSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",87,AAPTR_PLAYER1);
				A_TakeInventory("MagicWaterSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class SageElixirSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",225,AAPTR_PLAYER1);
				A_TakeInventory("SageElixirSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class ElfinElixirItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",500,AAPTR_PLAYER1);
				A_TakeInventory("ElfinElixirItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
 }
}

// UNIQUE ITEMS
class EnvironmentalSuitSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",12,AAPTR_PLAYER1);
				A_TakeInventory("EnvironmentalSuitSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class TargeterSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",125,AAPTR_PLAYER1);
				A_TakeInventory("TargeterSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class DegninOreSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",1375,AAPTR_PLAYER1);
				A_TakeInventory("DegninOreSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class ShadowArmorSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",500,AAPTR_PLAYER1);
				A_TakeInventory("ShadowArmorSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class TeleporterBeaconSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",150,AAPTR_PLAYER1);
				A_TakeInventory("TeleporterBeaconSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class ScannerSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",750,AAPTR_PLAYER1);
				A_TakeInventory("ScannerSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// VIMSTONE ITEMS
class LesserVimstoneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",1125,AAPTR_PLAYER1);
				A_TakeInventory("LesserVimstoneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class GreaterVimstoneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",4020,AAPTR_PLAYER1);
				A_TakeInventory("GreaterVimstoneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MiraclePotionSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",315,AAPTR_PLAYER1);
				A_TakeInventory("MiraclePotionSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// OTHER "JUNK"
class OfferingChaliceItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",7500,AAPTR_PLAYER1);
				A_GiveInventory("SeedOfSkillForced",2,AAPTR_PLAYER1);
				A_TakeInventory("OfferingChaliceItem1",1,0,AAPTR_PLAYER1);
				A_TakeInventory("QuestItem2",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// PICKUPS
// Bag/Satchel
class AmmoSatchelNew : AetheriusCustomInventory replaces AmmoSatchel
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		Inventory.Icon "I_BKPK";
		Tag "Ammo Satchel";
		Inventory.PickupMessage "You picked up the \ceammo satchel\c-! \cy\cyAmmo and Inventory Limits increased\c-\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetScale(frandom(0.667,1));
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }

				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
			}
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("DimensionalBag",0,0,0,0,0,0,0,0,0,tid);
					A_FadeOut(1.0,FTF_REMOVE);
				}
			}
		Idle:
			BKPK A -1;
			Stop;
		Pickup:
			TNT1 A 0;
			TNT1 A 0 A_GrabBackpack();
			Stop;
	}
}

// Armor
class LeatherArmorNew : LeatherArmor replaces LeatherArmor
{
	default
	{
		Radius 20;
		Height 16;
		+FLOORCLIP;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		Inventory.MaxAmount 5;
		inventory.InterHubAmount 5;
		Inventory.Icon "I_ARM2";
		Inventory.PickupMessage "You picked up the \cdLeather Armor\c-.";
		Armor.SaveAmount 100;
		Armor.SavePercent 33.335;
		Tag "Leather Armor";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("FloraRandomArmorDoom2",0,0,0,0,0,0,0,0,0);
			}
			Stop;
	}
}

class MetalArmorNew : MetalArmor replaces MetalArmor
{
	default
	{
		Radius 20;
		Height 16;
		+FLOORCLIP;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.INVBAR;
		Inventory.MaxAmount 3;
		inventory.InterHubAmount 3;
		Inventory.Icon "I_ARM1";
		Inventory.PickupMessage "You picked up the \chMetal Armor\c-.";
		Armor.SaveAmount 200;
		Armor.SavePercent 50;
		Tag "Metal Armor";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
				A_SpawnItemEx("FloraRandomArmorDoom2",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("FloraRandomArmorDoom2",0,0,0,0,0,0,0,0,0);
			}
			Stop;
	}
}

// Degnin Ore [both variants]

// This is the initial pickup. It will not explode if hit in this form.
class DegninOrePickup : AetheriusUsableInventory replaces DegninOre
{
	default
	{
		Radius 16;
		Height 16;
		+DONTGIB;
		Mass 0x7FFFFFFD; // So it's unaffected by a Poison Cloud spell's vortexes
		DeathSound "ore/explode";
		Inventory.Icon "I_XPRK";
		Inventory.PickupMessage "You picked up the \cfDegnin Ore\c-.";
	}
	
	States
	{
		Spawn:
			XPRK BCDEFEDC 4 Bright; // Glows with an anti-magnetic field to indicate you can't destroy it in this form. :V
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("DegninOreNew",1,AAPTR_PLAYER1);
				A_TakeInventory("DegninOrePickup",1,0,AAPTR_PLAYER1);
			}
			Stop;
	}
}

class DegninOreNew : DegninOre
{
	default
	{
		Health 10;
		DamageFactor "Poison", 0.0;
		DamageFactor "PoisonElemental", 0.0;
		Radius 16;
		Height 16;
		Mass 0x7FFFFFFD; // So it's unaffected by a Poison Cloud spell's vortexes
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		+SOLID;
		+NODAMAGETHRUST;
		+SHOOTABLE;
		+NOBLOOD;
		+FLOORCLIP;
		+INCOMBAT;
		+DONTGIB;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		Tag "Degnin Ore: Explodes when shot. Will destroy forcefields.";
		DeathSound "ore/explode";
		Inventory.Icon "I_XPRK";
		Inventory.PickupMessage "You picked up the \cfDegnin Ore\c-.";
	}
	
	States
	{
		Spawn:
			XPRK A 0 NoDelay;
			XPRK A 175; // you have five seconds to shoot the Ore before it reactivates it's anti-magnetic field and becomes inert again
		Revert:
			XPRK A 0 
			{
				A_SpawnItemEx("DegninOrePickup");
				A_FadeOut(1.0);
			}
			Stop;
		Idle:
			XPRK A -1;
			Stop;
		Death:
			XPRK A 1 A_RemoveForceField();
			BNG3 A 0 A_SetTranslucent(1, 1);
			BNG3 A 0 A_Scream();
			BNG3 A 3 Bright A_Explode(192, 192, 1, 1);
			BNG3 BCDEFGH 3 Bright;
			Stop;
	}
}

// Others
class EnvironmentalSuitNew : AetheriusUsableInventory replaces EnvironmentalSuit // PowerupGiver
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "misc/i_pkup";
		Inventory.Icon "I_MASK";
		Inventory.PickupMessage "You picked up the \cdEnvironmental Suit\c-.";
		Tag "Environmental Suit: Protects from Hazardous Waste, as well as Fire, for 80 seconds";
	}
	
	States
	{
		Spawn:
			MASK A -1;
			Stop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-12);
			fail;
	}
}

class ShadowArmorNew : AetheriusUsableInventory replaces ShadowArmor
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		+VISIBILITYPULSE;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		RenderStyle "Translucent";
		Tag "Shadow Armor: Gives player invisibility for 80 seconds";
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.Icon "I_SHD1";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.PickupMessage "You picked up the \caShadow armor\c-.";
	}
	
	States
	{
		Spawn:
			SHD1 A -1 Bright;
			Stop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-11);
			fail;
	}
}

class TeleporterBeaconNew : AetheriusTeleporterBeaconNew replaces TeleporterBeacon
{
	default
	{
		Health 5;
		Radius 16;
		Height 16;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		+DROPPED;
		+DONTGIB;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		Inventory.Icon "I_BEAC";
		Tag "Teleporter Beacon: Summons Front Rebel Allies";
		Inventory.PickupMessage "You picked up the \cbTeleporter Beacon\c-.";
	}
	
	States
	{
		Spawn:
			BEAC A -1;
			Stop;
		Drop:
			BEAC A 30;
			BEAC A 160 A_Beacon();
			Wait;
		Death:
			BEAC A 1 A_FadeOut(0.015);
			Loop;
	}
}

class TargeterNew : Targeter replaces Targeter
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		Tag "Targetter: Will depict your range of accuracy visually";
		Powerup.Type "PowerTargeter";
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.Icon "I_TARG";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.PickupMessage "You picked up the \cbTargeter\c-.";
	}
	
	States
	{
		Spawn:
			TARG A -1;
			Stop;
	}
}

class ScannerNew : Scanner replaces Scanner
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Scanner: Shows location of things on the map";
		Inventory.Icon "I_PMUP";
		Powerup.Type "PowerScanner";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.PickupMessage "You picked up the \cbscanner\c-.";
	}
	
	States
	{
		Spawn:
			PMUP AB 6;
			Loop;
	}
}

// Medical Items
class MedPatchNew : AetheriusUsableInventory replaces MedPatch // : HealthPickup 2011
{
	default
	{
		+FLOORCLIP;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Medical Patch: Restores (8-12 + 8-12%) HP & 18.75-21.25% Stamina";
		Inventory.Icon "I_STMP";
		Inventory.PickupMessage "You picked up the \cdMed patch\c-.";
		AetheriusCustomInventory.Autouse 3;
		Inventory.PickupSound "misc/i_pkup";
	}
	
	States
	{
		Spawn:
			STMP A 0 NoDelay
			{
				if (bDROPPED) { }
				else
				{
					if (random(1,256) <= 64) { A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0); }
				}
			}
		Idle:
			STMP A -1;
			Stop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-8);
			fail;
	}
}

class MedicalKitNew : AetheriusUsableInventory replaces MedicalKit // HealthPickup 2012
{
	default
	{
		+FLOORCLIP;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Medical Kit: Restores (20-30 + 20-30%) HP & 45-55% Stamina";
		Inventory.Icon "I_MDKT";
		Inventory.PickupMessage "You picked up the \cdMedical kit\c-.";
		AetheriusCustomInventory.Autouse 3;
	}
	
	States
	{
		Spawn:
			MDKT A 0
			{
				if (bDROPPED) { }
				else
				{
					if (random(1,256) <= 64) { A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0); }
				}
			}
		Idle:
			MDKT A -1;
			Stop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-9);
			fail;
	}
}

class SurgeryKitNew : AetheriusUsableInventory replaces SurgeryKit // HealthPickup 83
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Surgery Kit: Fully restores all HP and gives 200% Stamina.";
		Inventory.Icon "I_FULL";
		Inventory.PickupMessage "You picked up the \cdSurgery Kit\c-.";
	}
	
	States
	{
		Spawn:
			FULL A 0 NoDelay
			{
				if (bDROPPED) { }
				else
				{
					if (random(1,256) <= 64) { A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,0); }
				}
			}
		Idle:
			FULL AB 35;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-10);
			fail;
	}
}


// MONEY :V
class CoinNew : Coin replaces Coin
{
	default
	{
		+DROPPED;
		+DONTGIB;
		+NOTDMATCH;
		+FLOORCLIP;
		Inventory.MaxAmount 0x7fffffff;
		+INVENTORY.INVBAR;
		+INVENTORY.KEEPDEPLETED;
		Tag "$TAG_COIN"; // "coin";
		Inventory.Icon "I_COIN";
		Inventory.PickupMessage "You picked up the \cfcoin\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			COIN A -1;
			Stop;
	}
}

// Spawns the 10 Gold pickup plus a possible few extra coins
class Gold10New : Gold10 replaces Gold10
{
	default
	{
		+DONTGIB;
		Inventory.Amount 10;
		Tag "$TAG_10GOLD"; // "10 gold"
		Inventory.PickupMessage "You picked up \cf10 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			CRED A 0 NoDelay
			{
				A_SpawnItemEx("Gold10Actual",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,64);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,64);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,128);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,128);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,192);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,192);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,252);
				A_SpawnItemEx("Coin",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,252);
			}
			Stop;
	}
}

// The proper "10 Gold" pickup
class Gold10Actual : Coin
{
	default
	{
		+DONTGIB;
		Inventory.Amount 10;
		Tag "$TAG_10GOLD"; // "10 gold";
		Inventory.PickupMessage "You picked up \cf10 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			CRED A -1;
			Stop;
	}
}

class Gold25New : Gold25 replaces Gold25
{
	default
	{
		+DONTGIB;
		Inventory.Amount 25;
		Tag "$TAG_25GOLD"; // "25 gold"
		Inventory.PickupMessage "You picked up \cf25 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			SACK A 0 NoDelay
			{
				A_SpawnItemEx("Gold25Actual",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("Gold10Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,112);
				A_SpawnItemEx("Gold10Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,224);
				A_SpawnItemEx("Gold10Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,240);
				A_SpawnItemEx("Gold10Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,254);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,32);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,64);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,96);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,128);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,160);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,192);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,224);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,252);
			}
			Stop;
	}
}

class Gold25Actual : Coin
{
	default
	{
		+DONTGIB;
		Inventory.Amount 25;
		Tag "$TAG_25GOLD"; // "25 gold"
		Inventory.PickupMessage "You picked up \cf25 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			SACK A -1;
			Stop;
	}
}

class Gold50New : Gold50 replaces Gold50
{
	default
	{
		+DONTGIB;
		Inventory.Amount 50;
		Tag "$TAG_50GOLD"; // "50 gold"
		Inventory.PickupMessage "You picked up \cf50 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			CHST A 0 NoDelay
			{
				A_SpawnItemEx("Gold50Actual",0,0,0,0,0,0,0,0,0);
				A_SpawnItemEx("Gold25Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,252);
				A_SpawnItemEx("Gold25Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,252);
				A_SpawnItemEx("Gold25Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,224);
				A_SpawnItemEx("Gold25Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,224);
				A_SpawnItemEx("Gold25Actual",random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),random(-3,3),0,0,160);
				A_SpawnItemEx("Gold10Actual",random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),0,0,252);
				A_SpawnItemEx("Gold10Actual",random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),0,0,252);
				A_SpawnItemEx("Gold10Actual",random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),0,0,224);
				A_SpawnItemEx("Gold10Actual",random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),0,0,224);
				A_SpawnItemEx("Gold10Actual",random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),random(-4,4),0,0,160);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,32);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,32);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,64);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,64);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,96);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,96);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,128);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,128);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,160);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,160);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,192);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,192);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,224);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,224);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,252);
				A_SpawnItemEx("Coin",random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),random(-5,5),0,0,252);
			}
			Stop;
	}
}

class Gold50Actual : Coin
{
	default
	{
		+DONTGIB;
		Inventory.Amount 50;
		Tag "$TAG_50GOLD"; // "50 gold";
		Inventory.PickupMessage "You picked up \cf50 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			CHST A -1;
			Stop;
	}
}

// Shop Displays
class BaseProp : AetheriusBaseZSC // Used for the basic properties of shop displays
{
	default
	{
		Height 16;
		Radius 16;
		+FLOORCLIP;
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A -1;
			Stop;
	}
}

class AssaultGunProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Assault Gun [Prop]";
	}
	
	States
	{
		Spawn:
			RIFL A -1;
			Stop;
	}
}

class AssaultGunStandingProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Assault Gun (Standing) [Prop]";
	}
	
	States
	{
		Spawn:
			RIFL B -1;
			Stop;
	}
}

class ClipOfBulletsProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Clip of Bullets [Prop]";
	}
	
	States
	{
		Spawn:
			BLIT A -1;
			Stop;
	}
}

class BoxOfBulletsProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Box of Bullets [Prop]";
	}
	
	States
	{
		Spawn:
			BBOX A -1;
			Stop;
	}
}

class AmmoSatchelProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Ammo Satchel [Prop]";
	}
	
	States
	{
		Spawn:
			BKPK A -1;
			Stop;
	}
}

class ElectricBoltsProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Electric Bolts [Prop]";
	}
	
	States
	{
		Spawn:
			XQRL A -1;
			Stop;
	}
}

class LeatherArmorProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Leather Armor [Prop]";
	}
	
	States
	{
		Spawn:
			ARM4 A -1;
			Stop;
	}
}

class MetalArmorProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Metal Armor [Prop]";
	}
	
	States
	{
		Spawn:
			ARM3 A -1;
			Stop;
	}
}

class EnvironmentalSuitProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Environmental Suit [Prop]";
	}
	
	States
	{
		Spawn:
			MASK A -1;
			Stop;
	}
}

class MedPatchProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Medical Patch [Prop]";
	}
	
	States
	{
		Spawn:
			STMP A -1;
			Stop;
	}
}

class MedicalKitProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Medical Kit [Prop]";
	}
	
	States
	{
		Spawn:
			MDKT A -1;
			Stop;
	}
}

class SurgeryKitProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Surgery Kit [Prop]";
	}
	
	States
	{
		Spawn:
			FULL AB 35;
			Loop;
	}
}

class MiniMissilesProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Mini Missiles [Prop]";
	}
	
	States
	{
		Spawn:
			MSSL A -1;
			Loop;
	}
}

class CrateOfMissilesProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Crate Of Missiles [Prop]";
	}
	
	States
	{
		Spawn:
			ROKT A -1;
			Loop;
	}
}

class EnergyPodProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Energy Pod [Prop]";
	}
	
	States
	{
		Spawn:
			BRY1 AB 6;
			Loop;
	}
}

class EnergyPackProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Energy Pack [Prop]";
	}
	
	States
	{
		Spawn:
			CPAC AB 6;
			Loop;
	}
}

class HEGrenadeRoundsProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "HE Grenade Rounds [Prop]";
	}
	
	States
	{
		Spawn:
			GRN1 A -1;
			Loop;
	}
}

class PhosphorusGrenadeRoundsProp : BaseProp
{
	default
	{
		//$NotAngled
		//$Color 11
		//$Category "DV-DS Props/Strife"
		Tag "Phosphorus Grenade Rounds [Prop]";
	}
	
	States
	{
		Spawn:
			GRN2 A -1;
			Loop;
	}
}

// Dummy Items
class BestEndingFlag : PlaceholderItem { }

// Special Give Items [dialogue Scripts]
class Dialogue500Gold : Coin 
{
	default
	{
		Inventory.GiveQuest 3;
		Inventory.Amount 500;
	}
}

// PROJECTILES
// General Bullet Tracers
class StrifeGenBulletTracer : AetheriusBulletTracerZSC
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(1,5) * 3));
		Damagetype "Bullet";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeGenBulletTracer2 : StrifeGenBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(3,15) * 3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeGenBulletTracerCrisis : StrifeGenBulletTracer
{
	default
	{
		DamageFunction ((Random(1,5) * 3) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
			CTAC A 0 bright A_GenerateCrisisParticle();
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			CTAC A 0 bright A_GenerateCrisisParticle();
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeGenBulletTracer2Crisis : StrifeGenBulletTracerCrisis
{
	default
	{
		DamageFunction ((Random(3,15) * 3) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
			CTAC A 0 bright A_GenerateCrisisParticle();
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			CTAC A 0 bright A_GenerateCrisisParticle();
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeGenBulletTracerTrail : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			Stop;
	}
}

// Reaver Tracer
class StrifeReaverBulletTracer : AetheriusBulletTracerZSC
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(1,8) * 3));
		Damagetype "Bullet";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.75;
		//decal "BulletChip";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeReaverBulletTracer2 : StrifeReaverBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(3,24) * 3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeReaverBulletTracerCrisis : StrifeGenBulletTracer
{
	default
	{
		DamageFunction ((Random(1,8) * 3) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
			CTAC A 0 bright A_GenerateCrisisParticle();
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			CTAC A 0 bright A_GenerateCrisisParticle();
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}

class StrifeReaverBulletTracer2Crisis : StrifeReaverBulletTracerCrisis
{
	default
	{
		DamageFunction ((Random(3,24) * 3) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
			CTAC A 0 bright A_GenerateCrisisParticle();
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			CTAC A 0 bright A_GenerateCrisisParticle();
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
   
class StrifeReaverBulletTracerTrail : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.75;
		RenderStyle "Add";
	}
	States
	{
		Spawn:
			CTAC A 2 bright;
			Stop;
	}
}

// Mauler Tracers
class StrifeMaulerTracer : AetheriusBulletTracerZSC
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(1,4) * 2));
		Damagetype "Disintegrate";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.5;
		//decal "BulletChip";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}

class StrifeMaulerTracer2 : StrifeMaulerTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(3,12) * 2));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}
   
class StrifeMaulerTracerCrisis : StrifeMaulerTracer
{
	default
	{
		DamageFunction ((Random(1,4) * 2) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
			GTAC A 0 bright A_GenerateCrisisParticle();
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			GTAC A 0 bright A_GenerateCrisisParticle();
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}

class StrifeMaulerTracer2Crisis : StrifeMaulerTracerCrisis
{
	default
	{
		DamageFunction ((Random(3,12) * 2) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
			GTAC A 0 bright A_GenerateCrisisParticle();
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			GTAC A 0 bright A_GenerateCrisisParticle();
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}

class StrifeMaulerTracerRetail : StrifeMaulerTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(1,5) * 3));
	}
}

class StrifeMaulerTracerRetail2 : StrifeMaulerTracerRetail
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(3,15) * 3));
	}
}

class StrifeMaulerTracerRetailCrisis : StrifeMaulerTracer
{
	default
	{
		DamageFunction ((Random(1,5) * 3) * CrisisMultiplier);
	}
}

class StrifeMaulerTracerRetail2Crisis : StrifeMaulerTracerRetailCrisis
{
	default
	{
		DamageFunction ((Random(3,15) * 3) * CrisisMultiplier);
	}
}

class StrifeMaulerTracerTrail : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			GTAC A 2 bright;
			Stop;
	}
}
class FlightToken : Inventory //Used to keep the Dark Inquisitor in the air even when in pain or attacking.
{
	default
	{
		Inventory.MaxAmount 1;
	}
}

class EMPGrenade : AetheriusProjectileZSC
{
	int user_boost;
	int user_boost2;
	default
	{
		Tag "EMP Grenade";
		DamageFunction (10 * random(1,8));
		Speed 30;
		Radius 5;
		Height 5;
		Scale 0.35;
		RenderStyle "Add";
		Damagetype "Thunder";
		Gravity 0.25;
		PROJECTILE;
		+NODAMAGETHRUST;
		-NOGRAVITY;
		+STRIFEDAMAGE;
		DeathSound "darkinquisitor/empdie";
	}
	
	States
	{
		Spawn:
			TEFX ABCDEFGHIJKLMNOPQRST 1 Bright 
			{
				A_SpawnItemEx("EMPTrail",0,0,0,1,0,random(-1,3),random(1,360));
			}
			Loop;
		Death:
			TXP1 A 0 Bright
			{
				A_StartSound("darkinquisitor/empdie");
				Gravity = 1.00;
				bNOGRAVITY = true;
				bFORCERADIUSDMG = true;
				bNOINTERACTION = true;
				A_Explode(15,40,0);
				user_boost = 48;
				user_boost2 = 24;
			}
			TXP1 A 1 Bright
			{
				A_Explode(15,user_boost,0,0,user_boost2);
				A_SetScale(0.4);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 BCDEFGH 1 Bright
			{
				A_SetScale(scale.x+0.08);
				A_Explode(15,user_boost,0,0,user_boost2);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 I 1 Bright
			{
				A_SetScale(scale.x+0.08);
				A_Explode(15,user_boost,0,0,user_boost2);
				A_SetTranslucent(0.96);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 JKLMNOP 1 Bright
			{
				A_SetScale(1.12);
				A_FadeOut(alpha-0.12);
				A_Explode(15,user_boost,0,0,user_boost2);
				user_boost += 8;
				user_boost2 += 4;
			}
			Stop;
	}
}
class EMPGrenadeCrisis : EMPGrenade
{
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier);
		Speed 30;
		Radius 5;
		Height 5;
		Scale 0.35;
		RenderStyle "Add";
		Damagetype "Thunder";
		Gravity 0.25;
		PROJECTILE;
		+NODAMAGETHRUST;
		-NOGRAVITY;
		+STRIFEDAMAGE;
		DeathSound "darkinquisitor/empdie";
	}
	
	States
	{
		Spawn:
			TEFX ABCDEFGHIJKLMNOPQRST 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("EMPTrail",0,0,0,1,0,random(-1,3),random(1,360));
			}
			Loop;
		Death:
			TXP1 A 0 Bright
			{
				A_StartSound("darkinquisitor/empdie");
				Gravity = 1.00;
				bNOGRAVITY = true;
				bFORCERADIUSDMG = true;
				bNOINTERACTION = true;
				A_Explode(15*CrisisMultiplier,40,0);
				user_boost = 48;
				user_boost2 = 24;
			}
			TXP1 A 1 Bright
			{
				A_Explode(15*CrisisMultiplier,user_boost,0,0,user_boost2);
				A_SetScale(0.4);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 BCDEFGH 1 Bright
			{
				A_SetScale(scale.x+0.08);
				A_Explode(15*CrisisMultiplier,user_boost,0,0,user_boost2);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 I 1 Bright
			{
				A_SetScale(scale.x+0.08);
				A_Explode(15*CrisisMultiplier,user_boost,0,0,user_boost2);
				A_SetTranslucent(0.96);
				user_boost += 8;
				user_boost2 += 4;
			}
			TXP1 JKLMNOP 1 Bright
			{
				A_SetScale(1.12);
				A_Explode(15*CrisisMultiplier,user_boost,0,0,user_boost2);
				A_FadeOut(alpha-0.12);
				user_boost += 8;
				user_boost2 += 4;
			}
			Stop;
	}
}

class DarkInquisitorGibber : AetheriusBaseZSC
{
	default
	{
		radius 20;
		height 20;
		+NOINTERACTION;
	}
	
	states
	{
		Spawn:
			NULL A 0 A_Gravity();
			NULL A 0;
			NULL A 0 A_StartSound("darkinquisitor/gibbage");
			NULL A 1 A_SpawnItemEx ("Shrapnel1", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel2", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel3", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel3", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel2", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			NULL A 1 A_SpawnItemEx ("Shrapnel1", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			Stop;
	}
}

class Shrapnel1 : AetheriusProjectileZSC
{
	default
	{
		Tag "Shrapnel";
		BounceType "Doom";
		PROJECTILE;
		-NOGRAVITY;
		+NOBLOCKMAP;
		+CANNOTPUSH;
		-NOTELEPORT;
		-SOLID;
		+GRENADETRAIL;
		Radius 2;
		Damage 4;
		mass 5;
		bouncefactor 0.5;
		SeeSound "darkinquisitor/shrapnel";
		Speed 25;
	}
	
	States
	{
		Spawn:
			SHRP L 0;
			SHRP L 0 A_Jump(64,"Alt");
			SHRP L 0 ThrustThingZ (0, (Random (20, 100)), 0, 1);
			goto See;
		Alt:
			SHRP M 0 ThrustThingZ (0, (Random (40, 130)), 0, 1);
			Stop;
		See:
			SHRP L 5;
			SHRP L 5 ThrustThingZ(0,(Random (6, 20)),1,1);
			SHRP L 5;
			SHRP L 5;
			Loop;
		Death:
			SHRP L 0;
			SHRP L 0;
			SHRP L 0;
			SHRP L 70;
			Stop;
	}
}

class Shrapnel2 : AetheriusProjectileZSC
{
	default
	{
		Tag "Shrapnel";
		BounceType "Doom";
		PROJECTILE;
		-NOGRAVITY;
		+NOBLOCKMAP;
		+CANNOTPUSH;
		-NOTELEPORT;
		-SOLID;
		+GRENADETRAIL;
		Radius 2;
		Damage 4;
		mass 5;
		bouncefactor 0.4;
		SeeSound "darkinquisitor/shrapnel";
		Speed 20;
	}
	
	States
	{
		Spawn:
			SHRP M 0;
			SHRP M 0 A_Jump(64,"Alt");
			SHRP M 0 ThrustThingZ (0, (Random (20, 100)), 0, 1);
			goto See;
		Alt:
			SHRP N 0 ThrustThingZ (0, (Random (40, 130)), 0, 1);
			Stop;
		See:
			SHRP M 5;
			SHRP M 5 ThrustThingZ(0,(Random (6, 20)),1,1);
			SHRP M 5;
			SHRP M 5;
			Loop;
		Death:
			SHRP M 0;
			SHRP M 0;
			SHRP M 0;
			SHRP M 70;
			Stop;
	}
}

class Shrapnel3 : AetheriusProjectileZSC
{
	default
	{
		Tag "Shrapnel";
		BounceType "Doom";
		PROJECTILE;
		-NOGRAVITY;
		+NOBLOCKMAP;
		+CANNOTPUSH;
		-NOTELEPORT;
		-SOLID;
		+GRENADETRAIL;
		Radius 2;
		Damage 4;
		mass 5;
		bouncefactor 0.6;
		SeeSound "darkinquisitor/shrapnel";
		Speed 23;
	}
	
	States
	{
		Spawn:
			SHRP N 0;
			SHRP N 0 A_Jump(64,"Alt");
			SHRP N 0 ThrustThingZ (0, (Random (20, 100)), 0, 1);
			goto See;
		Alt:
			SHRP L 0 ThrustThingZ (0, (Random (40, 130)), 0, 1);
			Stop;
		See:
			SHRP N 5;
			SHRP N 5 ThrustThingZ(0,(Random (6, 20)),1,1);
			SHRP N 5;
			SHRP N 5;
			Loop;
		Death:
			SHRP N 0;
			SHRP N 0;
			SHRP N 0;
			SHRP N 70;
			Stop;
	}
}

class InquisitorDeathExplosion : AetheriusProjectileZSC
{
	default
	{
		Tag "Explosion";
		radius 10;
		height 12;
		DamageFunction (0);
		speed 0;
		RenderStyle "Add";
		Alpha 0.90;
		seesound "darkinquisitor/deathexplosion";
		PROJECTILE;
		+NOCLIP;
		+DONTSPLASH;
		+SPAWNSOUNDSOURCE;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 A_SpawnItemEx ("Shrapnel1", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			TNT1 A 0 A_SpawnItemEx ("Shrapnel2", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			TNT1 A 0 A_SpawnItemEx ("Shrapnel3", 0, 0, random(0,42), random(2,6), random(2,6), 0, random(0,360), 160);
			R045 MNOPQ 3 bright A_Explode();
			Stop;
	}
}

class DarkInquisitorBigExplosion : AetheriusProjectileZSC
{
	default
	{
		Tag "Explosion";
		Radius 2;
		Height 2;
		Damage 0;
		+NOCLIP
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.75;
		Scale 2.0;
		SeeSound "darkinquisitor/bigdeathexpl";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_SpawnItemEx("ShadowVaporSpawner",0,0,0,0,0,0,0,32);
			GRNE A 3 Bright A_Explode (128,256,0);
			GRNE B 3 Bright;
			GRNE CDEFGHIJKLMN 3 Bright;
			Stop;
	}
}

class EMPTrail : AetheriusProjectileZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+Missile;
		+NoBlockMap;
		+NoGravity;
		+DontSplash;
		RenderStyle "Add";
		Scale 0.50;
	}
	
	States
	{
		Spawn:
			ZAPR ABCDEF 2 Bright A_FadeOut(0.07);
			Loop;
	}
}

class DarkMatterBall : AetheriusProjectileZSC
{
	default
	{
		Tag "Dark Matter Ball";
		DamageFunction (35 * random(1,4));
		Radius 11;
		Height 8;
		Speed 32;
		Scale 0.5;
		Projectile;
		+RANDOMIZE;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+STRIFEDAMAGE;
		RenderStyle "Translucent";
		Alpha 0.625;
		DamageType "Disintegrate";
		DeathSound "darkinquisitor/darkmatterdie";
	}
	
	States
	{
		Spawn:
			DMGB AAABBBCCC 1 Bright
			{
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("ShadowVaporSpawner",0,0,0,0,0,0,0,32);
			TNT1 A 0 A_Explode(150,275,0);
			TNT1 A 15 Radius_Quake(5,15,0,20,0);
			Stop;
	}
}
class DarkMatterBallCrisis : DarkMatterBall
{
	default
	{
		DamageFunction ((35 * random(1,4)) * CrisisMultiplier);
		Radius 11;
		Height 8;
		Speed 32;
		Scale 0.5;
		Projectile;
		+RANDOMIZE;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+STRIFEDAMAGE;
		RenderStyle "Translucent";
		Alpha 0.625;
		DamageType "Disintegrate";
		DeathSound "darkinquisitor/darkmatterdie";
	}
	
	States
	{
		Spawn:
			DMGB AAABBBCCC 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
				A_SpawnItemEx("DarkMatterSpark",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,32,0);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("ShadowVaporSpawner",0,0,0,0,0,0,0,32);
			TNT1 A 0 A_Explode(150,275,0);
			TNT1 A 15 Radius_Quake(5,15,0,20,0);
			Stop;
	}
}

class ShadowVaporSpawner : AetheriusBaseZSC
{
	default
	{
		+NOINTERACTION;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			NULL A 0;
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("ShadowVapor",0,0,0,random(4,-4),random(4,-4),random(4,-4),random(0,359),32);
			PLAY A 2;
			PLAY BCDEF 4;
			Stop;
	}
}

class ShadowVapor : AetheriusProjectileZSC
{
	default
	{
		PROJECTILE;
		+RIPPER;
		+RANDOMIZE;
		Damagetype "Ice";
		DamageFunction (random(1,10));
		Speed 0;
		Radius 2;
		Height 2;
		RenderStyle "Translucent";
		Scale 0.65;
		Alpha 0.4;
		BounceType "Doom";
	}
	
	States
	{
		Spawn:
			VPXS MNOPQRSTUVWXYZ 1 Bright A_FadeOut(0.01);
			VPXZ ABC 1 A_FadeOut(0.01);
			Stop;
	}
}

class DarkMatterSpark : AetheriusProjectileZSC
{
	default
	{
		RenderStyle "Translucent";
		Scale 0.75;
		Alpha 0.5;
		PROJECTILE;
	}
	
	States
	{
		Spawn:
			VPXS ABCDEFGHIJKL 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
// Crusader
class FlameMissileNew : AetheriusProjectileZSC 
{
	default
	{
		Tag "Flamethrower";
		Speed 15;
		Height 11;
		Radius 8;
		Mass 10;
		Damage 4;
		DamageType "Fire";
		ReactionTime 8;
		Projectile;
		-NOGRAVITY;
		+STRIFEDAMAGE;
		MaxStepHeight 4;
		RenderStyle "Add";
		SeeSound "weapons/flamethrower";
		Obituary "$OB_MPFLAMETHROWER"; // "%o was barbecued by %k."
	}
	
	States
	{
		Spawn:
			FRBL AB 3 Bright;
			FRBL C 3 Bright A_Countdown();
			Loop;
		Death:
			FRBL D 5 Bright A_FlameDie();
			FRBL EFGHI 5 Bright;
			Stop;
	}
}

class FastFlameMissileNew : FlameMissileNew replaces FastFlameMissile
{
	default
	{
		Tag "Flamethrower";
		DamageFunction (1 * random(1,4));
		DamageType "Fire";
		Mass 50;
		Speed 35;
	}
}
class FastFlameMissileCrisis : FastFlameMissileNew
{
	default
	{
		DamageFunction (1 * random(1,4) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FRBL AB 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			FRBL C 3 Bright 
			{
				A_Countdown();
			}
			Loop;
		Death:
			FRBL D 5 Bright A_FlameDie();
			FRBL EFGHI 5 Bright;
			Stop;
	}
}

class CrusaderMissileNew : AetheriusProjectileZSC replaces CrusaderMissile
{
	default
	{
		Tag "Mini Missile";
		DamageFunction (7 * random(1,4));
		Speed 20;
		Radius 10;
		Height 14;
		Projectile;
		+STRIFEDAMAGE;
		MaxStepHeight 4;
		SeeSound "crusader/misl";
		DeathSound "crusader/mislx";
	}
	
	States
	{
		Spawn:
			MICR A 0 Bright A_RocketInFlight();
			MICR AAA 2 Bright
			{
			}
			Loop;
		Death:
			SMIS A 0 Bright A_SetTranslucent(1, 1);
			SMIS A 5 Bright;
			SMIS B 5 Bright;
			SMIS C 4 Bright;
			SMIS DEFG 2 Bright;
			Stop;
	}
}
class CrusaderMissileCrisis : CrusaderMissileNew
{
	default
	{
		DamageFunction ((7 * random(1,4)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			MICR A 0 Bright A_RocketInFlight();
			MICR AAA 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			SMIS A 0 Bright A_SetTranslucent(1, 1);
			SMIS A 5 Bright;
			SMIS B 5 Bright;
			SMIS C 4 Bright;
			SMIS DEFG 2 Bright;
			Stop;
	}
}

// Sentinel/Stalker
class SentinelFX1New : AetheriusProjectileZSC
{
	default
	{
		Tag "Laser";
		Speed 40;
		Radius 10;
		Height 8;
		Damage 0;
		DamageType "Disintegrate";
		Projectile;
		+STRIFEDAMAGE;
		MaxStepHeight 4;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			SHT1 AB 4;
			Loop;
		Death:
			POW1 J 4;
			Stop;
	}
}

class Sentinel2FX1New : SentinelFX1New
{
	default
	{
		Tag "Laser";
		SeeSound "sentinel/plasma";
		DamageFunction (1 * random(1,4));
	}
	
	States
	{
		Spawn:
			SHT1 AB 4
			{
			}
			Loop;
		Death:
			POW1 FGHI 4;
			Goto Super::Death;
	}
}
class Sentinel2FX1Crisis : Sentinel2FX1New
{
	default
	{
		DamageFunction ((1 * random(1,4)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			SHT1 AB 4
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			POW1 FGHI 4;
			Goto Super::Death;
	}
}

class Sentinel2FX2New : Sentinel2FX1New { default { Damage 3; } }
class Sentinel2FX3New : Sentinel2FX1New { default { Damage 6; } }
class Sentinel2FX4New : Sentinel2FX1New { default { Damage 10; } }
class Sentinel2FX5New : Sentinel2FX1New { default { Damage 15; } }
class Sentinel2FX2Crisis : Sentinel2FX1Crisis { default { DamageFunction ((3 * random(1,4)) * CrisisMultiplier); } }
class Sentinel2FX3Crisis : Sentinel2FX1Crisis { default { DamageFunction ((6 * random(1,4)) * CrisisMultiplier); } }
class Sentinel2FX4Crisis : Sentinel2FX1Crisis { default { DamageFunction ((10 * random(1,4)) * CrisisMultiplier); } }
class Sentinel2FX5Crisis : Sentinel2FX1Crisis { default { DamageFunction ((15 * random(1,4)) * CrisisMultiplier); } }

// Inquisitor
class InquisitorShotNew : AetheriusProjectileZSC
{
	default
	{
		Tag "shot";
		ReactionTime 15;
		Speed 25;
		Radius 13;
		Height 13;
		Mass 15;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+STRIFEDAMAGE;
		MaxStepHeight 4;
		SeeSound "inquisitor/attack";
		DeathSound "inquisitor/atkexplode";
	}
	
	States
	{
		Spawn:
			UBAM AB 3
			{
				A_Countdown();
			}
			Loop;
		Death:
			BNG2 A 0 Bright A_SetTranslucent(1, 1);
			BNG2 A 4 Bright A_Explode(192, 192, 1, 1);
			BNG2 B 4 Bright;
			BNG2 C 4 Bright;
			BNG2 D 4 Bright;
			BNG2 E 4 Bright;
			BNG2 F 4 Bright;
			BNG2 G 4 Bright;
			BNG2 H 4 Bright;
			BNG2 I 4 Bright;
			Stop;
	}
}
class InquisitorShotCrisis : InquisitorShotNew
{
	States
	{
		Spawn:
			UBAM AB 3
			{
				A_GenerateCrisisParticle();
				A_Countdown();
			}
			Loop;
		Death:
			BNG2 A 0 Bright A_SetTranslucent(1, 1);
			BNG2 A 4 Bright A_Explode(192*CrisisMultiplier, 192, 1, 1);
			BNG2 B 4 Bright;
			BNG2 C 4 Bright;
			BNG2 D 4 Bright;
			BNG2 E 4 Bright;
			BNG2 F 4 Bright;
			BNG2 G 4 Bright;
			BNG2 H 4 Bright;
			BNG2 I 4 Bright;
			Stop;
	}
}

// Bishop
class BishopMissileNew : AetheriusProjectileZSC replaces BishopMissile
{
	default
	{
		Tag "Missile";
		DamageFunction (10 * random(1,4));
		Speed 20;
		Radius 10;
		Height 14;
		Projectile;
		+SEEKERMISSILE;
		+STRIFEDAMAGE;
		MaxStepHeight 4;
		SeeSound "bishop/misl";
		DeathSound "bishop/mislx";
	}
	
	States
	{
		Spawn:
			MISS A 4 Bright A_RocketInFlight();
			MISS B 3 Bright A_Tracer2();
			Loop;
		Death:
			SMIS A 0 Bright A_SetTranslucent(1, 1);
			SMIS A 0 Bright; // State left for savegame compatibility
			SMIS A 5 Bright A_Explode(64, 64, 1, 1);
			SMIS B 5 Bright;
			SMIS C 4 Bright;
			SMIS DEFG 2 Bright;
			Stop;
	}
}
class BishopMissileCrisis : BishopMissileNew
{
	default
	{
		DamageFunction ((10 * random(1,4)) * CrisisMultiplier);
		Speed 20;
		Radius 10;
		Height 14;
		Projectile;
		+SEEKERMISSILE;
		+STRIFEDAMAGE;
		MaxStepHeight 4;
		SeeSound "bishop/misl";
		DeathSound "bishop/mislx";
	}
	
	States
	{
		Spawn:
			MISS A 4 Bright 
			{
				A_GenerateCrisisParticle();
				A_RocketInFlight();
			}
			MISS B 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_Tracer2();
			}
			Loop;
		Death:
			SMIS A 0 Bright A_SetTranslucent(1, 1);
			SMIS A 0 Bright; // State left for savegame compatibility
			SMIS A 5 Bright A_Explode(64*CrisisMultiplier, 64, 1, 1);
			SMIS B 5 Bright;
			SMIS C 4 Bright;
			SMIS DEFG 2 Bright;
			Stop;
	}
}

// LoreMaster
class LoreShotNew : LoreShotBase
{
	default
	{
		Tag "Hookshot";
		DamageFunction (2 * random(1,4));
	}
}
class LoreShotCrisis : LoreShotNew
{
	default
	{
		DamageFunction ((2 * random(1,4)) * CrisisMultiplier);
	}
	States
	{
		Spawn:
			OCLW A 2 
			{
				A_GenerateCrisisParticle();
				A_LoremasterChain();
			}
			Loop;
		Death:
			OCLW A 6;
			Stop;
	}
}

