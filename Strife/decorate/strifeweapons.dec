// Crossbow Projectiles
ACTOR ElectricBoltNew : ElectricBolt replaces ElectricBolt
{
  Speed 30
  Radius 10
  Height 10
  Damage (ACS_NamedExecuteWithResult("GetPlayerATKDMG",25)) // 50
  Projectile
  +STRIFEDAMAGE
  +NOBLOCKMAP
  +NOGRAVITY
  +DROPOFF
  DamageType "Thunder"
  MaxStepHeight 4
  SeeSound "misc/swish"
  ActiveSound "misc/swish"
  DeathSound "weapons/xbowhit"
  Obituary "$OB_MPELECTRICBOLT" // "%o got bolted to the wall by %k."
  States
  {
  Spawn:
    AROW A 0 NoDelay
  Idle:
    AROW A 10 A_LoopActiveSound
    Loop
  Death:
    ZAP1 A 3 // A_AlertMonsters
    ZAP1 BCDEFE 3
    ZAP1 DCB 2
    ZAP1 A 1
    Stop
  }
}

ACTOR PoisonBoltNew : PoisonBolt replaces PoisonBolt
{
  Speed 30
  Radius 10
  Height 10
  Damage (ACS_NamedExecuteWithResult("GetPlayerATKDMG",26)) // 50
  Projectile
  +STRIFEDAMAGE
  DamageType "PoisonBolt"
  MaxStepHeight 4
  SeeSound "misc/swish"
  ActiveSound "misc/swish"
  Obituary "$OB_MPPOISONBOLT" // "%o recieved a lethal dose of %k's wrath."
  States
  {
  Spawn:
    ARWP A 0 NoDelay
  Idle:
    ARWP A 10 A_LoopActiveSound
    Loop
  Death:
    AROW A 1
    Stop
  }
}

// Crossbow
ACTOR StrifeCrossbowNew : StrifeCrossbow replaces StrifeCrossbow
{
  ConversationID 194
  Weapon.SisterWeapon "StrifeCrossbow2New"
  States
  {
  User1:
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("UseStaminaAttack",ACS_NamedExecuteWithResult("GetKickStaminaUse",0),2) == 0, "Ready")
	TNT1 A 0 
	{
	 A_ClearFlash;
	 if (random(1,256) >= 253)
	 {
	  if (CountInv("PlayingStrife",AAPTR_PLAYER1) > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
	  else
	  {
	   A_AlertMonsters; // Sometimes a swing will be enough to wake up all monsters in the area.
	  }
	 }
	 ACS_NamedExecuteAlways("StartTensionCountDown");
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("KickAttackDEFLvl2",1); } else { A_GiveInventory("KickAttackDEFLvl1",1); }
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("MartArtsMaster2",1); }
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) == 4) { A_GiveInventory("MartArtsMaster1",1); }
	 if (random(1,256) > 64) { A_GiveInventory("KickCritBonus1",1,AAPTR_PLAYER1); } else { A_GiveInventory("KickCritBonus2",1,AAPTR_PLAYER1); }
	}
    FKIC A 1 Offset(48,46)
    FKIC A 1 Offset(48,44)
    FKIC A 1 Offset(48,42) { if (random(1,256) >= 128) { A_PlaySound("FloraKiaiFull",CHAN_VOICE); } }
    FKIC A 1 Offset(48,40)
    FKIC B 1 Offset(24,38)
    FKIC B 1 Offset(24,36)
    FKIC B 1 Offset(24,34)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
	 }
	}
    FKIC B 1 Offset(24,32)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
	 }
	}
    FKIC B 1 Offset(24,34)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
	 }
	}
    FKIC B 1 Offset(24,36)
    FKIC B 1 Offset(24,38)
    FKIC A 1 Offset(48,40)
    FKIC A 1 Offset(48,42)
    FKIC A 1 Offset(48,44)
    FKIC A 1 Offset(48,46)
	{
	 A_TakeInventory("KickCritBonus1",9999);
	 A_TakeInventory("KickCritBonus2",9999);
	 A_TakeInventory("KickAttackDEFLvl1",9999);
	 A_TakeInventory("KickAttackDEFLvl2",9999);
	 A_TakeInventory("MartArtsMaster1",9999);
	 A_TakeInventory("MartArtsMaster2",9999);
	}
    goto Ready
  Spawn:
    CBOW A -1
    Stop
  Ready:
    XBOW A 0 A_ShowElectricFlash
    XBOW A 1 A_WeaponReady(WRF_ALLOWUSER1)
    Wait
  Deselect:
    XBOW A 1 A_Lower
    Loop
  Select:
    XBOW A 1 A_Raise
    Loop
  Fire:
    XBOW A 3 A_ClearFlash
    XBOW B 6
	{
	 ACS_NamedExecuteAlways("StartTensionCountDown");
	 A_FireArrow("ElectricBoltNew");
	}
    XBOW C 4
    XBOW D 6
    XBOW E 3
    XBOW F 5
    XBOW G 0 A_ShowElectricFlash
    XBOW G 5 A_CheckReload
    Goto Ready+1
  Flash:
    XBOW KLM 5
    Loop
  }
}

ACTOR StrifeCrossbow2New : StrifeCrossbow2 replaces StrifeCrossbow2
{
  Weapon.SisterWeapon "StrifeCrossbowNew"
  States
  {
  User1:
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("UseStaminaAttack",ACS_NamedExecuteWithResult("GetKickStaminaUse",0),2) == 0, "Ready")
	TNT1 A 0 
	{
	 if (random(1,256) >= 253)
	 {
	  if (CountInv("PlayingStrife",AAPTR_PLAYER1) > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
	  else
	  {
	   A_AlertMonsters; // Sometimes a swing will be enough to wake up all monsters in the area.
	  }
	 }
	 ACS_NamedExecuteAlways("StartTensionCountDown");
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("KickAttackDEFLvl2",1); } else { A_GiveInventory("KickAttackDEFLvl1",1); }
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("MartArtsMaster2",1); }
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) == 4) { A_GiveInventory("MartArtsMaster1",1); }
	 if (random(1,256) > 64) { A_GiveInventory("KickCritBonus1",1,AAPTR_PLAYER1); } else { A_GiveInventory("KickCritBonus2",1,AAPTR_PLAYER1); }
	}
    FKIC A 1 Offset(48,46)
    FKIC A 1 Offset(48,44)
    FKIC A 1 Offset(48,42) { if (random(1,256) >= 128) { A_PlaySound("FloraKiaiFull",CHAN_VOICE); } }
    FKIC A 1 Offset(48,40)
    FKIC B 1 Offset(24,38)
    FKIC B 1 Offset(24,36)
    FKIC B 1 Offset(24,34)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
	 }
	}
    FKIC B 1 Offset(24,32)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
	 }
	}
    FKIC B 1 Offset(24,34)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
	 }
	}
    FKIC B 1 Offset(24,36)
    FKIC B 1 Offset(24,38)
    FKIC A 1 Offset(48,40)
    FKIC A 1 Offset(48,42)
    FKIC A 1 Offset(48,44)
    FKIC A 1 Offset(48,46)
	{
	 A_TakeInventory("KickCritBonus1",9999);
	 A_TakeInventory("KickCritBonus2",9999);
	 A_TakeInventory("KickAttackDEFLvl1",9999);
	 A_TakeInventory("KickAttackDEFLvl2",9999);
	 A_TakeInventory("MartArtsMaster1",9999);
	 A_TakeInventory("MartArtsMaster2",9999);
	}
    goto Ready
  Ready:
    XBOW H 1 A_WeaponReady(WRF_ALLOWUSER1)
    Loop
  Deselect:
    XBOW H 1 A_Lower
    Loop
  Select:
    XBOW H 1 A_Raise
    Loop
  Fire:
    XBOW H 3
    XBOW B 6 
	{
	 ACS_NamedExecuteAlways("StartTensionCountDown");
	 A_FireArrow("PoisonBoltNew");
	}
    XBOW C 4
    XBOW D 6
    XBOW E 3
    XBOW I 5
    XBOW J 5 A_CheckReload
    Goto Ready
  Flash:
    Stop
  }
}

// Bullet Clip
ACTOR ClipOfBulletsNew : ClipOfBullets replaces ClipOfBullets
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 1)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 48)
	 {
      A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    BLIT A -1
    Stop
  }
}

// Box of Bullets
ACTOR BoxOfBulletsNew : BoxOfBullets replaces BoxOfBullets
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 3)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 144)
	 {
      A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
	 }
     A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    BBOX A -1
    Stop
  }
}

// Assault Gun
ACTOR AssaultGunNew : AssaultGun replaces AssaultGun
{
  ConversationID 188
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 32)
	 {
      A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 16)
	 {
      A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 4)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
  Idle:
    RIFL A -1
    Stop
  Ready:
    RIFG A 1 A_WeaponReady
    Loop
  Deselect:
    RIFG B 1 A_Lower
    Loop
  Select:
    RIFG A 1 A_Raise
    Loop
  Fire:
    RIFF AB 3 A_FireAssaultGun
    RIFG D 3 A_FireAssaultGun
    RIFG C 0 A_ReFire
    RIFG B 2 A_Light0
    Goto Ready
  }
}

ACTOR AssaultGunStandingNew : AssaultGunStanding replaces AssaultGunStanding
{
  ConversationID 189
  DropItem "AssaultGunNew"
  Inventory.PickupMessage "$TXT_ASSAULTGUN" // "You picked up the assault gun."
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 32)
	 {
      A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 16)
	 {
      A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 4)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
  Idle:
    RIFL B -1
    Stop
  }
}

// Mini Missiles
ACTOR MiniMissilesNew : MiniMissiles replaces MiniMissiles
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 1)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 48)
	 {
      A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    MSSL A -1
    Stop
  }
}

// Crate Of Missiles
ACTOR CrateOfMissilesNew : CrateOfMissiles replaces CrateOfMissiles
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 3)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 144)
	 {
      A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
	 }
     A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    ROKT A -1
    Stop
  }
}

// Mini Missile Launcher
ACTOR MiniMissileLauncherNew : MiniMissileLauncher replaces MiniMissileLauncher
{
  ConversationID 192
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 48)
	 {
      A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 24)
	 {
      A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 6)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
  Idle:
    MMSL A -1
    Stop
  Ready:
    MMIS A 1 A_WeaponReady
    Loop
  Deselect:
    MMIS A 1 A_Lower
    Loop
  Select:
    MMIS A 1 A_Raise
    Loop
  Fire:
    MMIS A 4 A_FireMiniMissile
    MMIS B 4 A_Light1
    MMIS C 5 Bright
    MMIS D 2 Bright A_Light2
    MMIS E 2 Bright
    MMIS F 2 Bright A_Light0
    MMIS F 0 A_ReFire
    Goto Ready
  }
}

// Flamethrower
ACTOR FlameThrowerNew : FlameThrower replaces FlameThrower
{
  ConversationID 190
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 64)
	 {
      A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 32)
	 {
      A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 8)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
  Idle:
    FLAM A -1
    Stop
  Ready:
    FLMT AB 3 A_WeaponReady
    Loop
  Deselect:
    FLMT A 1 A_Lower
    Loop
  Select:
    FLMT A 1 A_Raise
    Loop
  Fire:
    FLMF A 2 A_FireFlamer
    FLMF B 3 A_ReFire
    Goto Ready
  }
}

// HE Grenade Rounds
ACTOR HEGrenadeRoundsNew : HEGrenadeRounds replaces HEGrenadeRounds
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    MSSL A -1
    Stop
  }
}

// Phosphorus Grenades
ACTOR PhosphorusGrenadeRoundsNew : PhosphorusGrenadeRounds replaces PhosphorusGrenadeRounds
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
     A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    ROKT A -1
    Stop
  }
}

// Grenade Launcher
ACTOR StrifeGrenadeLauncherNew : StrifeGrenadeLauncher replaces StrifeGrenadeLauncher
{
  ConversationID 195
  Weapon.AmmoType1 "HEGrenadeRounds"
  Weapon.SisterWeapon "StrifeGrenadeLauncher2New"
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
  Idle:
    GRND A -1
    Stop
  Ready:
    GREN A 1 A_WeaponReady
    Loop
  Deselect:
    GREN A 1 A_Lower
    Loop
  Select:
    GREN A 1 A_Raise
    Loop
  Fire:
    GREN A 5 A_FireGrenade("HEGrenade", -90, "Flash")
    GREN B 10
    GREN A 5 A_FireGrenade("HEGrenade", 90, "Flash2")
    GREN C 10
    GREN A 0 A_ReFire
    Goto Ready
  Flash:
    GREF A 5 Bright A_Light1
    Goto LightDone
  Flash2:
    GREF B 5 Bright A_Light2
    Goto LightDone
  }
}
ACTOR StrifeGrenadeLauncher2New : StrifeGrenadeLauncher2 replaces StrifeGrenadeLauncher2
{
  Weapon.AmmoType1 "PhosphorusGrenadeRounds"
  Weapon.SisterWeapon "StrifeGrenadeLauncherNew"
  States
  {
  Ready:
    GREN D 1 A_WeaponReady
    Loop
  Deselect:
    GREN D 1 A_Lower
    Loop
  Select:
    GREN D 1 A_Raise
    Loop
  Fire:
    GREN D 5 A_FireGrenade("PhosphorousGrenade", -90, "Flash")
    GREN E 10
    GREN D 5 A_FireGrenade("PhosphorousGrenade", 90, "Flash2")
    GREN F 10
    GREN A 0 A_ReFire
    Goto Ready
  Flash:
    GREF C 5 Bright A_Light1
    Goto LightDone
  Flash2:
    GREF D 5 Bright A_Light2
    Goto LightDone
  }
}

// Energy Pod
ACTOR EnergyPodNew : EnergyPod replaces EnergyPod
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 5)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 240)
	 {
      A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    MSSL A -1
    Stop
  }
}

// Energy Pack
ACTOR EnergyPackNew : EnergyPack replaces EnergyPack
{
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 15)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 240)
	 {
      A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,0,0);
	 }
     A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
   Idle:
    ROKT A -1
    Stop
  }
}

// Mauler [both modes]
ACTOR MaulerNew : Mauler replaces Mauler
{
  ConversationID 193
  Weapon.SisterWeapon "Mauler2New"
  States
  {
   FloraDetected: // bonus will be turned into something else
    TNT1 A 0
	{
	 if (random(1,256) <= 256)
	 {
      A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 64)
	 {
      A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
	 }
	 if (random(1,256) <= 16)
	 {
      A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
	 }
	 A_FadeOut(1.0);
	}
    Loop

   Spawn:
    TNT1 A 0
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
    TNT1 A 1 ACS_NamedExecuteAlways("ArmorBonusCheckCharacter",0,0,0,0)
    TNT1 A 0 A_JumpIf(args[4] == 2,"FloraDetected")
  Idle:
    TRPD A -1
    Stop
  Ready:
    MAUL FGHA 6 A_WeaponReady
    Loop
  Deselect:
    MAUL A 1 A_Lower
    Loop
  Select:
    MAUL A 1 A_Raise
    Loop
  Fire:
    BLSF A 5 Bright A_FireMauler1 // see MaulerPuff
    MAUL B 3 Bright A_Light1
    MAUL C 2 A_Light2
    MAUL DE 2
    MAUL A 7 A_Light0
    MAUL H 7
    MAUL G 7 A_CheckReload
    Goto Ready
  }
}
ACTOR Mauler2New : Mauler2 replaces Mauler2
{
  Weapon.SisterWeapon "MaulerNew"
  States
  {
  Ready:
    MAUL IJKL 7 A_WeaponReady
    Loop
  Deselect:
    MAUL I 1 A_Lower
    Loop
  Select:
    MAUL I 1 A_Raise
    Loop
  Fire:
    MAUL I 20 A_FireMauler2Pre
    MAUL J 10 A_Light1
    BLSF A 10 Bright A_FireMauler2 // see MaulerTorpedo
    MAUL B 10 Bright A_Light2
    MAUL C 2
    MAUL D 2 A_Light0
    MAUL E 2 A_ReFire
    Goto Ready
  }
}

//**********
// SIGIL
//**********
// NOTE: NN stands for Non-Native because we aren't inheriting from the "Sigil" actor.

Actor NNSigil : Weapon
{
   Weapon.Kickback 100
   Weapon.SelectionOrder 4000
   +WEAPON.CHEATNOTWEAPON
   Tag "$TAG_SIGIL"
   States
   {
  User1:
    TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("UseStaminaAttack",ACS_NamedExecuteWithResult("GetKickStaminaUse",0),2) == 0, "Ready")
	TNT1 A 0 
	{
	 if (random(1,256) >= 253)
	 {
	  if (CountInv("PlayingStrife",AAPTR_PLAYER1) > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
	  else
	  {
	   A_AlertMonsters; // Sometimes a swing will be enough to wake up all monsters in the area.
	  }
	 }
	 ACS_NamedExecuteAlways("StartTensionCountDown");
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("KickAttackDEFLvl2",1); } else { A_GiveInventory("KickAttackDEFLvl1",1); }
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("MartArtsMaster2",1); }
	 if (ACS_NamedExecuteWithResult("MiscVarCheckDECORATE",10035) == 4) { A_GiveInventory("MartArtsMaster1",1); }
	 if (random(1,256) > 64) { A_GiveInventory("KickCritBonus1",1,AAPTR_PLAYER1); } else { A_GiveInventory("KickCritBonus2",1,AAPTR_PLAYER1); }
	}
    FKIC A 1 Offset(48,46)
    FKIC A 1 Offset(48,44)
    FKIC A 1 Offset(48,42) { if (random(1,256) >= 128) { A_PlaySound("FloraKiaiFull",CHAN_VOICE); } }
    FKIC A 1 Offset(48,40)
    FKIC B 1 Offset(24,38)
    FKIC B 1 Offset(24,36)
    FKIC B 1 Offset(24,34)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
	 }
	}
    FKIC B 1 Offset(24,32)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuffNoThrust",104);
	 }
	}
    FKIC B 1 Offset(24,34)
	{
	 if (CountInv("SpreaderAura2",AAPTR_PLAYER1) > 0)
	 {
      // Angle + 15, Pitch + 0
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 7.5, Pitch + 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch+7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 7.5, Pitch - 7.5
      A_SetPitch(pitch-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle + 0, Pitch + 0
      A_SetPitch(pitch+7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 7.5, Pitch - 7.5
      A_SetAngle(angle-7.5);
      A_SetPitch(pitch-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 7.5, Pitch + 7.5
      A_SetPitch(pitch+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Angle - 15, Pitch + 0
      A_SetPitch(pitch-7.5);
      A_SetAngle(angle-7.5);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      // Reset
      A_SetAngle(angle+15);
	 }
	 else
	 if (CountInv("SpreaderAura1",AAPTR_PLAYER1) > 0)
	 {
      A_SetAngle(angle+15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle-15);
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
      A_SetAngle(angle+15);
	 }
	 else
	 {
	  A_CustomPunch(ACS_NamedExecuteWithResult("GetKickDamage",0),1,0,"KickPuff",104);
	 }
	}
    FKIC B 1 Offset(24,36)
    FKIC B 1 Offset(24,38)
    FKIC A 1 Offset(48,40)
    FKIC A 1 Offset(48,42)
    FKIC A 1 Offset(48,44)
    FKIC A 1 Offset(48,46)
	{
	 A_TakeInventory("KickCritBonus1",9999);
	 A_TakeInventory("KickCritBonus2",9999);
	 A_TakeInventory("KickAttackDEFLvl1",9999);
	 A_TakeInventory("KickAttackDEFLvl2",9999);
	 A_TakeInventory("MartArtsMaster1",9999);
	 A_TakeInventory("MartArtsMaster2",9999);
	}
    goto Ready
   Deselect:
      "----" A 1 A_JumpIf(CallACS("NNSigilPieceCount") == 5, "Deselect5")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 5, "Deselect5")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 4, "Deselect4")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 3, "Deselect3")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 2, "Deselect2")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 1, "Deselect1")
   Deselect1:
      SGLA A 1 Bright { A_Lower; A_Lower; }
      Loop
   Deselect2:
      SGLB A 1 Bright { A_Lower; A_Lower; }
      Loop
   Deselect3:
      SGLC A 1 Bright { A_Lower; A_Lower; }
      Loop
   Deselect4:
      SGLD A 1 Bright { A_Lower; A_Lower; }
      Loop
   Deselect5:
      SGLE A 1 Bright { A_Lower; A_Lower; }
      Loop
   //
   Select:
      "----" A 1 A_JumpIf(CallACS("NNSigilPieceCount") == 5, "Select5")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 5, "Select5")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 4, "Select4")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 3, "Select3")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 2, "Select2")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 1, "Select1")
   Select1:
      SGLA A 1 Bright { A_Raise; A_Raise; }
      Loop
   Select2:
      SGLB A 1 Bright { A_Raise; A_Raise; }
      Loop
   Select3:
      SGLC A 1 Bright { A_Raise; A_Raise; }
      Loop
   Select4:
      SGLD A 1 Bright { A_Raise; A_Raise; }
      Loop
   Select5:
      SGLE A 1 Bright { A_Raise; A_Raise; }
      Loop
   //
      //Well, it seems using "----" A in 'Ready' makes ZDoom refuse
      //to give you the item. Interesting.
   Ready:
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 5, "Ready5")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 4, "Ready4")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 3, "Ready3")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 2, "Ready2")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 1, "Ready1")
   Ready1:
      SGLA A 1 Bright A_WeaponReady(WRF_ALLOWUSER1)
      goto Ready
   Ready2:
      SGLB A 1 Bright A_WeaponReady(WRF_ALLOWUSER1)
      goto Ready
   Ready3:
      SGLC A 1 Bright A_WeaponReady(WRF_ALLOWUSER1)
      goto Ready
   Ready4:
      SGLD A 1 Bright A_WeaponReady(WRF_ALLOWUSER1)
      goto Ready
   Ready5:
      SGLE A 1 Bright A_WeaponReady(WRF_ALLOWUSER1)
      goto Ready
   //
   Fire:
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 5, "Fire5")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 4, "Fire4")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 3, "Fire3")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 2, "Fire2")
      TNT1 A 0 A_JumpIf(CallACS("NNSigilPieceCount") == 1, "Fire1")
   Fire1:
      SGLA A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      SGLA A 18 Bright A_Light2
      SGLA A 3 Bright A_GunFlash
      TNT1 A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      TNT1 A 0 ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 4)
      SGLA B 15 
	  {
       ACS_NamedExecuteAlways("StartTensionCountDown");
	   A_FireCustomMissile("NNSigilLightningSpot", 0, 0);
	  }
      Goto Ready
   Fire2:
      SGLB A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      SGLB A 18 Bright A_Light2
      SGLB A 3 Bright A_GunFlash
      TNT1 A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      TNT1 A 0 ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 8)
      SGLB B 15
	  {
       ACS_NamedExecuteAlways("StartTensionCountDown");
	   A_FireCustomMissile("SpectralLightningH1", 0, 0);
	  }
      Goto Ready
   Fire3:
      SGLC A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      SGLC A 18 Bright A_Light2
      SGLC A 3 Bright A_GunFlash
      TNT1 A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      TNT1 A 0 ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 12)
      TNT1 A 0 A_GiveInventory("NNSigil3AttackCounter", 20)
      TNT1 A 0 A_SetAngle(angle-90)
   Fire3Loop:
      TNT1 A 0 A_SetAngle(angle+9)
      TNT1 A 0
	  {
       ACS_NamedExecuteAlways("StartTensionCountDown");
	   A_FireCustomMissile("SpectralLightningBall1", 0, 0);
	  }
      TNT1 A 0 A_TakeInventory("NNSigil3AttackCounter", 1)
      TNT1 A 0 A_JumpIfInventory("NNSigil3AttackCounter", 1, "Fire3Loop")
      SGLC B 15 A_SetAngle(angle-90)
      Goto Ready
   Fire4:
      SGLD A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      SGLD A 18 Bright A_Light2
      SGLD A 3 Bright A_GunFlash
      TNT1 A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      TNT1 A 0 ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 16)
      SGLD B 15
	  {
       ACS_NamedExecuteAlways("StartTensionCountDown");
	   A_FireCustomMissile("NNSigilLightningBigV", 0, 0);
	  }
      Goto Ready
   Fire5:
      SGLE A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      SGLE A 18 Bright A_Light2
      SGLE A 3 Bright A_GunFlash
      TNT1 A 0 A_PlaySound("weapons/sigilcharge", CHAN_WEAPON)
      TNT1 A 0 ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 20)
      SGLE B 15
	  {
       ACS_NamedExecuteAlways("StartTensionCountDown");
	   A_FireCustomMissile("SpectralLightningBigBall1", 0, 0);
	  }
      Goto Ready
   //
   Flash:
      SGLF A 3 Bright A_Light2
      SGLF B 4 Bright A_Light2
      SGLF C 3 Bright A_LightInverse
      SGLF B 4 Bright A_Light1
      SGLF B 0 A_Light0
      Stop
   }
}

ACTOR SpectralLightningBaseNew : SpectralLightningBase replaces SpectralLightningBase 
{
 +STRIFEDAMAGE
 +SPECTRAL 
 DamageType "Sigil"

  States
  {
  Death:
    ZAP1 B 3 A_Explode(ACS_NamedExecuteWithResult("GetSigilDamage",0,0), ACS_NamedExecuteWithResult("GetSigilDamage",0,1))
    ZAP1 A 3 
	{
     if (random(1,256) > 96)
	 {
	  A_AlertMonsters;
	 }
	}
    ZAP1 BCDEFE 3
    ZAP1 DCB 2
    ZAP1 A 1
    Stop
  }
}

ACTOR SpectralLightningBall1New : SpectralLightningBall1 replaces SpectralLightningBall1
{
 +SPECTRAL 
 DamageType "Sigil" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",1,0)) // 70
}
ACTOR SpectralLightningBall2New : SpectralLightningBall2 replaces SpectralLightningBall2
{
 +SPECTRAL 
 DamageType "Sigil" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",2,0)) // 20
}

ACTOR SpectralLightningDeath1New : SpectralLightningDeath1 replaces SpectralLightningDeath1
{
 +SPECTRAL 
 DamageType "Sigil" 
}
ACTOR SpectralLightningDeath2New : SpectralLightningDeath2 replaces SpectralLightningDeath2
{
 +SPECTRAL 
 DamageType "Sigil" 
}
ACTOR SpectralLightningDeathShortNew : SpectralLightningDeathShort replaces SpectralLightningDeathShort
{
 +SPECTRAL 
 DamageType "Sigil" 
}

ACTOR SpectralLightningBigBall1New : SpectralLightningBigBall1 replaces SpectralLightningBigBall1
{
 +SPECTRAL 
 DamageType "Sigil" 
}
ACTOR SpectralLightningBigBall2New : SpectralLightningBigBall2 replaces SpectralLightningBigBall2
{
 +SPECTRAL 
 DamageType "Sigil" 
}

ACTOR SpectralLightningV1New : SpectralLightningV1 replaces SpectralLightningV1 
{ 
 +SPECTRAL 
 DamageType "Sigil" 
 DamageType "SpectralLow" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",3,0)) // 120
}
ACTOR SpectralLightningV2New : SpectralLightningV2 replaces SpectralLightningV2
{ 
 +SPECTRAL 
 DamageType "Sigil" 
 DamageType "SpectralLow" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",4,0)) // 60
}

ACTOR SpectralLightningH1New : SpectralLightningH1 replaces SpectralLightningH1
{
 +SPECTRAL 
 DamageType "Sigil" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",5,0)) // 70
}
ACTOR SpectralLightningH2New : SpectralLightningH2 replaces SpectralLightningH2
{
 +SPECTRAL 
 DamageType "Sigil" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",6,0)) // 20
}
ACTOR SpectralLightningH3New : SpectralLightningH3 replaces SpectralLightningH3
{
 +SPECTRAL 
 DamageType "Sigil" 
 Damage (ACS_NamedExecuteWithResult("GetSigilDamage",7,0)) // 10
}

ACTOR SpectralLightningSpotNew : SpectralLightningSpot replaces SpectralLightningSpot
{
 +SPECTRAL 
 DamageType "Sigil" 
}

Actor NNSigil3AttackCounter : Inventory
{
   Inventory.MaxAmount 20
}

DamageType NNSigilUse
{
   Factor 1.0
   NoArmor
}

Actor NNSigilLightningSpot : SpectralLightningSpot
{
   +SPECTRAL //This flag is needed, otherwise the SpectralLightningV1/V2
   DamageType "Sigil"
   States    //actors won't damage the spectres. Wierd.
   {
   Spawn:
      TNT1 A 0
      TNT1 A 0 A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_PLAYER_GETTARGET, AAPTR_TRACER)
      TNT1 A 0 A_CheckFlag("SHOOTABLE", 3, AAPTR_TRACER)
      TNT1 A 0 A_Warp(AAPTR_TARGET) //Try to stick to the player's feet.
      ZAP5 A 4 Bright A_ChangeVelocity(28,0,0, CVF_RELATIVE|CVF_REPLACE)
      Goto Super::Spawn+1
      ZAP5 A 4 Bright A_Warp(AAPTR_TRACER, 0,0,0, 0, WARPF_NOCHECKPOSITION|WARPF_STOP|WARPF_TOFLOOR)
      Goto Super::Spawn+1
   }
}

Actor NNSigilLightningBigV : SpectralLightningBigV1
{
   Decal "BaronScorch"
   DamageType "Sigil"
   Damage (ACS_NamedExecuteWithResult("GetSigilDamage",3,0)) // 120
   States
   {
   Spawn:
      TNT1 A 0
      TNT1 A 0 A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_PLAYER_GETTARGET, AAPTR_TRACER)
      TNT1 A 0 A_CheckFlag("SHOOTABLE", 2, AAPTR_TRACER)
      ZOT2 A 4 Bright A_ChangeVelocity(28,0,0, CVF_RELATIVE)
      Goto Super::Spawn+1
      ZOT2 A 4 Bright
      Goto Super::Spawn+1
   }
}