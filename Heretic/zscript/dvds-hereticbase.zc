class DSparilBase : AetheriusBossZSC
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (levelbehavior) extrasteps = user_monsterlevel / 8;
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New", string crisismissiletype = "SorcererFX1Crisis")
	{
		A_MonsterCrisisCheck(); // D'Sparil [Mounted] - Attack
		string projtype = missiletype;
		if (user_canusecrisisatk == 1) 
		{
			projtype = crisismissiletype;
			meleedamage *= CrisisMultiplier; 
		}

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (dvdsdebug_showactormoveinformation) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (levelbehavior) extrasteps = user_monsterlevel / 6;
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (CountInv("LDLegendaryMonsterTransformed"))
			{
				ExtraChance = 1 + (user_monsterlevel / 90);
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (user_monsterlevel / 90);
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype1crisis = "Sorcerer2FX1Crisis", string missiletype2 = "Sorcerer2FX2New",  string missiletype2crisis = "Sorcerer2FX2Crisis")
	{
		A_MonsterCrisisCheck(); // D'Sparil [Unmounted] - Attack
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;
		if (user_canusecrisisatk == 1) 
		{
			attacktype1 = missiletype1crisis;
			attacktype2 = missiletype2crisis;
			meleedamage *= CrisisMultiplier;
		}

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		if (user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}

}

//******************
//*MONSTER SPAWNERS*
//******************
// Gargoyle spawner
class GargoyleSpawner : AetheriusMonsterSpawner replaces HereticImp
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,256) <= evolveChance)
			{
				if (random(1,2) == 1)
					return "WatcherImp";
				else
					return "PlagueImp";
			}
			else
				return "HereticImpLeaderNew";
		}
		else
			return "HereticImpNew";
	}
}

// Gargoyle Leader spawner
class GargoyleLeaderSpawner : AetheriusMonsterSpawner replaces HereticImpLeader
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,2) == 1)
				return "WatcherImp";
			else
				return "PlagueImp";
		}
		else
			return "HereticImpLeaderNew";
	}
}

// Golem Spawner
class GolemSpawner : AetheriusMonsterSpawner replaces Mummy
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,256) <= evolveChance)
				{
					evolveChance = A_GetEvolveChance();
					if (random(1,256) <= evolveChance)
					{
						evolveChance = A_GetEvolveChance();
						if (random(1,1024) <= evolveChance)
						{
							evolveChance = A_GetEvolveChance();
							if (random(1,256) <= evolveChance)
							{
								if (random(1,4) == 1)
								{
									if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
									else return "MummyLeaderGhostNew";
								}
								else
								{
									if (CanFitHere("FrostGolem")) return "FrostGolem";
									else return "MummyLeaderNew";
								}
							}
							else
							{
								if (random(1,4) == 1)
								{
									if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
									else return "MummyLeaderGhostNew";
								}
								else
								{
									if (CanFitHere("IceGolem")) return "IceGolem";
									else return "MummyLeaderNew";
								}
							}
						}
						else
							return "MummyLeaderGhostNew";
					}
					else
						return "MummyLeaderNew";
				}
				else
					return "MummyGhostNew";
			}
			else
				return "MummyNew";
		}
	}
}

// Golem Ghost Spawner
class GolemGhostSpawner : AetheriusMonsterSpawner replaces MummyGhost
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,256) <= evolveChance)
				{
					evolveChance = A_GetEvolveChance();
					if (random(1,1024) <= evolveChance)
					{
						evolveChance = A_GetEvolveChance();
						if (random(1,256) <= evolveChance)
						{
							if (random(1,4) == 1)
							{
								if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
								else return "MummyLeaderGhostNew";
							}
							else
							{
								if (CanFitHere("FrostGolem")) return "FrostGolem";
								else return "MummyLeaderNew";
							}
						}
						else
						{
							if (random(1,4) == 1)
							{
								if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
								else return "MummyLeaderGhostNew";
							}
							else
							{
								if (CanFitHere("IceGolem")) return "IceGolem";
								else return "MummyLeaderNew";
							}
						}
					}
					else
						return "MummyLeaderGhostNew";
				}
				else
					return "MummyLeaderNew";
			}
			else
				return "MummyGhostNew";
		}
	}
}

// NitroGolem Spawner
class NitroGolemSpawner : AetheriusMonsterSpawner replaces MummyLeader
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,1024) <= evolveChance)
				{
					evolveChance = A_GetEvolveChance();
					if (random(1,256) <= evolveChance)
					{
						if (random(1,4) == 1)
						{
							if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
							else return "MummyLeaderGhostNew";
						}
						else
						{
							if (CanFitHere("FrostGolem")) return "FrostGolem";
							else return "MummyLeaderNew";
						}
					}
					else
					{
						if (random(1,4) == 1)
						{
							if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
							else return "MummyLeaderGhostNew";
						}
						else
						{
							if (CanFitHere("IceGolem")) return "IceGolem";
							else return "MummyLeaderNew";
						}
					}
				}
				else
					return "MummyLeaderGhostNew";
			}
			else
				return "MummyLeaderNew";
		}
	}
}

// NitroGolem Ghost Spawner
class NitroGolemGhostSpawner : AetheriusMonsterSpawner replaces MummyLeaderGhost
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,1024) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,256) <= evolveChance)
				{
					if (random(1,4) == 1)
					{
						if (CanFitHere("FrostGolemGhost")) return "FrostGolemGhost";
						else return "MummyLeaderGhostNew";
					}
					else
					{
						if (CanFitHere("FrostGolem")) return "FrostGolem";
						else return "MummyLeaderNew";
					}
				}
				else
				{
					if (random(1,4) == 1)
					{
						if (CanFitHere("IceGolemGhost")) return "IceGolemGhost";
						else return "MummyLeaderGhostNew";
					}
					else
					{
						if (CanFitHere("IceGolem")) return "IceGolem";
						else return "MummyLeaderNew";
					}
				}
			}
			else
				return "MummyLeaderGhostNew";
		}
	}
}

// Undead Warrior/Knight spawner
class KnightSpawner : AetheriusMonsterSpawner replaces Knight
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 2 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,256) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,2048) <= evolveChance)
				{
					if (random(1,4) == 1)
						return "DeathKnightGhost";
					else
						return "DeathKnight";
				}
				else
					return "KnightGhostNew";
			}
			else
				return "KnightNew";
		}
	}
}

// Undead Warrior/Knight spawner
class KnightGhostSpawner : AetheriusMonsterSpawner replaces KnightGhost
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;

		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,2048) <= evolveChance)
				return "DeathKnightGhost";
			else
				return "KnightGhostNew";
		}
	}
}

// Disciple Spawner
class WizardSpawner : AetheriusMonsterSpawner replaces Wizard
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,384) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,768) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,1152) <= evolveChance)
					return "Banshee";
				else 
					return "HereticApprenticeNew";
			}
			else
				return "GreaterDisciple";
		}
		else
			return "WizardNew";
		
	}
}

// Disciple Spawner
class FWizardSpawner : AetheriusMonsterSpawner
{
	Default
	{
		+FRIENDLY
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,384) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,768) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,1152) <= evolveChance)
					return "FBanshee";
				else 
					return "FHereticApprentice";
			}
			else
				return "FGreaterDisciple";
		}
		else
			return "FWizard";
		
	}
}

// IronLich Spawner
class LichSpawner : AetheriusMonsterSpawner replaces Ironlich
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= evolveChance)
		{
			evolveChance = A_GetEvolveChance();
			if (random(1,384) <= evolveChance)
			{
				evolveChance = A_GetEvolveChance();
				if (random(1,512) <= evolveChance)
					return "BloodLich";
				else
					return "GoldLich";
			}
			else
				return "IceLich";
		}
		else
			return "IronLichNew";
	}
}

// Sabreclaw Spawner
class ClinkSpawner : AetheriusMonsterSpawner replaces Clink
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,768) <= evolveChance)
			{
				if (CanFitHere("DarkClink")) return "DarkClink";
				else return "ClinkNew";
			}
			else
				return "ClinkNew";
		}
	}
}

// Weredragon Spawner
class WeredragonSpawner : AetheriusMonsterSpawner replaces Beast
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,768) <= evolveChance)
			{
				if (CanFitHere("ShadowBeast")) return "ShadowBeast";
				else return "BeastNew";
			}
			else
				return "BeastNew";
		}
	}
}

// Ophidian spawner
class SnakeSpawner : AetheriusMonsterSpawner replaces Snake
{
	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,256) <= 1 && modtype == 0 && monstersoption == 1) 
		{
			return "HellCleric";
		}
		else
		{
			if (random(1,384) <= evolvechance)
			{
				if (random(1,384) <= evolvechance)
					return "Serpathor";
				else
					return "HellGuard";
			}
			else
				return "SnakeNew";
		}
	}
}

// ITEMS
class GauntletsNew : RandomSpawner2 replaces Gauntlets
{
	default
	{
		+DONTGIB;
		DropItem "BerserkSphere", 255, 511;
		DropItem "RandomHereticWeapon", 255, 256;
		DropItem "RandomHellcoreWeapon", 255, 256;
		DropItem "DiarisLongbow", 255, 256;
		DropItem "PoisonNeedle", 255, 256;
		DropItem "RandomSeedDropForcedAlways", 255, 256;
		DropItem "FyggForced", 255, 1;
	}
}

class RandomHereticWeapon : RandomSpawner2
{
	default
	{
		+DONTGIB;
		DropItem "GoldWandNew", 255, 32;
		DropItem "CrossbowNew", 255, 30;
		DropItem "SuperCrossbowNew", 255, 30;
		DropItem "DragonClawNew", 255, 30;
		DropItem "HellStaffNew", 255, 30;
		DropItem "PhoenixRodNew", 255, 30;
		DropItem "FiremaceNew", 255, 30;
		DropItem "DSparilStaff", 255, 2;
	}
}

class RandomHereticWeapon2 : RandomSpawner2
{
	default
	{
		+DONTGIB;
		DropItem "GoldWandNew", 255, 32;
		DropItem "CrossbowNew", 255, 30;
		DropItem "SuperCrossbowNew", 255, 30;
		DropItem "DragonClawNew", 255, 30;
		DropItem "HellStaffNew", 255, 30;
		DropItem "PhoenixRodNew", 255, 30;
		DropItem "FiremaceNew", 255, 30;
	}
}

class ArtiTimeBombNew : AetheriusBaseZSC replaces ArtiTimeBomb
{
	default
	{
		Radius 16;
		Height 16;
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,1) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,0,0,0,0,tid,0); }
				if (random(1,4) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				if (random(1,16) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				if (random(1,64) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				if (random(1,256) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
				A_Fadeout(1.0);
			}
			Stop;
	}
}

class ArtiTorchNew : RandomSpawner2 replaces ArtiTorch
{
	default
	{
		+DONTGIB;
		DropItem "RandomMagicSpawner", 256;
	}
}

class ArtiEggNew : AetheriusBaseCustomInventoryZSC replaces ArtiEgg
{
	default
	{
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.KEEPDEPLETED;
		Inventory.Icon "ARTIEGGC";
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "$TXT_ARTIEGG"; // "MORPH OVUM"
		Inventory.DefMaxAmount;
		Tag "$TAG_ARTIEGG";
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Torpol's Morph Ovum: Transforms up to eleven enemies into chickens.";
	}
	
	States
	{
		Spawn:
			EGGC ABCB 5;
			Loop;
		Use:
			TNT1 A 0 
			{
				A_SpreadAuraFireProjectile("EggFX", -18.75, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -15.0, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -11.25, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -7.5, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", -3.75, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 0.0, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 3.75, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 7.5, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 11.25, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 15.0, 0, "", 0, 0, 1, 0);
				A_SpreadAuraFireProjectile("EggFX", 18.75, 0, "", 0, 0, 1, 0);
			}
			Stop;
	}
}
  
class ArtiTeleportNew : ArtiTeleport replaces ArtiTeleport
{
	default
	{
		+DONTGIB;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Tag "Darchala's Chaos Device: Teleports you away to near a level's entry point.";
	}
}
  
class ArtiTomeOfPowerNew : RandomSpawner2 replaces ArtiTomeOfPower
{
	default
	{
		DropItem "Experiessence", 255, 112;
		DropItem "LargeExperiessence", 255, 72;
		DropItem "HugeExperiessence", 255, 40;
		DropItem "RandomSeedDropForcedAlways", 255, 22;
		DropItem "FloraRandomArmorAlwaysDrop", 255, 8;
		DropItem "SauronHelmet", 255, 1;
		DropItem "SauronGauntlets", 255, 1;
	}
}

class ArtiInvisibilityNew : AetheriusUsableInventory replaces ArtiInvisibility
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		RenderStyle "Translucent";
		Alpha 0.4;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIINVS";
		Inventory.PickupMessage "$TXT_ARTIINVISIBILITY";
		Tag "ShadowSphere: Gives partial invisiblity for 90 seconds";
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
	}

	States
	{
		Spawn:
			INVS A 350 Bright;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-7);
			fail;
	}
}

class ArtiFlyNew : AetheriusCustomInventory replaces ArtiFly
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTISOAR";
		Inventory.PickupMessage "$TXT_ARTIFLY"; // "WINGS OF WRATH"
		Tag "$TAG_ARTIFLY";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx("SeedOfSkillForced",0,0,0,0,0,0,0,0,0);
			TNT1 A 0 A_SpawnItemEx("SeedOfSkillForced",0,0,0,0,0,0,0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfAgilityForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDefenseForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfDeftnessForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfSorceryForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfStrengthForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfTherapeusisForced",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfLife",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
			TNT1 A 0 A_SpawnItemEx("SeedOfMagic",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,248);

			TNT1 A 0 A_SpawnItemEx("Fygg",0,0,0,0,0,0,0,0,255);
			TNT1 A 0 A_FadeOut(1.0);
			Loop;
	}
}

class ArtiInvulnerabilityNew : AetheriusUsableInventory replaces ArtiInvulnerability
{
	default
	{
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		Inventory.Pickupflash "PickupFlash";
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.RespawnTics 4230;
		Inventory.Icon "ARTIINVU";
		Inventory.PickupMessage "$TXT_ARTIINVULNERABILITY"; // "RING OF INVINCIBILITY"
		Tag "Valador's Ring of Invincibility: Gives 45 Seconds of Invulnerability";
	}
	
	States
	{
		Spawn:
			INVU ABCD 3;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(-6);
			fail;
	}
}

class SilverShieldNew : RandomSpawner2 replaces SilverShield
{
	default
	{
		DropItem "MaxHealthBonusReal", 255, 96;
		DropItem "FloraRandomArmorAlwaysDrop", 255, 2;
		DropItem "SauronHelmet", 255, 1;
		DropItem "SauronGauntlets", 255, 1;
	}
}

class EnchantedShieldNew : RandomSpawner2 replaces EnchantedShield
{
	default
	{
		DropItem "MaxHealthBonusReal", 255, 88;
		DropItem "FloraRandomArmorAlwaysDrop", 255, 6;
		DropItem "SauronHelmet", 255, 3;
		DropItem "SauronGauntlets", 255, 3;
	}
}

class CrystalVialNew : AetheriusCustomInventory replaces CrystalVial
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		Inventory.Amount 10;
		Inventory.PickupMessage "$TXT_ITEMHEALTH"; // "CRYSTAL VIAL"
		Inventory.PickupSound "pickup/qpotion";
	}
	
	States
	{
			Herb1:
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			Herb2:
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

			Herb3:
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,0);
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
				TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,254);
				TNT1 A 0 A_Jump(32,"Idle");
				TNT1 A 0 A_FadeOut(1.0);
				Stop;

		TurnIntoHerb:
			TNT1 A 0 A_Jump(144,"Herb1");
			TNT1 A 0 A_Jump(112,"Herb2");
			goto Herb3;

		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{
				// Monster Munchies
				if (random(1,128) <= 1)
				{
					A_SpawnItemEx("MonsterMunchies",0,0,0,random(-4,4),random(-4,4),random(-4,4),0,0,0);
				}
				// Vimstones
				if (random(1,1024) <= 1)
				{
					if (random(1,4) <= 3)
					{
						A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,0,0,0);
					}
					else
					{
						A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,0,0,0);
					}
				}
			}
			TNT1 A 0 A_Jump(36,"TurnIntoHerb"); 
		Idle:
			PTN1 ABC 3 bright;
			loop;
		Success:
			TNT1 A 0 A_PickupMedicalItem(0,0);
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(0)) { return resolvestate("Success"); } return resolvestate(null); 
			}
			Fail;
	}
}

class BagOfHoldingNew : AetheriusCustomInventory replaces BagOfHolding
{
	default
	{
		Height 26;
		+DONTGIB;
		+COUNTITEM;
		+FLOATBOB;
		Inventory.PickupMessage "Got the \cebag of holding\c-! \cyAmmo and Inventory Limits increased\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetScale(frandom(0.667,1));
				if (Random(1,3) <= 2) { A_SpawnItemEx("GoldWandAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("GoldWandAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("GoldWandHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("CrossbowAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("CrossbowAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("CrossbowHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("BlasterAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("BlasterAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("BlasterHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("PhoenixRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("PhoenixRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("PhoenixRodHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("MaceAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("MaceAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("MaceHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 2) { A_SpawnItemEx("SkullRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("SkullRodAmmoNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("SkullRodHeftyNew",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,3) <= 1) { A_SpawnItemEx("DiarisArrow",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,6) <= 1) { A_SpawnItemEx("DiarisArrow",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,12) <= 1) { A_SpawnItemEx("DiarisArrowQuiver",0,0,0,random(-5,5),random(-5,5),0); }

				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }

				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,8) <= 1) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
			}
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("DimensionalBag",0,0,0,0,0,0,0,0,0,tid);
					A_FadeOut(1.0,FTF_REMOVE);
				}
			}
		Idle:
			BAGH A -1;
			Stop;
		Pickup:
			TNT1 A 0;
			TNT1 A 0 A_GrabBackpack();
			Stop;
	}
}

// ****************
// ***** AMMO *****
// ****************
class GoldWandAmmoNew : GoldWandAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 10; Inventory.PickupMessage "Wand crystal [+10 Crystal Wand]"; } }
class GoldWandHeftyNew : GoldWandHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 50; Inventory.PickupMessage "Crystal geode [+50 Crystal Wand]"; } }
class CrossbowAmmoNew : CrossbowAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 4; Inventory.PickupMessage "Ethereal arrows [+4] (Super) Ethereal Crossbow"; } }
class CrossbowHeftyNew : CrossbowHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 20; Inventory.PickupMessage "Quiver of ethereal arrows [+20] (Super) Ethereal Crossbow"; } }
class BlasterAmmoNew : BlasterAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 10; Inventory.PickupMessage "Claw orb [+10 Dragon Claw]"; } }
class BlasterHeftyNew : BlasterHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 50; Inventory.PickupMessage "Energy orb [+50 Dragon Claw]"; } }
class PhoenixRodAmmoNew : PhoenixRodAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 1; Inventory.PickupMessage "Flame orb [+1 Phoenix Rod]"; } }
class PhoenixRodHeftyNew : PhoenixRodHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 10; Inventory.PickupMessage "Inferno Orb [+10 Phoenix Rod]"; } }
class MaceAmmoNew : MaceAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 20; Inventory.PickupMessage "Mace Spheres [+20 Firemace]"; } }
class MaceHeftyNew : MaceHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 100; Inventory.PickupMessage "Pile of mace spheres [+100 Firemace]"; } }
class SkullRodAmmoNew : SkullRodAmmo { default { +DONTGIB; +BRIGHT; Inventory.Amount 20; Inventory.PickupMessage "Lesser Runes [+20 Hellstaff]"; } }
class SkullRodHeftyNew : SkullRodHefty { default { +DONTGIB; +BRIGHT; Inventory.Amount 100; Inventory.PickupMessage "Greater Runes [+100 Hellstaff]"; } }

// **************************
// ***** AMMO REPLACERS *****
// **************************
class GoldWandAmmoSpawner : GoldWandAmmo replaces GoldWandAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("GoldWandNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("GoldWandNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualGoldWandNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualGoldWandNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("GoldWandAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("GoldWandAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("GoldWandAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("GoldWandAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class GoldWandHeftySpawner : GoldWandHefty replaces GoldWandHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("GoldWandNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("GoldWandNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualGoldWandNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualGoldWandNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("GoldWandHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("GoldWandHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("GoldWandHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("GoldWandHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class CrossbowAmmoSpawner : CrossbowAmmo replaces CrossbowAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("CrossbowNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("CrossbowNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualCrossbowNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualCrossbowNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("SuperCrossbowNew",AAPTR_PLAYER1) <= 0)
						{
							if (random(1,2048) <= 1)
							{
								A_SpawnItemEx("SuperCrossbowNew");
								A_FadeOut(1,1);
							}
						}
						else
						{
							if (CountInv("DualSuperCrossbowNew",AAPTR_PLAYER1) <= 0)
							{
								if (random(1,4096) <= 1)
								{
									A_SpawnItemEx("DualSuperCrossbowNew");
									A_FadeOut(1,1);
								}
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("CrossbowAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("CrossbowAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("CrossbowAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("CrossbowAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class CrossbowHeftySpawner : CrossbowHefty replaces CrossbowHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("CrossbowNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("CrossbowNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualCrossbowNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualCrossbowNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("SuperCrossbowNew",AAPTR_PLAYER1) <= 0)
						{
							if (random(1,2048) <= 1)
							{
								A_SpawnItemEx("SuperCrossbowNew");
								A_FadeOut(1,1);
							}
						}
						else
						{
							if (CountInv("DualSuperCrossbowNew",AAPTR_PLAYER1) <= 0)
							{
								if (random(1,4096) <= 1)
								{
									A_SpawnItemEx("DualSuperCrossbowNew");
									A_FadeOut(1,1);
								}
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("CrossbowHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("CrossbowHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("CrossbowHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class BlasterAmmoSpawner : BlasterAmmo replaces BlasterAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("DragonClawNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("DragonClawNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualDragonClawNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualDragonClawNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("DSparilStaff",AAPTR_PLAYER1) > 0)
						{
							if (random(1,8192) <= 1)
							{
								A_SpawnItemEx("DualDSparilStaff");
								A_FadeOut(1,1);
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("BlasterAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <=  1)	{ A_SpawnItemEx("BlasterAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("BlasterAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("BlasterAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class BlasterHeftySpawner : BlasterHefty replaces BlasterHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("DragonClawNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("DragonClawNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualDragonClawNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualDragonClawNew");
							A_FadeOut(1,1);
						}
					}
					else
					{
						if (CountInv("DSparilStaff",AAPTR_PLAYER1) > 0)
						{
							if (random(1,8192) <= 1)
							{
								A_SpawnItemEx("DualDSparilStaff");
								A_FadeOut(1,1);
							}
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("BlasterHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("BlasterHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("BlasterHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("BlasterHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class PhoenixRodAmmoSpawner : PhoenixRodAmmo replaces PhoenixRodAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("PhoenixRodNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("PhoenixRodNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualPhoenixRodNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualPhoenixRodNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("PhoenixRodAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("PhoenixRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("PhoenixRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("PhoenixRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class PhoenixRodHeftySpawner : PhoenixRodHefty replaces PhoenixRodHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("PhoenixRodNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("PhoenixRodNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualPhoenixRodNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualPhoenixRodNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("PhoenixRodHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("PhoenixRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("PhoenixRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class MaceAmmoSpawner : MaceAmmo replaces MaceAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("FiremaceNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("FiremaceNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualFiremaceNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualFiremaceNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("MaceAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("MaceAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("MaceAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("MaceAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class MaceHeftySpawner : MaceHefty replaces MaceHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("FiremaceNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("FiremaceNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualFiremaceNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualFiremaceNew");
							A_FadeOut(1,1);
						}
					}
				}

				if (Random(1,1) <= 1)		{ A_SpawnItemEx("MaceHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("MaceHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("MaceHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("MaceHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class SkullRodAmmoSpawner : SkullRodAmmo replaces SkullRodAmmo
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("HellStaffNew",AAPTR_PLAYER1) <= 0)
				{
					if (random(1,2048) <= 1)
					{
						A_SpawnItemEx("HellStaffNew");
						A_FadeOut(1,1);
					}
				}
				else
				{
					if (CountInv("DualHellStaffNew",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,4096) <= 1)
						{
							A_SpawnItemEx("DualHellStaffNew");
							A_FadeOut(1,1);
						}
					}
				}
				if (Random(1,1) <= 1)		{ A_SpawnItemEx("SkullRodAmmoNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("SkullRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("SkullRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("SkullRodAmmoNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrow",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,100) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,500) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

class SkullRodHeftySpawner : SkullRodHefty replaces SkullRodHefty
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1) <= 1)		{ A_SpawnItemEx("SkullRodHeftyNew",0,0,0,0,0,0); }
				if (Random(1,5) <= 1)		{ A_SpawnItemEx("SkullRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,25) <= 1)	{ A_SpawnItemEx("SkullRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,125) <= 1)	{ A_SpawnItemEx("SkullRodHeftyNew",random(-8,8),random(-8,8),0,random(-8,8),random(-8,8),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("DiarisArrowQuiver",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,40) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,200) <= 1)	{ A_SpawnItemEx("DoomSpellMana2",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,50) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
				if (Random(1,250) <= 1)	{ A_SpawnItemEx("RandomMagicSpawner",random(-4,4),random(-4,4),0,random(-4,4),random(-4,4),0); }
			}
			TNT1 A 0;
			Stop;
	}
}

//***********
//* WEAPONS *
//***********
// Elven Wand[s]
class GoldWandFX1New : AetheriusProjectileZSC 
{
	default
	{
		Tag "Elven Wand Shot";
		Radius 10;
		Height 6;
		Speed 22;
		DamageFunction (finaldamagedealt); // 2
		DamageType "Magic";
		Projectile;
		RenderStyle "Add";
		DeathSound "weapons/wandhit";
		Obituary "$OB_MPPGOLDWAND";
	}
	
	States
	{
		Spawn:
			FX01 A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(41,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX01 AB 6 Bright;
			Loop;
		Death:
			FX01 EFGH 3 Bright;
			Stop;
	}
}
class GoldWandFX2New : GoldWandFX1New 
{
	default
	{
		Tag "Elven Wand Ball";
		Speed 18;
		DamageFunction (finaldamagedealt); // 1
		DamageType "Magic";
		DeathSound "";
	}
	
	States
	{
		Spawn:
			FX01 C 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(42,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX01 CD 6 Bright;
			Loop;
	}
}
class GoldWandPuff1New : AetheriusProjectileZSC 
{
	default
	{
		Tag "Elven Wand Shot";
		DamageType "Magic";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+PUFFONACTORS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			PUF2 ABCDE 3 Bright;
			Stop;
	}
}
class GoldWandPuff2New : AetheriusProjectileZSC 
{ 
	default
	{
		Tag "Elven Wand Shot";
		DamageType "Magic" ;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+PUFFONACTORS;
	}
	
	States
	{
		Spawn:
			FX01 EFGH 3 Bright;
			Stop;
	}
}

class GoldWandNew : HereticWeaponBase replaces GoldWand
{
	default
	{
		+BLOODSPLATTER;
		Weapon.Kickback 13;
		Weapon.SelectionOrder 2000;
		Weapon.AmmoGive 25;
		Weapon.AmmoType1 "GoldWandAmmo";
		Weapon.AmmoType2 "GoldWandAmmo";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.YAdjust 0;
		Inventory.PickupMessage "Elven Wand \cx[Slot 2]\c-";
		Obituary "$OB_MPGOLDWAND";
		Tag "Elven Wand";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(256,1);
			TNT1 A 0 A_SigilPieceSpawn(256,1);
		Idle:
			TNT1 A 0
			{
				if (CountInv("GoldWandNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualGoldWandNew");
					A_FadeOut(1,1);
				}
			}
			GWAN A 1;
			Loop;
		Despawn:
			GWAN A 0;
			Stop;
		Ready:
			GWND A 1 A_WeaponReady();
			Loop;
		Deselect:
			GWND A 1 
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			GWND A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			GWND B 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWND C 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(3); }
				CallACS("StartTensionCountDown");
			
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(13),A_GetHitScanYSpread(13),1, A_GetPlayerAttackDamage(29,1), "GoldWandPuff1New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,1,"GoldWandAmmo");
				A_StartSound("weapons/wandhit",1);
			}
			GWND D 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWND D 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			GWND B 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWND C 4 // A_FireGoldWandPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
			
				A_StartSound("weapons/wandhit",1);
				A_SetAngle(angle-5.625);
				A_SpreadAuraFireProjectile("GoldWandFX2New",0,0,"",0,0,0,0);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SpreadAuraFireProjectile("GoldWandFX2New",0,1,"GoldWandAmmo",0,0,0,0);
				A_SetAngle(angle-5.625);
			}
			GWND D 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWND D 0 A_ReFire();
			Goto Ready;
	}
}
class DualGoldWandNew : GoldWandNew
{
	default
	{
		+BLOODSPLATTER;
		Weapon.Kickback 13;
		Weapon.SelectionOrder 2000;
		Weapon.AmmoGive 25;
		Weapon.AmmoType1 "GoldWandAmmo";
		Weapon.AmmoType2 "GoldWandAmmo";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.YAdjust 0;
		Inventory.PickupMessage "Elven Wand \cx[Slot 2] (can now dual wield)\c-";
		Obituary "$OB_MPGOLDWAND";
		Tag "Dual Elven Wands";
	}
	
	States
	{
		Spawn:
			GWAN A -1;
			Stop;
		Ready:
			GWN2 A 1 A_WeaponReady();
			Loop;
		Deselect:
			GWN2 A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			GWN2 A 1
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			GWN2 B 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWN2 CD 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(3); }
				CallACS("StartTensionCountDown");
			
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(13),A_GetHitScanYSpread(13),1, A_GetPlayerAttackDamage(29,1), "GoldWandPuff1New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"GoldWandAmmo");
				A_StartSound("weapons/wandhit",1);
			}
			GWN2 E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWN2 E 0 A_ReFire();
			Goto Ready;
		AltFire: // 10 Frames
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			GWN2 B 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWN2 CD 4 // A_FireGoldWandPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
			
				A_StartSound("weapons/wandhit",1);
				A_SetAngle(angle-5.625);
				A_SpreadAuraFireProjectile("GoldWandFX2New",0,0,"",0,0,0,0);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SetAngle(angle+2.8125);
				A_SpreadAuraFireBullets(0,0,1,A_GetPlayerAttackDamage(30,1),"GoldWandPuff2New",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,0,"");
				A_SpreadAuraFireProjectile("GoldWandFX2New",0,1,"GoldWandAmmo",0,0,0,0);
				A_SetAngle(angle-5.625);
			}
			GWN2 E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			GWN2 E 0 A_ReFire();
			Goto Ready;
	}
}

// Ethereal Crossbow[s]
class CrossbowFX1New : AetheriusProjectileZSC 
{
	default
	{
		Tag "Ethereal Arrow";
		DamageType "Magic";
		DamageFunction (finaldamagedealt); // 10
		Speed 30;
		Radius 11;
		Height 8;
		Projectile;
		RenderStyle "Add";
		SeeSound "weapons/bowshoot";
		DeathSound "weapons/bowhit";
		Obituary "$OB_MPCROSSBOW";
	}
	
	States
	{
		Spawn:
			FX03 B 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(21,0); 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			FX03 B 1 Bright;
			Loop;
		Death:
			FX03 HIJ 8 Bright;
			Stop;
	}
}
class CrossbowFX2New : CrossbowFX1New
{
	default
	{
		Tag "Ethereal Arrow";
		DamageType "Magic";
		DamageFunction (finaldamagedealt); // 6
		Speed 32;
		Obituary "$OB_MPPCROSSBOW";
	}
	
	States
	{
		Spawn:
			FX03 B 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(22,0); 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			FX03 B 1 Bright A_SpawnItemEx("CrossbowFX4", random2[BoltSpark]()*0.015625, random2[BoltSpark]()*0.015625, 0, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 50);
			Loop;
	}
}
class CrossbowFX3New : CrossbowFX1New
{
	default
	{
		Tag "Ethereal Arrow";
		DamageType "Magic";
		DamageFunction (finaldamagedealt); // 2
		Speed 20;
		SeeSound "";
		-NOBLOCKMAP;
		+WINDTHRUST;
		+THRUGHOST;
	}
	
	States
	{
		Spawn:
			FX03 A 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(23,0);
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			FX03 A 1 Bright;
			Loop;
		Death:
			FX03 CDE 8 Bright;
			Stop;
	}
}

class CrossbowNew : HereticWeaponBase replaces Crossbow
{
	default
	{
		Weapon.SelectionOrder 800;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 10;
		Weapon.AmmoType1 "CrossbowAmmo";
		Weapon.AmmoType2 "CrossbowAmmo";
		Weapon.YAdjust 0;
		Weapon.Kickback 75;
		Inventory.PickupMessage "Ethereal Crossbow \cx[Slot 3]\c-";
		Tag "$TAG_CROSSBOW";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(128,1);
			TNT1 A 0 A_SigilPieceSpawn(128,1);
		Idle:
			TNT1 A 0
			{
				if (random(1,10) <= 1)
				{
					A_SpawnItemEx("DiarisLongBow");
					A_FadeOut(1,1);
				}
			}
			WBOW A 0
			{
				if (random(1,10) == 10)
				{
					A_SpawnItemEx("SuperCrossbowNew");
					A_FadeOut(1,1);
				}
			}
		Idle:
			WBOW A 0
			{
				if (CountInv("CrossbowNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualCrossbowNew");
					A_FadeOut(1,1);
				}
			}
			WBOW A 1;
			Loop;
		Ready:
			CRBW AAAAAABBBBBBCCCCCC 1 A_WeaponReady();
			Loop;
		Deselect:
			CRBW AAAAAABBBBBBCCCCCC 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			CRBW AAAAAABBBBBBCCCCCC 1
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			CRBW D 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX3New", -4.5, 0,            "", -2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",    0, 1,"CrossbowAmmo",  0, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  4.5, 0,            "",  2, 3, 0, 0);
			}
			CRBW EFGH 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBW AB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRBW C 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRBW C 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			CRBW D 5 // A_FireCrossbowPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0, 1,"CrossbowAmmo",  0, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -4.5, 0,            "", -2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  4.5, 0,            "", -2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -9.0, 0,            "", -4, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  9.0, 0,            "",  4, 3, 0, 0);
			}
			CRBW E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBW F 2
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(0); }
			}
			CRBW G 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBW H 2
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(0); }
			}
			CRBW AB 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBW C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRBW C 0 A_ReFire();
			Goto Ready;
	}
}
class DualCrossbowNew : HereticWeaponBase
{
	default
	{
		Weapon.SelectionOrder 800;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 10;
		Weapon.AmmoType1 "CrossbowAmmo";
		Weapon.AmmoType2 "CrossbowAmmo";
		Weapon.YAdjust 0;
		Weapon.Kickback 75;
		Inventory.PickupMessage "Ethereal Crossbow \cx[Slot 3] (can now dual wield)\c-";
		Tag "Dual Ethereal Crossbows";
	}
	
	States
	{
		Spawn:
			WBOW A -1;
			Stop;
		Ready:
			CRBD AAAAAABBBBBBCCCCCC 1 A_WeaponReady();
			Loop;
		Deselect:
			CRBD AAAAAABBBBBBCCCCCC 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			CRBD AAAAAABBBBBBCCCCCC 1
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			CRBD D 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX3New", -4.5-4.0, 0,            "", -2-2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",    0-4.0, 1,"CrossbowAmmo",  0-2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  4.5-4.0, 0,            "",  2-2, 3, 0, 0);
			}
			CRBD E 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX3New", -4.5+4.0, 0,            "", -2+2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",    0+4.0, 1,"CrossbowAmmo",  0+2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  4.5+4.0, 0,            "",  2+2, 3, 0, 0);
			}
			CRBD FGH 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBD AB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRBD C 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRBD C 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			CRBD D 5 // A_FireCrossbowPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0-4.0, 1,"CrossbowAmmo",  0-2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -4.5-4.0, 0,            "", -2-2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  4.5-4.0, 0,            "", -2-2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -9.0-4.0, 0,            "", -4-2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  9.0-4.0, 0,            "",  4-2, 3, 0, 0);
			}
			CRBD E 5 // A_FireCrossbowPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0+4.0, 1,"CrossbowAmmo",  0+2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -4.5+4.0, 0,            "", -2+2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  4.5+4.0, 0,            "", -2+2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -9.0+4.0, 0,            "", -4+2, 3, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  9.0+4.0, 0,            "",  4+2, 3, 0, 0);
			}
			CRBD F 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBD G 2
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(0); }
			}
			CRBD HAB 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRBD C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRBD C 0 A_ReFire();
			Goto Ready;
	}
}
class SuperCrossbowNew : HereticWeaponBase
{
	default
	{
		obituary "%o was splattered by %k's super crossbow.";
		radius 20;
		height 16;
		Inventory.PickupMessage "Super Ethereal Crossbow \cx[Slot 3]\c-";
		weapon.selectionorder 400;
		Weapon.AmmoType1 "CrossbowAmmo";
		Weapon.AmmoType2 "CrossbowAmmo";
		Weapon.Kickback 75;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoGive 8;
		Tag "Super Ethereal Crossbow";
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(72,1);
			TNT1 A 0 A_SigilPieceSpawn(72,1);
		Idle:
			WBOW B 0
			{
				if (CountInv("SuperCrossbowNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualSuperCrossbowNew");
					A_FadeOut(1,1);
				}
			}
			WBOW B 1;
			Loop;
		Ready: 
			CRB2 AAAAAABBBBBBCCCCCC 1 A_WeaponReady();
			Loop;
		Deselect:
			CRB2 AAAAAABBBBBBCCCCCC 1 
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			CRB2 AAAAAABBBBBBCCCCCC 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			CRB2 A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRB2 D 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/bowshoot",1);
				A_StartSound("weapons/bowshoot",1);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  4.0, 0,             "", -14*0.5,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0, 0,             "",   0,  10*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0, 0,             "",   0,  10*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",  0.0, 1, "CrossbowAmmo",  -7*0.5,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",  0.0, 1, "CrossbowAmmo",   7*0.5,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0, 0,             "",   0, -10*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0, 0,             "",   0, -10*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -4.0, 0,             "",  14*0.5,   0, 0, 0);
			}
			CRB2 E 10
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(4); }
			}
			CRB2 F 12 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(10); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(6); }
			}
			CRB2 G 9 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
			}
			CRB2 H 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(0); }
			}
			CRB2 H 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRB2 H 0 A_ReFire();
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			CRB2 A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRB2 D 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0, 0,             "",   7*0.5,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0, 0,             "",   0,   4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0, 0,             "",   0,   4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0, 0,             "",   0,  -4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0, 0,             "",   0,  -4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0, 0,             "",   0,  8*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0, 0,             "",   0,  8*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0, 1, "CrossbowAmmo", -14*0.5,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0, 1, "CrossbowAmmo",  14*0.5,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0, 0,             "",   0, -8*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0, 0,             "",   0, -8*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0, 0,             "",   0,  -4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0, 0,             "",   0,  -4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0, 0,             "",   0,   4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0, 0,             "",   0,   4*0.5, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0, 0,             "",  -7*0.5,   0, 0, 0);
			}
			CRB2 EF 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
			}
			CRB2 G 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			CRB2 H 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			CRB2 H 0 A_ReFire();
			goto Ready;
	}
}
class DualSuperCrossbowNew : HereticWeaponBase
{
	default
	{
		obituary "%o was splattered by %k's super crossbows.";
		radius 20;
		height 16;
		Inventory.PickupMessage "Super Ethereal Crossbow \cx[Slot 3] (can now dual wield)\c-";
		Weapon.selectionorder 400;
		Weapon.AmmoType1 "CrossbowAmmo";
		Weapon.AmmoType2 "CrossbowAmmo";
		Weapon.Kickback 75;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoGive 8;
		Tag "Dual Super Ethereal Crossbows";
	}
	
	states
	{
		Spawn:
			WBOW B -1;
			stop;
		Ready: 
			SCRD AAAAAABBBBBBCCCCCC 1 A_WeaponReady();
			Loop;
		Deselect:
			SCRD AAAAAABBBBBBCCCCCC 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			SCRD AAAAAABBBBBBCCCCCC 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			SCRD A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			SCRD D 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/bowshoot",1);
				A_StartSound("weapons/bowshoot",1);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  4.0-6.0, 0,             "", (-14*0.5)-3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0-6.0, 0,             "",   0-3,  (10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0-6.0, 0,             "",   0-3,  (10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",  0.0-6.0, 1, "CrossbowAmmo",  (-7*0.5)-3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",  0.0-6.0, 1, "CrossbowAmmo",  (7*0.5)-3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0-6.0, 0,             "",   0-3, (-10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0-6.0, 0,             "",   0-3, (-10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -4.0-6.0, 0,             "",  (14*0.5)-3,   0, 0, 0);
			}
			SCRD E 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/bowshoot",1);
				A_StartSound("weapons/bowshoot",1);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  4.0+6.0, 0,             "", (-14*0.5)+3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0+6.0, 0,             "",   0+3,  (10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0+6.0, 0,             "",   0+3,  (10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",  0.0+6.0, 1, "CrossbowAmmo",  (-7*0.5)+3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX1New",  0.0+6.0, 1, "CrossbowAmmo",  (7*0.5)+3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0+6.0, 0,             "",   0+3, (-10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0+6.0, 0,             "",   0+3, (-10*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -4.0+6.0, 0,             "",  (14*0.5)+3,   0, 0, 0);
			}
			SCRD F 10
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(4); }
			}
			SCRD G 12 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
			}
			SCRD H 6 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
			}
			SCRD H 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			SCRD H 0 A_ReFire();
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			SCRD A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			SCRD D 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0-6.0, 0,             "",   (7*0.5)-3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0-6.0, 0,             "",   0-3,  (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0-6.0, 0,             "",   0-3,  (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0-6.0, 0,             "",   0-3,  (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0-6.0, 0,             "",   0-3,  (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0-6.0, 0,             "",   0-3,  (8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0-6.0, 0,             "",   0-3,  (8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0-6.0, 1, "CrossbowAmmo", (-14*0.5)-3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0-6.0, 1, "CrossbowAmmo", (14*0.5)-3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0-6.0, 0,             "",   0-3, (-8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0-6.0, 0,             "",   0-3, (-8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0-6.0, 0,             "",   0-3, (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0-6.0, 0,             "",   0-3, (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0-6.0, 0,             "",   0-3, (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0-6.0, 0,             "",   0-3, (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0-6.0, 0,             "",  (-7*0.5)-3,   0, 0, 0);
			}
			SCRD E 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_StartSound("weapons/bowshoot");
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0+6.0, 0,             "",   (7*0.5)+3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0+6.0, 0,             "",   0+3,  (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0+6.0, 0,             "",   0+3,  (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0+6.0, 0,             "",   0+3,  (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0+6.0, 0,             "",   0+3,  (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0+6.0, 0,             "",   0+3,  (8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0+6.0, 0,             "",   0+3,  (8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0+6.0, 1, "CrossbowAmmo", (-14*0.5)+3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0+6.0, 1, "CrossbowAmmo", (14*0.5)+3,   0, 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New",  2.0+6.0, 0,             "",   0+3, (-8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX3New", -2.0+6.0, 0,             "",   0+3, (-8*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0+6.0, 0,             "",   0+3, (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0+6.0, 0,             "",   0+3, (-4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  1.0+6.0, 0,             "",   0+3, (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New", -1.0+6.0, 0,             "",   0+3, (4*0.5), 0, 0);
				A_SpreadAuraFireProjectile("CrossbowFX2New",  0.0+6.0, 0,             "",  (-7*0.5)+3,   0, 0, 0);
			}
			SCRD FG 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
			}
			SCRD H 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
			}
			SCRD H 2
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
			}
			SCRD H 0 A_ReFire();
			goto Ready;
	}
}

// Dragon Claw[s]
class RipperNew : RipperBase
{
	default
	{
		Tag "DragonClaw Ripper";
		DamageType "Magic";
		Radius 8;
		Height 6;
		Speed 14;
		DamageFunction (finaldamagedealt); // 1
		Projectile;
		+RIPPER;
		DeathSound "weapons/blasterpowhit";
		Obituary "$OB_MPPBLASTER";
	}
	
	States
	{
		Spawn:
			FX18 M 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(24,0);
				A_ScaleVelocity(1.00-((WandMastPerkLvl*0.05)-(WandMastEXPerkLvl*0.125)));
			}
		Idle:
			FX18 MMMMNNNNN 1 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(24,0); 
			}
			Loop;
		Death:
			FX18 OPQRS 4 Bright;
			Stop;
	}
}
class BlasterPuffNew : AetheriusProjectileZSC 
{
	default
	{
		Tag "DragonClaw Shot";
		DamageType "Magic";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+PUFFONACTORS;
		RenderStyle "Add";
		SeeSound "weapons/blasterhit";
	}
	
	States
	{
		Crash:
			FX17 ABCDE 4 Bright;
			Stop;
		Spawn:
			FX17 FG 3 Bright;
			FX17 HIJKL 4 Bright;
			Stop;
	}
}
class BlasterFX1New : BlasterFX1Base 
{
	default
	{
		Tag "DragonClaw Blast";
		Radius 12;
		Height 8;
		Speed 184;
		DamageFunction (finaldamagedealt); //2
		DamageType "Magic";
		SeeSound "weapons/blastershoot";
		DeathSound "weapons/blasterhit";
		+SPAWNSOUNDSOURCE;
		Obituary "$OB_MPPBLASTER";
	}
	
	States
	{
		Spawn:
			ACLO E 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(28,0); 
			}
		Idle:
			ACLO EEEEEEEE 1 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(28,0); 
			}
			Loop;
		Death:
			FX18 A 3 Bright A_SpawnRippers("RipperNew");
			FX18 B 3 Bright;
			FX18 CDEFG 4 Bright;
			Stop;
	}
}

class DragonClawNew : HereticWeaponBase replaces Blaster
{
	default
	{
		+BLOODSPLATTER;
		Weapon.Kickback 25;
		Weapon.SelectionOrder 500;
		Weapon.AmmoGive 30;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 5;
		Weapon.AmmoType1 "BlasterAmmo";
		Weapon.AmmoType2 "BlasterAmmo";
		Weapon.YAdjust 0;
		Inventory.PickupMessage "Dragon Claw \cx[Slot 4]\c-";
		Tag "$TAG_BLASTER";
		Obituary "$OB_MPBLASTER";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(144,1);
			TNT1 A 0 A_SigilPieceSpawn(144,1);
		Idle:
			TNT1 A 0
			{
				if (CountInv("DragonClawNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualDragonClawNew");
					A_FadeOut(1,1);
				}
			}
			WBLS A 1;
			Loop;
		Ready:
			FBLS A 1 A_WeaponReady();
			Loop;
		Deselect:
			FBLS A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			FBLS A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			FBLS BC 3
			{
				if (A_CheckBerserk())
				{
					A_SetTics(random(1,2));
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(3);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				}
			}
		Hold:
			FBLS D 2
			{
				if (A_CheckBerserk())
				{
					A_SetTics(1);
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				}

				CallACS("StartTensionCountDown");	
				A_StartSound("weapons/blastershoot",1);
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(14),A_GetHitScanYSpread(14),1, A_GetPlayerAttackDamage(27,1),"BlasterPuffNew",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,1,"BlasterAmmo");
			}
			FBLS CB 2
			{
				if (A_CheckBerserk())
				{
					A_SetTics(1);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				}
			}
			FBLS A 0 A_ReFire();
			goto Ready;
		AltFire:
			FBLS BC 0;
		AltHold:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			FBLS D 3 
			{
				if (A_CheckBerserk())
				{
					A_SetTics(random(1,2));
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(3);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				}

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/blastershoot",1);
				A_SpreadAuraFireProjectile("BlasterFX1New",0,5,"BlasterAmmo",0,0,0,0);
			}
			FBLS CB 4
			{
				if (A_CheckBerserk())
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(random(1,2)); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(4);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				}
			}
			FBLS A 0 A_ReFire();
			goto Ready;
	}
}
class DualDragonClawNew : HereticWeaponBase
{
	default
	{
		+BLOODSPLATTER;
		Weapon.Kickback 25;
		Weapon.SelectionOrder 500;
		Weapon.AmmoGive 30;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 5;
		Weapon.AmmoType1 "BlasterAmmo";
		Weapon.AmmoType2 "BlasterAmmo";
		Weapon.YAdjust 0;
		Inventory.PickupMessage "Dragon Claw \cx[Slot 4] (can now dual wield)\c-";
		Tag "Dual Dragon Claws";
		Obituary "$OB_MPBLASTER";
	}
	
	States
	{
		Spawn:
			WBLS A -1;
			Stop;
		Ready:
			FDBL A 1 A_WeaponReady();
			Loop;
		Deselect:
			FDBL A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			FDBL A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			FDBL BC 3
			{
				if (A_CheckBerserk())
				{
					A_SetTics(random(1,2));
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(3);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				}
			}
		Hold:
			FDBL DE 2
			{
				if (A_CheckBerserk())
				{
					A_SetTics(1);
				}
				else
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				}

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/blastershoot",1);
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(14),A_GetHitScanYSpread(14),1, A_GetPlayerAttackDamage(27,1),"BlasterPuffNew",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,1,"BlasterAmmo");
			}
			FDBL FG 2
			{
				if (A_CheckBerserk())
				{
					A_SetTics(1);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				}
			}
			FDBL A 0 A_ReFire();
			goto Ready;
		AltFire:
			FDBL BC 0;
		AltHold:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			FDBL DE 3 
			{
				if (A_CheckBerserk())
				{
					A_SetTics(random(1,2));
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(3);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				}

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/blastershoot",1);
				A_SpreadAuraFireProjectile("BlasterFX1New",0,5,"BlasterAmmo",0,0,0,0);
			}
			FDBL FG 4
			{
				if (A_CheckBerserk())
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(random(1,2)); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(random(0,1)); }
				}
				else
				{
					A_SetTics(4);
					if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				}
			}
			FDBL A 0 A_ReFire();
			goto Ready;
	}
}

// Hellstaff[s]
class HornRodFX1New : AetheriusProjectileZSC 
{
	default
	{
		Tag "Hellstaff Shot";
		Radius 12;
		Height 8;
		Speed 22;
		DamageFunction (finaldamagedealt); // 3
		DamageType "Magic" ;
		Projectile;
		+WINDTHRUST;
		-NOBLOCKMAP;
		RenderStyle "Add";
		SeeSound "weapons/hornrodshoot";
		DeathSound "weapons/hornrodhit";
		Obituary "$OB_MPSKULLROD";
	}
	
	States
	{
		Spawn:
			FX00 A 0 Bright NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(31,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX00 AB 6 Bright;
			Loop;
		Death:
			FX00 H 5 Bright
			{
				finaldamagedealt = A_GetPlayerAttackDamage(31,0);
				A_Explode((finaldamagedealt/8),(16+(WandMastPerkLvl*8)+(WandMastEXPerkLvl*20)),0,0,(8+(WandMastPerkLvl*4)+(WandMastPerkLvl*10)));
			}
			FX00 I 5 Bright;
			FX00 JK 4 Bright;
			FX00 LM 3 Bright;
			Stop;
	}
}
class HornRodFX2New : HornRodFX2Base
{
	default
	{
		Tag "Hellrain Blast";
		DamageFunction (finaldamagedealt); //2
		DamageType "Magic";
		+SEEKERMISSILE;
		species "Players";
		+THRUSPECIES;
	}
	
	States
	{
		Spawn:
			FX00 C 0 Bright NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(32,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX00 C 0 Bright 
			{ 
				A_ScaleVelocity(1.0625);
				user_fuse = random(120,160); 
			}
			FX00 C 3 Bright;
			FX00 D 3 Bright A_SeekerMissile(10,30,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,96,32);
			FX00 E 3 Bright;
			FX00 F 3 Bright A_SeekerMissile(10,30,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,96,32);
			Loop;
		Death:
			FX00 H 5 Bright;
			FX00 I 5 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(32,0);
				A_Explode((16+random(-9,9)+(finaldamagedealt/8)),(32+(WandMastPerkLvl*16)+(WandMastEXPerkLvl*40)),0,0,(16+(WandMastPerkLvl*8)+(WandMastPerkLvl*20)));
			}
			FX00 J 4 Bright;
			FX00 KLM 3 Bright;
			FX00 G 1 A_HideInCeiling();
			FX00 G 1 A_SkullRodStorm("RainPillarNew", 64,64, 231,16,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0);
			Wait;
	}
}
class RainPillarNew : RainPillarBase replaces RainPillar 
{
	default
	{
		Tag "Hellstaff Raindrop";
		DamageFunction (finaldamagedealt); //5
		DamageType "Magic" ;
		ProjectileKickback 6;
		species "Players";
		+THRUSPECIES;
	}
	
	States
	{
		Spawn:
			FX22 A 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(43,0); 
			}
		Idle:
			FX22 A -1 Bright;
			Stop;
		Death:
			FX22 B 4 Bright A_RainImpact();
			FX22 CDEF 4 Bright;
			Stop;
		NotFloor:
			FX22 GHI 4 Bright;
			Stop;
	}
}

class HellStaffNew : HereticWeaponBase replaces SkullRod
{
	default
	{
		Weapon.SelectionOrder 200;
		Weapon.Kickback 25;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 5;
		Weapon.AmmoGive1 50;
		Weapon.YAdjust 0;
		Weapon.AmmoType1 "SkullRodAmmo";
		Weapon.AmmoType2 "SkullRodAmmo";
		Inventory.PickupMessage "Hellstaff \cx[Slot 5]\c-";
		Tag "$TAG_SKULLROD";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(144,1);
			TNT1 A 0 A_SigilPieceSpawn(144,1);
		Idle:
			WSKL A 0
			{
				if (CountInv("HellStaffNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualHellStaffNew");
					A_FadeOut(1,1);
				}
			}
			WSKL A 1;
			Loop;
		Ready:
			HROD A 1 A_WeaponReady();
			Loop;
		Deselect:
			HROD A 1 
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			HROD A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			HROD AB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/hornrodshoot",1);
				A_SpreadAuraFireProjectile("HornRodFX1New",0,1,"SkullRodAmmo",0,0,0,0);
			}
			HROD B 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			HROD C 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			HROD D 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			HROD E 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			HROD F 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			HROD G 4 // A_FireSkullRodPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/hornrodpowshoot",1);
				A_SpreadAuraFireProjectile("HornRodFX2New",0,5,"SkullRodAmmo",0,0,1,0);
			}
			HROD F 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			HROD E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			HROD DC 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			HROD C 0 A_ReFire();
			Goto Ready;
	}
}
class DualHellStaffNew : HereticWeaponBase
{
	default
	{
		Weapon.SelectionOrder 200;
		Weapon.Kickback 25;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 5;
		Weapon.AmmoGive1 50;
		Weapon.YAdjust 0;
		Weapon.AmmoType1 "SkullRodAmmo";
		Weapon.AmmoType2 "SkullRodAmmo";
		Inventory.PickupMessage "Hellstaff \cx[Slot 5] (can now dual wield)\c-";
		Tag "Dual HellStaves";
	}
	
	States
	{
		Spawn:
			WSKL A -1;
			Stop;
		Ready:
			DHRD A 1 A_WeaponReady();
			Loop;
		Deselect:
			DHRD A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			DHRD A 1
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			DHRD AB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/hornrodshoot",1);
				A_StartSound("weapons/hornrodshoot",1);
				A_SpreadAuraFireProjectile("HornRodFX1New", 3,1,"SkullRodAmmo", 3,0,0,0);
				A_SpreadAuraFireProjectile("HornRodFX1New",-3,1,"SkullRodAmmo",-3,0,0,0);
			}
			DHRD B 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			DHRD C 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			DHRD D 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			DHRD E 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			DHRD F 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			DHRD G 4 // A_FireSkullRodPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/hornrodpowshoot",1);
				A_SpreadAuraFireProjectile("HornRodFX2New", 3,5,"SkullRodAmmo", 3,0,1,0);
				A_SpreadAuraFireProjectile("HornRodFX2New",-3,5,"SkullRodAmmo",-3,0,1,0);
			}
			DHRD F 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			DHRD E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			DHRD DC 2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
			}
			DHRD C 0 A_ReFire();
			Goto Ready;
	}
}

// Pheonix Rod[s]
class PhoenixPuff2 : PhoenixPuff
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOTELEPORT;
		+CANNOTPUSH;
		Scale 0.75;
		RenderStyle "Add";
		Alpha 0.30;
	}
	
	States
	{
		Spawn:
			FX04 BCDEF 2;
			Stop;
	}
}

class PhoenixFX1New : PhoenixFX1Base
{
	double user_ignoreaoeimmunity;
	default
	{
		Tag "Phoenix Shot";
		DamageFunction (finaldamagedealt); //2
		DamageType "Fire";
	}
	
	States
	{
		Spawn:
			FX04 A 0 Bright NoDelay 
			{ 
				bFORCERADIUSDMG = false;
				user_ignoreaoeimmunity = (WandMastPerkLvl * 1.25) + (WandMastEXPerkLvl * 3.125);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }

				finaldamagedealt = A_GetPlayerAttackDamage(33,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX04 A 4 Bright A_PhoenixPuff();
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/phoenixhit");
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
			}
			FX08 A 6 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(60,0);
				A_Explode((finaldamagedealt),128,1);
			}
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}
class PhoenixFX1NoAOE : PhoenixFX1New // Spread shots of Phoenix Rod, cannot deal self-AOE [necessary due to how Spreader Aura spreads out extra shots]
{
	default
	{
		Tag "Phoenix Shot";
		DamageFunction (finaldamagedealt); //2
		DamageType "Fire";
	}
	
	States
	{
		Spawn:
			FX04 A 0 Bright NoDelay 
			{ 
				bFORCERADIUSDMG = false;
				user_ignoreaoeimmunity = (WandMastPerkLvl * 1.25) + (WandMastEXPerkLvl * 3.125);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }

				finaldamagedealt = A_GetPlayerAttackDamage(33,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX04 A 4 Bright A_PhoenixPuff();
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/phoenixhit");
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
			}
			FX08 A 6 Bright A_Explode(128,128,0);
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}
class PhoenixFX1Seeking : PhoenixFX1New
{
	double user_seekstrength;
	int user_specificTarget;
	default
	{
		Tag "Phoenix Seeker";
		Speed 15; // 20
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			FX04 A 0 NoDelay 
			{
				bFORCERADIUSDMG = false;
				user_ignoreaoeimmunity = (WandMastPerkLvl * 1.25) + (WandMastEXPerkLvl * 3.125);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }

				finaldamagedealt = A_GetPlayerAttackDamage(33,0);
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.05)+(WandMastEXPerkLvl*0.125)));

				user_seekstrength = (WandMastPerkLvl + (WandMastEXPerkLvl * 2)) * 2;
				if (user_seekstrength > 0)
				{
					bSEEKERMISSILE = true;
					if (random(1,4) == 1) { bTHRUGHOST = false; } else { bTHRUGHOST = true; }
					
					// When the rocket is first fired, check if it's being aimed at a specific target. If so, lock on to that target.
					user_specificTarget = A_SelectSeekTargetByShooterAim();
				}
				// This is needed so that subclasses can override the Idle state.
				return resolvestate("Idle");
			}
		Idle:
			FX04 A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			FX04 A 1 Bright 
			{
				//A_PhoenixPuff("PhoenixPuff2",45.0*random(1,2),1.3);
				A_PhoenixPuff("PhoenixPuff2",11.25*random(1,8),1.3);
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			Loop;
	}
}
class PhoenixFX1NoAOESeeking : PhoenixFX1NoAOE
{
	double user_seekstrength;
	int user_specificTarget;
	default
	{
		Tag "Phoenix Seeker";
		Speed 15; // 20
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			FX04 A 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(33,0);
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.05)+(WandMastEXPerkLvl*0.125)));
				user_seekstrength = (WandMastPerkLvl + (WandMastEXPerkLvl * 2)) * 2;
				if (user_seekstrength > 0)
				{
					bSEEKERMISSILE = true;
					if (random(1,4) == 1) { bTHRUGHOST = false; } else { bTHRUGHOST = true; }
					
					// When the rocket is first fired, check if it's being aimed at a specific target. If so, lock on to that target.
					user_specificTarget = A_SelectSeekTargetByShooterAim();
				}
				// This is needed so that subclasses can override the Idle state.
				return resolvestate("Idle");
			}
		Idle:
			FX04 A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			FX04 A 1 Bright 
			{
				A_PhoenixPuff("PhoenixPuff2",11.25*random(1,8),1.3);
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			Loop;
	}
}
class PhoenixFX2New : PhoenixFX2Base
{
	default
	{
		Tag "Phoenix Flame";
		DamageFunction (finaldamagedealt); //2
		DamageType "Fire";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
	}
	
	States
	{
		Spawn:
			FX09 A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(34,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.05)+(WandMastEXPerkLvl*0.125)));
			}
		Idle:
			FX09 ABABA 2 Bright;
			FX09 B 2 Bright A_FlameEnd();
			FX09 CDEF 2 Bright;
			Stop;
		Death:
			FX09 G 3 Bright;
			FX09 H 3 Bright A_FloatPuff();
			FX09 I 4 Bright;
			FX09 JK 5 Bright;
			Stop;
	}
}
class PhoenixFX2Seeking : PhoenixFX2Base
{
	double user_seekstrength;
	int user_specificTarget;
	default
	{
		Tag "Phoenix Flame Seeker";
		Scale 0.75;
	}
	States
	{
		Spawn:
			FX09 A 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(34,0);
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.05)+(WandMastEXPerkLvl*0.125)));
				user_seekstrength = (WandMastPerkLvl + (WandMastEXPerkLvl * 2)) * 4;
				if (user_seekstrength > 0)
				{
					bSEEKERMISSILE = true;
					
					// When the rocket is first fired, check if it's being aimed at a specific target. If so, lock on to that target.
					user_specificTarget = A_SelectSeekTargetByShooterAim();
				}
				// This is needed so that subclasses can override the Idle state.
				return resolvestate("Idle");
			}
		Idle:
			FX09 AABBAABBAA 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			FX09 B 1 Bright 
			{
				A_FlameEnd();
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			FX09 BCCDDEEFF 1 Bright
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			Stop;
	}
}
class PhoenixRodNew : HereticWeaponBase replaces PhoenixRod 
{
	default
	{
		+WEAPON.NOAUTOFIRE;
		Weapon.SelectionOrder 2600;
		Weapon.Kickback 38;
		Weapon.YAdjust 0;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive 2;
		Weapon.AmmoType1 "PhoenixRodAmmo";
		Weapon.AmmoType2 "PhoenixRodAmmo";
		Inventory.PickupMessage "Phoenix Rod \cx[Slot 6]\c-";
		Tag "$TAG_PHOENIXROD";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1);
			TNT1 A 0 A_SigilPieceSpawn(96,1);
		Idle:
			WPHX A 0
			{
				if (CountInv("PhoenixRodNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualPhoenixRodNew");
					A_FadeOut(1,1);
				}
			}
			WPHX A 1;
			Loop;
		Ready:
			PHNX A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			PHNX A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			PHNX A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			PHNX B 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			PHNX C 7
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(4); }

				CallACS("StartTensionCountDown");
				if (CountInv("PRMode") == 0)
				{
					A_SpreadAuraFireProjectileAoE("PhoenixFX1New","PhoenixFX1NoAOE",0,1,"PhoenixRodAmmo",0,0,0,0);
				}
				else
				if (CountInv("PRMode") == 1)
				{
					A_SpreadAuraFireProjectileAoE("PhoenixFX1Seeking","PhoenixFX1NoAOESeeking",0,1,"PhoenixRodAmmo",0,0,0,0);
				}

				A_GetWeaponShotRecoil(1);
			}
			PHNX DB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			PHNX B 0 A_ReFire();
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
					return resolvestate(null);
				}
				else
				{
					if (CountInv("PhoenixRodAmmo") >= 1) 
					{
						if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
						return resolvestate(null);
					}
					else
					{
						if (CountInv("FlameCount") >= 1) 
						{
							if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
							return resolvestate(null);
						}
						else
						{
							return resolvestate("Ready");
						}
					}
				}
			}
			PHNX B 3 // A_InitPhoenixPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }

				A_FlameCount(0,350);
			}
		AltHold:
			PHNX C 1 // A_FirePhoenixPL2
			{
				CallACS("StartTensionCountDown");
				string type = "PhoenixFX2New";
				if (CountInv("PRMode") == 1) type = "PhoenixFX2Seeking";

				A_SpreadAuraFireProjectile(type,random(-2,2),0,"",random(-2,2),0,1,2);
				A_StartSound("weapons/phoenixpowshoot",1,CHANF_NOSTOP,1.0,ATTN_NORM);
				A_FlameCount(1,-1);
				A_FlameCount(2,350);
			}
			PHNX B 4 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
				A_ReFire();
			}
		AltPowerdown:
			PHNX B 4 // A_ShutdownPhoenixPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				A_StopSound(1);
			}
			goto Ready;
			
		// Fire Mode
		User4:
			PHNX A 0
			{
				if (CountInv("PRMode") == 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10053) > 0)
					{
						A_SetInventory("PRMode",1);
						A_Print("Using Seeking Shots");
						A_StartSound("world/lavasizzle",0);
					}
				}
				else
				if (CountInv("PRMode") == 1)
				{
					A_SetInventory("PRMode",0);
					A_Print("Using Non-Seeking Shots");
					A_StartSound("world/lavasizzle",0);
				}
			}
			PHNX A 8;
			goto Ready;
	}
}
class DualPhoenixRodNew : HereticWeaponBase
{
	default
	{
		+WEAPON.NOAUTOFIRE;
		Weapon.SelectionOrder 2600;
		Weapon.Kickback 38;
		Weapon.YAdjust 0;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive 2;
		Weapon.AmmoType1 "PhoenixRodAmmo";
		Weapon.AmmoType2 "PhoenixRodAmmo";
		Inventory.PickupMessage "Phoenix Rod \cx[Slot 6] (can now dual wield)\c-";
		Tag "Dual Phoenix Rods";
	}
	
	States
	{
		Spawn:
			WPHX A -1;
			Stop;
		Ready:
			PHND A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			PHND A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			PHND A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			PHND B 5
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			PHND C 7
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(4); }

				CallACS("StartTensionCountDown");
				if (CountInv("PRMode") == 0)
				{
					A_SpreadAuraFireProjectileAoE("PhoenixFX1New","PhoenixFX1NoAOE", 3,1,"PhoenixRodAmmo", 3,0,0,0);
					A_SpreadAuraFireProjectileAoE("PhoenixFX1New","PhoenixFX1NoAOE",-3,1,"PhoenixRodAmmo",-3,0,0,0);
				}
				else
				if (CountInv("PRMode") == 1)
				{
					A_SpreadAuraFireProjectileAoE("PhoenixFX1Seeking","PhoenixFX1NoAOESeeking", 3,1,"PhoenixRodAmmo", 3,0,0,0);
					A_SpreadAuraFireProjectileAoE("PhoenixFX1Seeking","PhoenixFX1NoAOESeeking",-3,1,"PhoenixRodAmmo",-3,0,0,0);
				}

				A_GetWeaponShotRecoil(2);
			}
			PHND DB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			PHND B 0 A_ReFire();
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
					return resolvestate(null);
				}
				else
				{
					if (CountInv("PhoenixRodAmmo") >= 2) 
					{
						if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
						return resolvestate(null);
					}
					else
					{
						if (CountInv("DualFlameCount") >= 1) 
						{
							if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
							return resolvestate(null);
						}
						else
						{
							return resolvestate("Ready");
						}
					}
				}
			}
			PHND B 3 // A_InitPhoenixPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }

				A_FlameCount(0,350);
			}
		AltHold:
			PHND C 1 // A_FirePhoenixPL2
			{
				CallACS("StartTensionCountDown");
				string type = "PhoenixFX2New";
				if (CountInv("PRMode") == 1) type = "PhoenixFX2Seeking";

				A_SpreadAuraFireProjectile(type,random(-5,1),0,"",random(-5,1),0,1,2);
				A_SpreadAuraFireProjectile(type,random(1,5),0,"",random(1,5),0,1,2);
				
				A_StartSound("weapons/phoenixpowshoot",1,CHANF_NOSTOP,1.0,ATTN_NORM);
				A_StartSound("weapons/phoenixpowshoot",2,CHANF_NOSTOP,1.0,ATTN_NORM);
				A_FlameCount(1,-1);
				A_FlameCount(2,350);
			}
			PHND B 4 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				A_ReFire();
			}
		AltPowerdown:
			PHND B 4 // A_ShutdownPhoenixPL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				A_StopSound(1);
				A_StopSound(2);
			}
			goto Ready;
			
		// Fire Mode
		User4:
			PHND A 0
			{
				if (CountInv("PRMode") == 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10053) > 0)
					{
						A_SetInventory("PRMode",1);
						A_Print("Using Seeking Shots");
						A_StartSound("world/lavasizzle",0);
					}
				}
				else
				if (CountInv("PRMode") == 1)
				{
					A_SetInventory("PRMode",0);
					A_Print("Using Non-Seeking Shots");
					A_StartSound("world/lavasizzle",0);
				}
			}
			PHND A 8;
			goto Ready;
	}
}

// Firemace[s]
class MaceFX1New : MaceFX1Base
{
	default
	{
		Tag "Mace Minisphere";
		DamageFunction (finaldamagedealt); //2
		BounceType "HexenCompat";
		BounceFactor 0.85;
		BounceCount 4;
		DamageType "Magic";
	}
	
	States
	{
		Spawn:
			FX02 A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(35,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.1)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX02 AB 4 A_MacePL1Check();
			Loop;
		Death:
			FX02 F 4 BRIGHT A_MaceBallImpact();
			FX02 GHIJ 4 BRIGHT;
			Stop;
	}
}
class MaceFX2New : MaceFX2Base 
{ 
	default
	{
		Tag "Mace Sphere";
		DamageFunction (finaldamagedealt); //2
		BounceType "HexenCompat";
		BounceFactor 0.85;
		BounceCount 4;
		DamageType "Magic";
	}
	
	States
	{
		Spawn:
			FX02 C 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(36,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.1)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX02 CD 4;
			Loop;
	}
}
class MaceFX3New : MaceFX3Base
{
	default
	{
		Tag "Mace Sphere";
		DamageFunction (finaldamagedealt); //2
		BounceType "HexenCompat";
		BounceFactor 0.85;
		BounceCount 4;
		DamageType "Magic";
	}
	
	States
	{
		Spawn:
			FX02 A 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(37,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.1)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX02 AB 4;
			Loop;
	}
}
class MaceFX4New : MaceFX4Base
{
	default
	{
		Tag "Mace Megasphere";
		DamageFunction (finaldamagedealt); //2
		BounceType "HexenCompat";
		BounceFactor 0.925;
		BounceCount 8;
		DamageType "Magic";
	}
	States
	{
		Spawn:
			FX02 E 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(38,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.1)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX02 E 99;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/phoenixhit");
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
			}
			FX02 C 4 A_DeathBallImpact();
			FX02 GHIJ 4 BRIGHT;
			Stop;
	}
}

class MaceSpawnerNew : MaceSpawner replaces MaceSpawner
{
	default
	{
		+NOSECTOR;
		+NOBLOCKMAP;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			TNT1 A -1 A_SpawnItemEx("FiremaceNew");
			Stop;
	}
}

class FiremaceNew : HereticWeaponBase replaces Mace
{
	default
	{
		Weapon.SelectionOrder 1400;
		Weapon.Kickback 13;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 5;
		Weapon.AmmoGive1 50;
		Weapon.YAdjust 0;
		Weapon.AmmoType1 "MaceAmmo";
		Weapon.AmmoType2 "MaceAmmo";
		Inventory.PickupMessage "Firemace \cx[Slot 7]\c-";
		Tag "$TAG_MACE";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(112,1);
			TNT1 A 0 A_SigilPieceSpawn(112,1);
		Idle:
			WMCE A 0
			{
				if (CountInv("FiremaceNew",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("DualFiremaceNew");
					A_FadeOut(1,1);
				}
			}
			WMCE A 1;
			Loop;
		Ready:
			MACE A 1 A_WeaponReady();
			Loop;
		Deselect:
			MACE A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			MACE A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			MACE B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
		Hold:
			MACE CDEF 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/maceshoot",1);
				if (random(1,100) <= 89) 
				{
					A_SpreadAuraFireProjectile("MaceFX1New",frandom(-4.21875,4.21875),1,"MaceAmmo",0,0,0,0);
				}
				else 
				{
					A_SpreadAuraFireProjectile("MaceFX2New",0,1,"MaceAmmo",0,0,0,-2);
				}
			}
			MACE C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				A_ReFire();
			}
			MACE DEFB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			goto Ready;
		AltFire:
		AltHold:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			MACE B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			MACE D 4 // A_FireMacePL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/maceshoot",1);
				A_SpreadAuraFireProjectile("MaceFX4New",0,5,"MaceAmmo",0,0,1,0);
			}
			MACE B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			MACE A 8 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_ReFire();
			}
			goto Ready;
	}
}
class DualFiremaceNew : HereticWeaponBase
{
	default
	{
		Weapon.SelectionOrder 1400;
		Weapon.Kickback 13;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 5;
		Weapon.AmmoGive1 50;
		Weapon.YAdjust 0;
		Weapon.AmmoType1 "MaceAmmo";
		Weapon.AmmoType2 "MaceAmmo";
		Inventory.PickupMessage "Firemace \cx[Slot 7] (can now dual wield)\c-";
		Tag "Dual Firemaces";
	}
	
	States
	{
		Spawn:
			WMCE A -1;
			Stop;
		Ready:
			DMAC A 1 A_WeaponReady();
			Loop;
		Deselect:
			DMAC A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			DMAC A 1
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			DMAC B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
		Hold:
			DMAC CDEF 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/maceshoot",1);
				A_StartSound("weapons/maceshoot",1);
				if (random(1,100) <= 89) 
				{
					A_SpreadAuraFireProjectile("MaceFX1New",frandom(-6.328125,2.109375),1,"MaceAmmo",frandom(-3,1),0,0,0);
					A_SpreadAuraFireProjectile("MaceFX1New",frandom(-2.109375,6.328125),1,"MaceAmmo",frandom(-1,3),0,0,0);
				}
				else 
				{
					A_SpreadAuraFireProjectile("MaceFX2New",frandom(2,0),1,"MaceAmmo", frandom(2,0),0,0,-2);
					A_SpreadAuraFireProjectile("MaceFX2New",frandom(0,-2),1,"MaceAmmo",frandom(0,-2),0,0,-2);
				}
			}
			DMAC C 4 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
				A_ReFire();
			}
			DMAC DEFB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			goto Ready;
		AltFire:
		AltHold:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			DMAC B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			DMAC D 4 // A_FireMacePL2
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_StartSound("weapons/maceshoot",1);
				A_StartSound("weapons/maceshoot",1);
				A_SpreadAuraFireProjectile("MaceFX4New", random(4,0),5,"MaceAmmo", random(4,0),0,1,0);
				A_SpreadAuraFireProjectile("MaceFX4New",random(0,-4),5,"MaceAmmo",random(0,-4),0,1,0);
			}
			DMAC B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(2); }
			}
			DMAC A 8
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_ReFire();
			}
			goto Ready;
	}
}

// D'Sparil's Staff[s]
// D'Sparil
class Sorcerer2FX1New : AetheriusProjectileZSC replaces Sorcerer2FX1 
{
	default
	{
		Tag "Staff ElectroBlast";
		DamageFunction (10 * random(1,8));
		DamageType "Thunder";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode(random(80,111),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX1Crisis : Sorcerer2FX1New 
{ 
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode((random(80,111)*CrisisMultiplier),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}

class Sorcerer2FX2New : AetheriusProjectileZSC replaces Sorcerer2FX2 
{ 
	default
	{
		Tag "Staff Wizard Shot";
		DamageFunction (10 * random(1,8));
		DamageType "Magic";
		Height 6;
		Speed 6;
		Damage 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAA 5 Bright;
			FX11 A 5 Bright
			{
				A_GenWizard();
			}
			FX11 B 5 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
class Sorcerer2FX2Crisis : Sorcerer2FX2New 
{
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAAAAAAAA 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			FX11 A 3 Bright 
			{
				A_GenWizard();
			}
			FX11 BB 3 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}

class Sorcerer2FX1Player : Sorcerer2FX1New
{
	default
	{
		Tag "Staff ElectroBlast";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		DamageFunction (finaldamagedealt); //20
		DamageType "Thunder";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+FORCERADIUSDMG;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(39,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.1)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX16 ABC 3 Bright A_BlueSpark();
			Loop;
		Death:
			FX16 G 5 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(61,0);
				A_Explode((finaldamagedealt),128,0);
			}
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX3 : AetheriusProjectileZSC
{
	default
	{
		Tag "Staff Wizard Shot";
		Radius 10;
		Height 6;
		Speed 6;
		DamageFunction (finaldamagedealt); //10
		DamageType "Magic";
		PROJECTILE;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(40,0); 
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.1)+(WandMastEXPerkLvl*0.25)));
			}
		Idle:
			FX11 ABABABAB 5 bright;
			goto Summon;
		Summon:
			FX11 A 0
			{
				A_SpawnItem("TeleportFog",0,0,0,0);
				A_SpawnItem("FWizardSpawner",0,0,0,0);
			}
			stop;
		Death:
			FX11 CDEFG 5 BRIGHT;
			Stop;
	}
}

class DSparilStaff : HereticWeaponBase
{
	default
	{
		Weapon.Kickback 63;
		Weapon.Ammouse1 5;
		Weapon.Ammouse2 15;
		Weapon.Ammogive 50;
		Weapon.Ammotype1 "BlasterAmmo";
		Weapon.Ammotype2 "BlasterAmmo";
		Inventory.Pickupmessage "Staff of D'Sparil \cx[Slot 8]\c-";
		Obituary "%o was no match for %k's staff of D'Sparil";
		Tag "Staff of D'Sparil";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
		Idle:
			DSTA A 0
			{
				if (CountInv("DSparilStaff",AAPTR_PLAYER1))
				{
					if (CountInv("DualDSparilStaff",AAPTR_PLAYER1))
					{
						if (random(1,8) <= 7)
						{
							A_UnmakerSpawn(16,1);
							A_SigilPieceSpawn(16,1);
							A_SpawnItemEx("BlasterHeftySpawner",frandom(-24,24),frandom(-24,24),0,0,0,0,0,SXF_NOCHECKPOSITION);
							A_SpawnItemEx("BlasterHeftySpawner",frandom(-24,24),frandom(-24,24),0,0,0,0,0,SXF_NOCHECKPOSITION);
							A_SpawnItemEx("BlasterHeftySpawner",frandom(-24,24),frandom(-24,24),0,0,0,0,0,SXF_NOCHECKPOSITION);
							A_SpawnItemEx("BlasterHeftySpawner",frandom(-24,24),frandom(-24,24),0,0,0,0,0,SXF_NOCHECKPOSITION);
							Thing_Remove(0);
							return resolvestate("Null");
						}
						else
						{
							A_SpawnItemEx("DualDSparilStaff");
							A_FadeOut(1,1);
						}
						return resolvestate(null);
					}
					else
					{
						A_SpawnItemEx("DualDSparilStaff");
						A_FadeOut(1,1);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DSTA A 1;
			Loop;
		Ready:
			DSTF A 1 A_WeaponReady();
			Loop;
		Deselect:
			DSTF A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			DSTF A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			DSTF B 4 bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_StartSound("dsparil/attack",CHAN_WEAPON);
			}
			DSTF CD 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTF E 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("Sorcerer2FX1Player",0,5,"BlasterAmmo",0,0,0,0);
			}
			DSTF F 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTF A 4 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_ReFire();
			}
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			DSTF B 4 bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_StartSound("dsparil/attack",CHAN_WEAPON);
			}
			DSTF CD 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTF E 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("Sorcerer2FX3", 25,15,"BlasterAmmo", 5,0,0,0);
				A_SpreadAuraFireProjectile("Sorcerer2FX3",-25, 0,           "",-5,0,0,0);
			}
			DSTF F 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTF A 4 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_ReFire();
			}
			goto Ready;
	}
}

class DualDSparilStaff : HereticWeaponBase
{
	default
	{
		Weapon.Kickback 63;
		Weapon.Ammouse1 5;
		Weapon.Ammouse2 15;
		Weapon.Ammogive 50;
		Weapon.Ammotype1 "BlasterAmmo";
		Weapon.Ammotype2 "BlasterAmmo";
		Inventory.Pickupmessage "Staff of D'Sparil \cx[Slot 8] (can now dual wield)\c-";
		Obituary "%o was no match for %k's staves of D'Sparil";
		Tag "Dual Staves of D'Sparil";
	}
	
	States
	{
		Spawn:
			DSTA A 0 NoDelay;
			DSTA A -1;
			Stop;
		Ready:
			DSTD A 1 A_WeaponReady();
			Loop;
		Deselect:
			DSTD A 1
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			DSTD A 1
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			DSTD B 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_StartSound("dsparil/attack",CHAN_WEAPON);
			}
			DSTD C 4 bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTD D 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_StartSound("dsparil/attack",CHAN_AUTO);
			}
			DSTD E 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("Sorcerer2FX1Player",-3,5,"BlasterAmmo",-3,0,0,0);
			}
			DSTD F 4 bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTD G 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("Sorcerer2FX1Player", 3,5,"BlasterAmmo", 3,0,0,0);
			}
			DSTD H 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTD A 4
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_ReFire();
			}
			goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,0,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			DSTD B 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_StartSound("dsparil/attack",CHAN_WEAPON);
			}
			DSTD C 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTD D 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_StartSound("dsparil/attack",CHAN_WEAPON);
			}
			DSTD E 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("Sorcerer2FX3", 25+3,15,"BlasterAmmo", 5+3,0,0,0);
				A_SpreadAuraFireProjectile("Sorcerer2FX3",-25+3, 0,           "",-5+3,0,0,0);
			}
			DSTD F 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTD G 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }

				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("Sorcerer2FX3", 25-3,15,"BlasterAmmo", 5-3,0,0,0);
				A_SpreadAuraFireProjectile("Sorcerer2FX3",-25-3, 0,           "",-5-3,0,0,0);
			}
			DSTD H 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			DSTD A 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
				A_ReFire();
			}
			goto Ready;
	}
}
class PodNew : Pod replaces Pod
{
	default
	{
		Tag "Explosive Pod";
		+PUSHABLE
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}
}

// EggFX
class EggFXNew : EggFX replaces EggFX
{
	default
	{
		Tag "Ovum Shot";
		Radius 8;
		Height 8;
		Speed 18;
		MorphProjectile.PlayerClass "ChickenPlayer";
		MorphProjectile.MonsterClass "Chicken";
		MorphProjectile.MorphStyle MRF_UNDOBYTOMEOFPOWER|MRF_UNDOBYCHAOSDEVICE;
	}
	
	States
	{
		Spawn:
			EGGM ABCDE 4;
			Loop;
		Death:
			FX01 FFGH 3 Bright;
			Stop;
	}
}

// Gargoyles
class HereticImpBallNew : AetheriusProjectileZSC replaces HereticImpBall 
{
	default
	{
		Tag "Gargoyle Fireball";
		Radius 8;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (1 * random(1,8));
		DamageType "Fire";
		Projectile;
		SeeSound "himp/leaderattack";
		DeathSound "misc/fireballsmall";
		+SPAWNSOUNDSOURCE;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX10 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX10 DEFG 5 Bright;
			Stop;
	}
}
class HereticImpBallCrisis : HereticImpBallNew
{
	default
	{
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX10 AAABBBCCC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			FX10 DEFG 5 Bright;
			Stop;
	}
}

class HereticImpBall2 : HereticImpBallNew
{
	default
	{
		Tag "Gargoyle Fireball";
	}
	
	States
	{
		Spawn:
			HIB1 ABC 6 Bright;
			Loop;
		Death:
			HIB1 DEFG 5 Bright;
			Stop;
	}
}
class HereticImpBall2Crisis : HereticImpBallCrisis
{
	States
	{
		Spawn:
			HIB1 AAABBBCCC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			HIB1 DEFG 5 Bright;
			Stop;
	}
}

// WereDragons
class BeastBallNew : AetheriusProjectileZSC replaces BeastBall 
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 9;
		Height 8;
		Speed 12;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "beast/attack";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			FRB1 DEFGH 4;
			Stop;
	}
}
class BeastBallCrisis : BeastBallNew
{
	default
	{
		DamageFunction ((4 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			FRB1 DEFGH 4;
			Stop;
	}
}
class Beastball2 : BeastBallNew
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,0,0,0,0,SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			HIB2 DEFGH 4;
			Stop;
	}
}
class Beastball2Crisis : Beastball2
{
	default
	{
		DamageFunction ((4 * random(1,8)));
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,0,0,0,0,SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			HIB2 DEFGH 4;
			Stop;
	}
}

class PlagueShot : AetheriusEffectProjectile
{
	default
	{
		Tag "Plague Shot";
		DamageFunction (3*random(3,5));
		Radius 8;
		Height 16;
		Speed 16;
		PROJECTILE;
		+THRUGHOST; // Plague Gargoyle Poisonball
		DamageType "Poison";
		scale 0.5;
		SeeSound "himp/leaderattack";
		DeathSound "monster/plaugeBall";
	}

	States
	{
		Spawn:
			FVUL AAABBB 1 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(3);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FVUL CDEF 4 Bright;
			Stop;
	}
}
class PlagueShotCrisis : PlagueShot
{
	default
	{
		DamageFunction ((3*random(3,5)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FVUL AAABBB 1 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16, (random(140,210)*CallACS("CrisisMultiplier",5)) ); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FVUL CDEF 4 Bright;
			Stop;
	}
}

// Golems
class MummyFX1New : AetheriusProjectileZSC replaces MummyFX1 
{
	default
	{
		Tag "Screamer Fireskull";
		Radius 8;
		Height 14;
		Speed 9;
		FastSpeed 18;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		RenderStyle "Add";
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			FX15 A 5 Bright A_StartSound("mummy/head");
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			FX15 C 5 Bright;
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			Loop;
		Death:
			FX15 DEFG 5 Bright;
			Stop;
	}
}
class MummyFX1Crisis : MummyFX1New
{
	default
	{
		DamageFunction ((4 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX15 A 5 Bright 
			{
				A_GenerateCrisisParticle();
				A_StartSound("mummy/head");
			}
			FX15 B 5 Bright 
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(10, 20);
			}
			FX15 C 5 Bright
			{
				A_GenerateCrisisParticle();
			}
			FX15 B 5 Bright 
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(10, 20);
			}
			Loop;
		Death:
			FX15 DEFG 5 Bright;
			Stop;
	}
}

// Undead Knights
class KnightAxeNew : AetheriusEffectProjectile replaces KnightAxe 
{
	default
	{
		Tag "Green Axe";
		DamageFunction (2 * random(1,8));
		DamageType "Magic";
		Radius 10;
		Height 8;
		Speed 9;
		FastSpeed 18;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+THRUGHOST; // Knight Axe [Green]
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			SPAX A 3 Bright
			{
				A_StartSound("hknight/axewhoosh");
			}
			SPAX BC 3 Bright;
			Loop;
		Death:
			SPAX DDEEFF 3 Bright;
			Stop;
	}
}
class KnightAxeCrisis : KnightAxeNew 
{
	default
	{
		DamageFunction ((2 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			SPAX A 3 Bright
			{
				A_GenerateCrisisParticle();
				A_StartSound("hknight/axewhoosh");
			}
			SPAX BC 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			SPAX DDEEFF 3 Bright;
			Stop;
	}
}

class RedAxeNew : KnightAxeNew replaces RedAxe 
{
	default
	{
		Tag "Bloody Axe";
		DamageFunction (7 * random(1,8));
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			RAXE AA 2 Bright;
			RAXE A 1 Bright 
			{
				A_DripBlood();
			}
			RAXE BB 2 Bright;
			RAXE B 1 Bright 
			{
				A_DripBlood();
			}
			Loop;
		Death:
			RAXE CDE 6 Bright;
			Stop;
	}
}
class RedAxeCrisis : RedAxeNew 
{
	default
	{
		DamageFunction ((7 * random(1,8)) * CrisisMultiplier);
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			RAXE AA 2 Bright 
			{
				A_GenerateCrisisParticle();
			}
			RAXE A 1 Bright 
			{
				A_DripBlood();
				A_DripBlood();
				A_DripBlood();
				A_DripBlood();
			}
			RAXE BB 2 Bright 
			{
				A_GenerateCrisisParticle();
			}
			RAXE B 1 Bright 
			{
				A_DripBlood();
				A_DripBlood();
				A_DripBlood();
				A_DripBlood();
			}
			Loop;
		Death:
			RAXE CDE 6 Bright;
			Stop;
	}
}

// Death Knight Attacks
class DKDart : AetheriusProjectileZSC
{
	default
	{
		Tag "Sword Dart";
		DamageFunction (5 * random(1,8));
		Radius 3;
		Height 12;
		Speed 25;
		ExplosionDamage 64;
		ExplosionRadius 64;
		RenderStyle "Add";
		ALPHA 1.00;
		PROJECTILE;
		+THRUGHOST;
		Seesound "monster/dkndrt";
		DeathSound "weapons/firex2";
	}
	
	States
	{
		Spawn:
			DKAT ABC 3 Bright;
			Loop;
		Death:
			DKAT D 0 Bright A_SetTranslucent(0.85,1);
			DKAT D 3 Bright;
			DKAT E 3 Bright A_Explode(64,64);
			DKAT FG 3 Bright;
			DKAT H 3 Bright 
			{
				A_SpawnProjectile("DKFire",0,0,0,2);
				A_SpawnProjectile("DKFire",0,0,45,2);
				A_SpawnProjectile("DKFire",0,0,90,2);
				A_SpawnProjectile("DKFire",0,0,135,2);
				A_SpawnProjectile("DKFire",0,0,180,2);
				A_SpawnProjectile("DKFire",0,0,225,2);
				A_SpawnProjectile("DKFire",0,0,270,2);
				A_SpawnProjectile("DKFire",0,0,315,2);
			}
			DKAT IJKLM 3 Bright;
			Stop;
	}
}
class DKDartCrisis : DKDart
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			DKAT ABC 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			DKAT D 0 Bright A_SetTranslucent (0.85,1);
			DKAT D 3 Bright;
			DKAT E 3 Bright A_Explode((64 * CrisisMultiplier),64);
			DKAT FG 3 Bright;
			DKAT H 3 Bright 
			{
				A_SpawnProjectile("DKFireCrisis",0,0,0,2);
				A_SpawnProjectile("DKFireCrisis",0,0,45,2);
				A_SpawnProjectile("DKFireCrisis",0,0,90,2);
				A_SpawnProjectile("DKFireCrisis",0,0,135,2);
				A_SpawnProjectile("DKFireCrisis",0,0,180,2);
				A_SpawnProjectile("DKFireCrisis",0,0,225,2);
				A_SpawnProjectile("DKFireCrisis",0,0,270,2);
				A_SpawnProjectile("DKFireCrisis",0,0,315,2);
			}
			DKAT IJKLM 3 Bright;
			Stop;
	}
}

class FHeadShot : AetheriusProjectileZSC
{
	default
	{
		Tag "Shield Firehead";
		DamageFunction (10 * random(1,8));
		Radius 12;
		Height 12;
		Speed 15;
		RenderStyle "Add";
		ALPHA 1.00;
		PROJECTILE;
		DamageType "Fire";
		+SEEKERMISSILE;
		+THRUGHOST; // Death Knight Head Fireball
		Seesound "monster/dknmsl";
		DeathSound "weapons/boom1";
	}
	
	States
	{
		Spawn:
			FHED ABCD 3 Bright 
			{
				A_SeekerMissile(5,15);
			}
			Loop;
		Death:
			RIP1 DEFGH 5 Bright;
			Stop;
	}
}
class FHeadShotCrisis : FHeadShot
{
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FHED ABCD 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(5,15);
			}
			Loop;
		Death:
			RIP1 DEFGH 5 Bright;
			Stop;
	}
}

class DKbolt : AetheriusProjectileZSC
{
	default
	{
		Tag "Shield Firewave";
		DamageFunction (8 * random(1,8));
		Radius 8;
		Height 8;
		Speed 15;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.80;
		DamageType "Fire";
		+THRUGHOST;
		SeeSound "Weapons/boltfi";
		DeathSound "weapons/firex4";
	}
	
	States
	{
		Spawn:
			BOLT A 1 Bright 
			{
				A_BishopMissileWeave();
				A_SpawnItem("RedPuff",0,0);
			}
			Loop;
		Death:
			HBAL EFHI 2 Bright;
			Stop;
	}
}
class DKboltCrisis : DKbolt
{
	default
	{
		DamageFunction ((8 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BOLT A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_BishopMissileWeave();
				A_SpawnItem("RedPuff",0,0);
			}
			Loop;
		Death:
			HBAL EFHI 2 Bright;
			Stop;
	}
}

class DKSword : AetheriusProjectileZSC // Death piece
{
	default
	{
		Radius 8;
		Height 8;
		Speed 1;
		PROJECTILE;
		RenderStyle "Normal";
		-NOGRAVITY;
		+LOWGRAVITY;
	}
	
	States
	{
		Spawn:
			SWRD KLMNOPQ 3 BRIGHT;
			goto Death;
		Death:
			SWRD RS 4 BRIGHT;
			SWRD T 4 BRIGHT;
			SWRD U 4;
			SWRD T 4 BRIGHT;
			SWRD U 8;
			SWRD T 4 BRIGHT;
			SWRD U 16;
			SWRD T 4 BRIGHT;
			SWRD U -1;
	}
}

class DKShield : AetheriusProjectileZSC // Death piece
{
	default
	{
		Radius 8;
		Height 8;
		Speed 1;
		PROJECTILE;
		RenderStyle "Normal";
		-NOGRAVITY;
		+LOWGRAVITY;
	}
	
	States
	{
		Spawn:
			SHLD ABCDEFGHI 3;
			goto Death;
		Death:
			SHLD H -1;
			Stop;
	}
}

class DKFire : AetheriusProjectileZSC
{
	default
	{
		Tag "Death Knight Flame";
		DamageFunction (0);
		ExplosionDamage 4;
		ExplosionRadius 8;
		Radius 2;
		Height 6;
		Speed 4;
		RenderStyle "Add";
		ALPHA 0.95;
		PROJECTILE;
		+THRUGHOST;
		DeathSound "weapons/scorch";
	}
	States
	{
		Spawn:
			DKAT NOPQRSTNOPQRSTNOPQRSTUVW 3 Bright 
			{
				A_Explode(4,8);
			}
			Stop;
	}
}
class DKFireCrisis : DKFire
{
	default
	{
		DamageFunction (0);
		ExplosionDamage 4;
		ExplosionRadius 8;
		Radius 2;
		Height 6;
		Speed 4;
		RenderStyle "Add";
		ALPHA 0.95;
		PROJECTILE;
		+THRUGHOST; 
		DeathSound "weapons/scorch";
	}
	
	States
	{
		Spawn:
			DKAT NOPQRSTNOPQRSTNOPQRSTUVW 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_Explode((4 * CrisisMultiplier),8);
			}
			Stop;
	}
}

class RedPuff : AetheriusProjectileZSC
{
	default
	{
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.85;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			RPUF ABCDE 3 Bright;
			Stop;
	}
}

// Disciple
class WizardFX1New : AetheriusProjectileZSC replaces WizardFX1 
{
	default
	{
		Tag "Wizard Shot";
		DamageType "Magic"; 
		Radius 10;
		Height 6;
		Speed 18;
		FastSpeed 24;
		DamageFunction (3 * random(1,8));
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/magichit";
	}
	
	States
	{
		Spawn:
			FX11 AAABBB 2 Bright;
			Loop;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
class WizardFX1Crisis : WizardFX1New 
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX11 AAABBB 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}

// Banshee
class BansheeFire : AetheriusEffectProjectile
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Radius 13;
		Height 8;
		Speed 15;
		Projectile;
		+RANDOMIZE;
		+RIPPER;
		+DEHEXPLOSION;
		+ROCKETTRAIL;
		SeeSound "Banshee/ASpawn";
		DeathSound "Banshee/ADeath";
		Obituary "%o Heard The Banshee's Wail.";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}
class BansheeFireCrisis : BansheeFire
{
	default
	{
		DamageFunction ((2 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_GenerateCrisisParticle();
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}

class BansheeFire2 : BansheeFire
{
	default
	{
		DamageFunction (2 * random(1,8));
		-RIPPER;
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
	}
}
class BansheeFire2Crisis : BansheeFire2
{
	default
	{
		DamageFunction ((2 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2
			{
				A_GenerateCrisisParticle();
			}
			Loop;
	}
}

class BansheeFire3 : BansheeFire
{
	default
	{
		Tag "Banshee Megablast";
		DamageFunction (100 * random(1,8));
		Radius 24;
		Height 24;
		-RIPPER;
		+NOGRAVITY;
		+SPAWNCEILING;
		+SEEKERMISSILE;
		Scale 3.0;
		Decal "Scorch";
	}
	
	States
	{
		Spawn:
			BANB A 1 NoDelay BRIGHT A_SeekerMissile (50,50);
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}
class BansheeFire3Crisis : BansheeFire3
{
	default
	{
		DamageFunction ((100 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BANB A 1 NoDelay BRIGHT 
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(50,50);
			}
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}

class BansheeFire4 : BansheeFire
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Speed 25;
		-RIPPER;
	}
	
	States
	{
		Spawn:
			BANF ABCDEFGH 3 bright;
			Stop;
		Death:
			BANF H 3 bright;
			Stop;
	}
}
class BansheeFire4Crisis : BansheeFire4
{
	default
	{
		DamageFunction ((2 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BANF ABCDEFGH 3 bright
			{
				A_GenerateCrisisParticle();
			}
			Stop;
		Death:
			BANF H 3 bright;
			Stop;
	}
}

class BansheeFire5 : BansheeFire
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Speed 20;
		+SEEKERMISSILE;
		+FLOORHUGGER;
	}
	
	States
	{
		Spawn:
			BAFT A 1 BRIGHT 
			{
				A_SeekerMissile(50,50);
			}
			BAFT A 2 
			{
				A_SpawnItem("BansheeFireTrail2",0,0);
			}
			BAFT A 1 BRIGHT
			{
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Goto Spawn;
		Death:
			BAFT BCDEFGH 3 bright;
			Stop;
	}
}
class BansheeFire5Crisis : BansheeFire5
{
	default
	{
		DamageFunction ((2 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BAFT A 2 BRIGHT 
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(50,50);
				A_SpawnItem("BansheeFireTrail2",0,0);
			}
			BAFT A 2 BRIGHT
			{
				A_GenerateCrisisParticle();
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Goto Spawn;
		Death:
			BAFT BCDEFGH 3 bright;
			Stop;
	}
}

class BansheeTrail : AetheriusProjectileZSC
{
	default
	{
		Radius 20;
		Height 56;
		VSpeed 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		ALPHA 0.90;
		scale 0.80;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
		Idle:
			BANS A 3 
			{
				A_SetScale(scale.x-0.06,scale.y-0.06);
				A_FadeOut(0.09);
			}
			Loop;
	}
}

class BansheeFireTrail : AetheriusProjectileZSC
{
	default
	{
		Radius 20;
		Height 56;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		Scale 0.50;
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			BANF ABCDEFGH 3 Bright A_FadeOut(0.10);
			Stop;
	}
}

class BansheeFireTrail2 : AetheriusProjectileZSC
{
	default
	{
		Radius 20;
		Height 56;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		Scale 0.50;
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			BAFT ABCDEFG 3 Bright A_FadeOut(0.10);
			Stop;
	}
}

class DSFX3 : AetheriusAfterimageZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.90;
		PROJECTILE;
		RenderStyle "Translucent";
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			NULL A 3;
			DISC A 3 A_FadeOut(basealpha*0.10);
			goto Spawn+1;
	}
}

class DiscipleShot1 : AetheriusProjectileZSC
{
	default
	{
		Tag "Disciple Shot";
		DamageFunction (3 * random(1,8));
		Radius 8;
		Height 16;
		Speed 15;
		RenderStyle "Add";
		ALPHA 0.67;
		PROJECTILE;
		DeathSound "monster/disht1";
	}
	
	States
	{
		Spawn:
			CFX2 ABCD 2 Bright 
			{
				A_SpawnProjectile("DSFX1",0,0,0,0);
			}
			Loop;
		Death:
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}
class DiscipleShot1Crisis : DiscipleShot1
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			CFX2 ABCD 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("DSFX1",0,0,0,0);
			}
			Loop;
		Death:
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}

class DiscipleShot2 : AetheriusProjectileZSC
{
	default
	{
		Tag "Disciple Shot";
		DamageFunction (6 * random(1,8));
		Radius 8;
		Height 16;
		Speed 15;
		RenderStyle "Add";
		ALPHA 0.67;
		PROJECTILE;
		+SEEKERMISSILE;
		DeathSound "monster/disht2";
	}
	
	States
	{
		Spawn:
			CFX3 AB 3 Bright 
			{
				A_SpawnProjectile("DSFX2",0,0,0,0);
				A_SeekerMissile(5,8);
			}
			Loop;
		Death:
			CFX3 CDEFG 3 Bright;
			Stop;
	}
}
class DiscipleShot2Crisis : DiscipleShot2
{
	default
	{
		DamageFunction ((6 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			CFX3 AB 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_SpawnProjectile("DSFX2",0,0,0,0);
				A_SeekerMissile(5,8);
			}
			Loop;
		Death:
			CFX3 CDEFG 3 Bright;
			Stop;
	}
}

class DSFX1 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}
class DSFX2 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			CFX3 HIJK 3 Bright;
			Stop;
	}
}
// Lich Iceball
class HeadFX1New : AetheriusEffectProjectile replaces HeadFX1 
{
	default
	{
		Tag "Ice Sphere";
		DamageFunction (1 * random(1,8));
		Radius 12;
		Height 6;
		Speed 13;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Icon Lich Ice Ball
		DamageType "Ice";
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 AAABBBCCC 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(12);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(105,175)); // Deceleratle for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FX05 D 5 Bright A_LichIceImpact("HeadFX2New");
			FX05 EFG 5 Bright;
			Stop;
	}
}
class HeadFX1Crisis : HeadFX1New 
{
	default
	{
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX05 AAABBBCCC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(12);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15, (random(105,175)*CallACS("CrisisMultiplier",5)) ); // Deceleratle for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FX05 D 5 Bright A_LichIceImpact("HeadFX2Crisis");
			FX05 EFG 5 Bright;
			Stop;
	}
}
// Ice Shard
class HeadFX2New : AetheriusEffectProjectile replaces HeadFX2 
{
	default
	{
		Tag "Ice Shard";
		DamageFunction (3 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 6;
		Speed 8;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 HHHIIIJJJ 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(35,52)); // Deceleratle for 1-1.5 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FX05 DEFG 5 Bright;
			Stop;
	}
}
class HeadFX2Crisis : HeadFX2New 
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
		DamageType "Ice";
		Radius 12;
		Height 6;
		Speed 8;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX05 HHHIIIJJJ 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15, (random(35,52)*CallACS("CrisisMultiplier",5)) ); // Deceleratle for 1-1.5 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FX05 DEFG 5 Bright;
			Stop;
	}
}

// Lich Fire Pillar
class HeadFX3New : AetheriusEffectProjectile replaces HeadFX3 
{ 
	default
	{
		Tag "Fire Pillar";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Radius 14;
		Height 12;
		Speed 10;
		FastSpeed 18;
		Projectile;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		RenderStyle "Add";
		DeathSound "misc/fireballbig";
	}
	
	States
	{
		Spawn:
			FX06 A 2 Bright;
			FX06 A 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 B 2 Bright;
			FX06 B 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 C 2 Bright;
			FX06 C 2 Bright
			{
				A_LichFireGrow();
			}
			Loop;
		NoGrow:
			FX06 AA 2 Bright;
			FX06 A 1 Bright;
			FX06 BB 2 Bright;
			FX06 B 1 Bright;
			FX06 CC 2 Bright;
			FX06 C 1 Bright;
			Loop;
		Death:
			FX06 DEFG 5 Bright;
			Stop;
	}
}
class HeadFX3Crisis : HeadFX3New 
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX06 A 2 Bright 
			{
				A_GenerateCrisisParticle();
			}
			FX06 A 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_LichFireGrow();
			}
			FX06 B 2 Bright 
			{
				A_GenerateCrisisParticle();
			}
			FX06 B 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_LichFireGrow();
			}
			FX06 C 2 Bright 
			{
				A_GenerateCrisisParticle();
			}
			FX06 C 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_LichFireGrow();
			}
			Loop;
		NoGrow:
			FX06 AA 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			FX06 A 1 Bright;
			FX06 BB 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			FX06 B 1 Bright;
			FX06 CC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			FX06 C 1 Bright;
			Loop;
		Death:
			FX06 DEFG 5 Bright;
			Stop;
	}
}

// Lich Whirlwind
class WhirlwindNew : AetheriusWhirlwind replaces Whirlwind 
{
	default
	{
		Tag "Whirlwind";
		DamageFunction (1 * random(1,8));
		DamageType "Wind";
		Radius 16;
		Height 74;
		Speed 10;
		Accuracy 8; // Sets how long [tics] to wait between hits when the tornado is touching a target
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEMCROSS;
		+SEEKERMISSILE;
		+EXPLOCOUNT;
		+STEPMISSILE;
		RenderStyle "Translucent";
		DefThreshold 60;
		Threshold 50;
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			FX07 DEFG 3;
		Idle:
			FX07 ABC 3 
			{
				A_WhirlwindSeek();
			}
			Loop;
		Death:
			FX07 GFED 4;
			Stop;
	}
}
class WhirlwindCrisis : WhirlwindNew 
{
	default
	{
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier);
		Stamina 30; // Set this to 30 to allow Crisis Checking
		Accuracy 8; // Sets how long [tics] to wait between hits when the tornado is touching a target
	}
	
	States
	{
		Spawn:
			FX07 D 0;
			FX07 DEFG 3;
		Idle:
			FX07 ABC 3 
			{
				A_GenerateCrisisParticle();
				A_WhirlwindSeek();
			}
			Loop;
		Death:
			FX07 GFED 4;
			Stop;
	}
}

// Ice Lich
class IceBreath : AetheriusEffectProjectile
{
	default
	{
		Tag "Icy Breath";
		DamageFunction (5 * random(1,8));
		radius 12;
		height 8;
		speed 8;
		alpha 0.2;
		projectile;
		ProjectileKickBack 0;
		+NODAMAGETHRUST;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		+BLOODLESSIMPACT;
		DamageType "Ice";
		RenderStyle "Add";
	}
	states
	{
		Spawn:
			IBRT ABABABABABABABABABAB 2 bright;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(35,52)); // Deceleratle for 1-1.5 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			IBRT AB 2 bright;
			Stop;
	}
}
class IceBreathCrisis : IceBreath
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	states
	{
		Spawn:
			IBRT ABABABABABABABABABAB 2 bright
			{
				A_GenerateCrisisParticle();
			}
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,15, (random(35,52)*CallACS("CrisisMultiplier",5)) ); // Deceleratle for 1-1.5 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			IBRT AB 2 bright;
			Stop;
	}
}

// Gold Lich
class GoldLichBounce : AetheriusProjectileZSC
{
	default
	{
		Tag "Gold Lich Bouncer";
		DamageFunction (1 * random(1,8));
		Radius 14;
		Height 12;
		Speed 15;
		FastSpeed 24;
		Projectile;
		+NOGRAVITY;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+SEEKERMISSILE;
		BounceType "Doom";
		BounceCount 2;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+BOUNCEONACTORS;
		+CANBOUNCEWATER;
	}
	
	States
	{
		Spawn:
			FXA1 AABBCC 2 BRIGHT;
			Loop;
		Death:
			FXA1 A 0 A_StartSound("goldlich/attack2Blast");
			FXA1 A 0 BRIGHT A_Stop();
			FXA1 A 0 BRIGHT A_Explode(64,160,0);
			FXA1 GGGGGHHHHHIIIII 1 BRIGHT A_SpawnItemEx("GoldLichMiniExplodes", random(-32,32), random(-32,32), random(-32,32),0,0,0, 0,0, 0);
			Stop;
	}
}
class GoldLichBounceCrisis : GoldLichBounce
{
	default
	{
		DamageFunction (1 * random(1,8) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FXA1 AABBCC 2 BRIGHT
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			FXA1 A 0 A_StartSound("goldlich/attack2Blast");
			FXA1 A 0 BRIGHT A_Stop();
			FXA1 A 0 BRIGHT A_Explode(64*CrisisMultiplier,160,0);
			FXA1 GGGGGHHHHHIIIII 1 BRIGHT A_SpawnItemEx("GoldLichMiniExplodes", random(-32,32), random(-32,32), random(-32,32),0,0,0, 0,0, 0);
			Stop;
	}
}

class GoldLichFire : AetheriusProjectileZSC
{
	int user_tracks;
	default
	{
		Tag "Gold Lich Fire";
		DamageFunction (5 * random(1,8));
		Radius 14;
		Height 12;
		Speed 15;
		FastSpeed 24;
		Projectile;
		+NOGRAVITY;
		+WINDTHRUST  ;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+SEEKERMISSILE;
		RenderStyle "Add";
	}

	States
	{
		Spawn:
			FX06 A 0 { user_tracks = 5; }
		Weave:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_Weave(3, 0, 4.0, 0.0);
			}
			TNT1 A 0 A_Jump(128, "Track");
			Loop;
		Track:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			TNT1 A 0 A_Jump(user_tracks <= 0, "Track");
			TNT1 A 0 { user_tracks - 1; }
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_SeekerMissile(360, 1);
			}
			TNT1 A 0 A_Jump(128, "Weave");
			Loop;
		Death:
			FX06 DEFG 5 BRIGHT;
			Stop;
	}
}
class GoldLichFireCrisis : GoldLichFire
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FX06 A 0 { user_tracks = 5; }
		Weave:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_GenerateCrisisParticle();
				A_Weave(3, 0, 4.0, 0.0);
			}
			TNT1 A 0 A_Jump(128, "Track");
			Loop;
		Track:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			TNT1 A 0 A_Jump(user_tracks <= 0, "Track");
			TNT1 A 0 { user_tracks - 1; }
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(360, 1);
			}
			TNT1 A 0 A_Jump(128, "Weave");
			Loop;
		Death:
			FX06 DEFG 5 BRIGHT;
			Stop;
	}
}

// Blood Lich
class FireBreath : AetheriusProjectileZSC
{
	default
	{
		Tag "Blood Firebreath";
		DamageFunction (3 * random(1,8));
		Radius 12;
		Height 8;
		Speed 12;
		Alpha 0.2;
		PROJECTILE;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		+BLOODLESSIMPACT;
		DamageType "Fire";
		RenderStyle "Add";
	}
	
	States
	{
    Spawn:
			FRBS EFGEFGEFGEFGEFGEFG 3;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class FireBreathCrisis : FireBreath
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			FRBS EFGEFGEFGEFGEFGEFG 3
			{
				A_GenerateCrisisParticle();
			}
		Death:
			TNT1 A 0;
			Stop;
	}
}

class BloodLichFireball : AetheriusProjectileZSC
{
	default
	{
		Tag "Blood Fireball";
		DamageFunction (4 * random(1,8));
		Speed 17;
		Height 8;
		PROJECTILE;
		+EXTREMEDEATH;
		DamageType "Fire";
		DeathSound "MageStaffExplode";
	}
	
	States
	{
		Spawn:
			MSP4 ABCD 2 Bright
			{
			}
			Loop;
		Death:
			MSP4 E 4 Bright A_SetTranslucent(1,1);
			MSP4 F 5 Bright A_Explode(80,192,0);
			MSP4 GH 5 Bright;
			MSP4 I 4 Bright;
			Stop;
	}
}
class BloodLichFireballCrisis : BloodLichFireball
{
	default
	{
		DamageFunction ((4 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			MSP4 ABCD 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			MSP4 E 4 Bright A_SetTranslucent(1,1);
			MSP4 F 5 Bright A_Explode(80*CrisisMultiplier,192,0);
			MSP4 GH 5 Bright;
			MSP4 I 4 Bright;
			Stop;
	}
}

class CurseSpell : AetheriusEffectProjectile
{
	default
	{
		Tag "Curse Sphere";
		PROJECTILE;
		+SEEKERMISSILE;
		+BLOODLESSIMPACT;
		RenderStyle "Add";
		DamageFunction (0);
		DamageType "Dark";
		Speed 15;
		Radius 10;
		Height 6;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			CURS A 0 A_StartSound("CurseActive", CHAN_AUTO, CHANF_DEFAULT, 1, ATTN_NORM);
			CURS ABCDEF 3 Bright A_SeekerMissile(50,50,2);
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 2 && user_canafflict)
					{
						user_random = random(1,13);
						if (user_random == 1) { ACS_NamedExecuteAlways("BuffTimer",0,8,21,random(315,525)); } // Silence for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 2) { ACS_NamedExecuteAlways("BuffTimer",0,8,19,random(315,525)); } // Blind for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 3) { ACS_NamedExecuteAlways("BuffTimer",0,8,20,random(315,525)); } // Sleep for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 4) { ACS_NamedExecuteAlways("BuffTimer",0,8,18,random(315,525)); } // Fatigue for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 5) { ACS_NamedExecuteAlways("BuffTimer",0,8,14,random(630,1050)); } // Sap for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 6) { ACS_NamedExecuteAlways("BuffTimer",0,8,14,random(630,1050)); } // Sap for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 7) { ACS_NamedExecuteAlways("BuffTimer",0,8,14,random(630,1050)); } // Sap for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 8) { ACS_NamedExecuteAlways("BuffTimer",0,8,13,random(630,1050)); } // Blunt for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 9) { ACS_NamedExecuteAlways("BuffTimer",0,8,13,random(630,1050)); } // Blunt for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 10) { ACS_NamedExecuteAlways("BuffTimer",0,8,13,random(630,1050)); } // Blunt for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 11) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(630,1050)); } // Deceleratle for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 12) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(630,1050)); } // Deceleratle for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 13) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(630,1050)); } // Deceleratle for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
				return resolvestate(null);
			}
		Death2:
			TNT1 A 0 A_StopSound(CHAN_AUTO);
			CURS GHIJKL 3 Bright;
			Stop;
	}
}
class CurseSpellCrisis : CurseSpell
{
	States
	{
		Spawn:
			TNT1 A 0;
			CURS A 0 A_StartSound("CurseActive", CHAN_AUTO, CHANF_DEFAULT, 1, ATTN_NORM);
			CURS ABCDEF 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_SeekerMissile(50,50,2);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 2 && user_canafflict)
					{
						user_random = random(1,13);
						if (user_random == 1) { ACS_NamedExecuteAlways("BuffTimer",0,8,21, (random(315,525)*CallACS("CrisisMultiplier",5)) ); } // Silence for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 2) { ACS_NamedExecuteAlways("BuffTimer",0,8,19, (random(315,525)*CallACS("CrisisMultiplier",5)) ); } // Blind for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 3) { ACS_NamedExecuteAlways("BuffTimer",0,8,20, (random(315,525)*CallACS("CrisisMultiplier",5)) ); } // Sleep for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 4) { ACS_NamedExecuteAlways("BuffTimer",0,8,18, (random(315,525)*CallACS("CrisisMultiplier",5)) ); } // Fatigue for 9-15 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 5) { ACS_NamedExecuteAlways("BuffTimer",0,8,14, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Sap for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 6) { ACS_NamedExecuteAlways("BuffTimer",0,8,14, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Sap for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 7) { ACS_NamedExecuteAlways("BuffTimer",0,8,14, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Sap for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 8) { ACS_NamedExecuteAlways("BuffTimer",0,8,13, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Blunt for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 9) { ACS_NamedExecuteAlways("BuffTimer",0,8,13, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Blunt for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 10) { ACS_NamedExecuteAlways("BuffTimer",0,8,13, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Blunt for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 11) { ACS_NamedExecuteAlways("BuffTimer",0,8,15, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Deceleratle for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 12) { ACS_NamedExecuteAlways("BuffTimer",0,8,15, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Deceleratle for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 13) { ACS_NamedExecuteAlways("BuffTimer",0,8,15, (random(630,1050)*CallACS("CrisisMultiplier",5)) ); } // Deceleratle for 18-30 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
				return resolvestate(null);
			}
		Death2:
			TNT1 A 0 A_StopSound(CHAN_AUTO);
			CURS GHIJKL 3 Bright;
			Stop;
	}
}

// Sabreclaw
class ClinkAxe : AetheriusProjectileZSC
{
	default
	{
		Tag "Silver Axe";
		DamageFunction (randompick(2,2,2,2,2,2,3,3,3,4) * random(1,8));
		Radius 10;
		Height 8;
		Speed 25;
		FastSpeed 30;
		Projectile;
		+NODAMAGETHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Sabreclaw/Clink Spectral Axe
		+WINDTHRUST;
		RenderStyle "Add";
		Scale 0.6;
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			CLAX A 3 Bright 
			{
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 3 Bright;
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}
class ClinkAxeCrisis : ClinkAxe
{
	default
	{
		DamageFunction ((randompick(2,2,2,2,2,2,3,3,3,4) * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			CLAX A 3 Bright 
			{
				A_GenerateCrisisParticle();
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 3 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}

class ClinkAxe2 : ClinkAxe
{
	default
	{
		Tag "Silver Axe";
		DamageFunction (randompick(4,4,4,4,4,4,5,5,5,6) * random(1,8));
		Radius 10;
		Height 8;
		Speed 20;
		FastSpeed 24;
		Projectile;
		+NODAMAGETHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // SabreBlade/DarkClink Spectral Axe 2
		+WINDTHRUST;
		RenderStyle "Add";
		Scale 0.8;
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			CLAX ABC 2 Bright;
			CLAX A 2 Bright 
			{
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 2 Bright;
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}
class ClinkAxe2Crisis : ClinkAxe2
{
	default
	{
		DamageFunction ((randompick(4,4,4,4,4,4,5,5,5,6) * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			CLAX ABC 2 Bright 
			{
				A_GenerateCrisisParticle();
			}
			CLAX A 2 Bright 
			{
				A_GenerateCrisisParticle();
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}

// Shadow Beast
class ShadowBeastSparkle : AetheriusProjectileZSC
{   
	default
	{
		Alpha 1.0;
		RenderStyle "Add";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
		Scale 1.0;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(128,2);
			BDP1 GHI 5;
			Stop;
	}
}

class ShadowBeastBallFire : AetheriusEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (1 * random(1,8)); // 2
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1death";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			BDP2 DEFGH 5 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 A 0;
			Stop;
	}
}
class ShadowBeastBallFireCrisis : ShadowBeastBallFire
{
	default
	{
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier); // 2
	}
	
	States
	{
		Spawn:
			BDP2 DD 2 Bright A_GenerateCrisisParticle();
			BDP2 DE 1 Bright A_GenerateCrisisParticle();
			BDP2 EE 2 Bright A_GenerateCrisisParticle();
			BDP2 FF 2 Bright A_GenerateCrisisParticle();
			BDP2 FG 1 Bright A_GenerateCrisisParticle();
			BDP2 GG 2 Bright A_GenerateCrisisParticle();
			BDP2 HH 2 Bright A_GenerateCrisisParticle();
			BDP2 H 1 Bright A_GenerateCrisisParticle();
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 A 0;
			Stop;
	}
}

class ShadowBeastBall1 : AetheriusEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0  ;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (5 * random(1,8));
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1sight";
		DeathSound "shadowbeast/pr1death";
	}
	
	States
	{
		Spawn:
			BDP2 ABC 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BDP2 DE 4 Bright;
			BDP2 FGH 3 Bright;
			Stop;
	}
}
class ShadowBeastBall1Crisis : ShadowBeastBall1
{
	default
	{
		DamageFunction ((5 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BDP2 AABBCC 2 Bright A_GenerateCrisisParticle();
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BDP2 DE 4 Bright;
			BDP2 FGH 3 Bright;
			Stop;
	}
}

class ShadowBeastBall2 : AetheriusEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (2 * random(1,8));
		Speed 16;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DE 1 A_BishopMissileWeave();
			Loop;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class ShadowBeastBall2Crisis : ShadowBeastBall2
{
	default
	{
		DamageFunction ((2 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BDP1 DE 1 
			{
				A_BishopMissileWeave();
			}
			BDP1 E 0
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}

class ShadowBeastBall3 : AetheriusEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		Scale 1.4;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (10 * random(1,8));
		Speed 20;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DEDEDEDED 2 A_BishopMissileWeave();
			BDP1 ED 2 A_BishopMissileWeave();
			TNT1 A 0 A_FadeOut(0.20);
			Goto Spawn+9;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class ShadowBeastBall3Crisis : ShadowBeastBall3
{
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			BDP1 DEDEDEDEDED 2 
			{
				A_GenerateCrisisParticle();
				A_BishopMissileWeave();
			}
			TNT1 A 0 A_FadeOut(0.20);
			Goto Spawn+9;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
// Ophidian
class SnakeProjANew : AetheriusProjectileZSC replaces SnakeProjA 
{
	default
	{
		Tag "Lil' Iceball";
		DamageFunction (1 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 8;
		Speed 14;
		FastSpeed 20;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "snake/attack";
		DeathSound "misc/magicsmall";
	}
	
	States
	{
		Spawn:
			SNFX AABBCCDD 2 Bright;
			Loop;
		Death:
			SNFX EF 5 Bright;
			SNFX G 4 Bright;
			SNFX HI 3 Bright;
			Stop;
	}
}
class SnakeProjACrisis : SnakeProjANew 
{
	default
	{
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier);
		DamageType "Ice";
		Radius 12;
		Height 8;
		Speed 14;
		FastSpeed 20;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "snake/attack";
	}
	
	States
	{
		Spawn:
			SNFX AABBCCDD 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			SNFX EF 5 Bright;
			SNFX G 4 Bright;
			SNFX HI 3 Bright;
			Stop;
	}
}

class SnakeProjBNew : SnakeProjANew replaces SnakeProjB 
{
	default
	{
		Tag "Lil' Fireball";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/magichit";
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			SNFX JJJKKK 2 Bright;
			Loop;
		Death:
			SNFX LM 5 Bright;
			SNFX N 4 Bright;
			SNFX O 3 Bright;
			Stop;
	}
}
class SnakeProjBCrisis : SnakeProjBNew 
{
	default
	{
		DamageFunction ((3 * random(1,8)) * CrisisMultiplier);
		DamageType "Fire";
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			SNFX JJJKKK 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			SNFX LM 5 Bright;
			SNFX N 4 Bright;
			SNFX O 3 Bright;
			Stop;
	}
}

// Hell Guard
class HellGuardBall : AetheriusProjectileZSC
{
	default
	{
		Tag "Abyssal Sphere";
		DamageFunction (6 * random(1,8));
		Radius 13;
		Height 8;
		Speed 12;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
		SeeSound "hellguard/shot";
		DeathSound "hellguard/shothit";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			HGFB A 0 Bright NoDelay 
			{
				A_ScaleVelocity(frandom(0.875,1.125));
			}
		Idle:
			HGFB ABCD 2 Bright;
			Loop;
		Death:
			HGFB EFGH 4 Bright;
			Stop;
	}
}
class HellGuardBallCrisis : HellGuardBall
{
	default
	{
		DamageFunction ((6 * random(1,8)) * CrisisMultiplier);
	}
	
	States
	{
		Spawn:
			HGFB A 0 Bright NoDelay 
			{
				A_ScaleVelocity(frandom(0.875,1.125));
			}
		Idle:
			HGFB ABCD 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			HGFB EFGH 4 Bright;
			Stop;
	}
}

// D'Sparil Serpent
class SorcererFX1New : AetheriusProjectileZSC replaces SorcererFX1 
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (10 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}
class SorcererFX1Crisis : SorcererFX1New 
{
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier);
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}

class DarkClinkBall : AetheriusProjectileZSC
{
	default
	{
		Tag "SabreBlade Ball";
		Height 16;
		Radius 8;
		Speed 18;
		Damage 3;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.7;
		Decal "DoomImpScorch";
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	States
	{
		Spawn:
			CLBL AABBCCDD 2 Bright;
			Loop;
		Death:
			CLBL EFG 5 Bright;
			Stop;
	}
}

class SerpathorPhoenixFX1 : PhoenixFX1Base
{
	default
	{
		Tag "Phoenix Shot";
		DamageFunction (10 * random(1,8)); // 5
		Speed 20; // 18
	}
	
	States
	{
		Idle:
			FX04 A 4 Bright A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 3 Bright A_Explode((64+random(-12,12)),128,0);
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}
class SerpathorPhoenixFX1Crisis : SerpathorPhoenixFX1
{
	default
	{
		DamageFunction ((10 * random(1,8)) * CrisisMultiplier); // 5
		Speed 20; // 18
	}
	
	States
	{
		Spawn:
			FX04 A 0;
		Idle:
			#### AAA 1 Bright
			{
				A_GenerateCrisisParticle();
			}
			#### A 1 Bright 
			{
				A_GenerateCrisisParticle();
				A_PhoenixPuff();
			}
			Loop;
		Death:
			FX08 A 3 Bright A_Explode((64+random(-12,12)),128,0);
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}

class Medusabeam : AetheriusEffectFastProjectile
{
	default
	{
		Tag "Serpathor Eye Beam";
		Speed 125; // 100
		Radius 4;
		Height 4;
		DamageFunction (1*random(1,8));
		MissileType "MBSpark";
		Scale 0.25;
		Decal "CrossbowScorch2";
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				if (IsPointerEqual(AAPTR_MASTER, AAPTR_PLAYER1) == TRUE)
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 7 && user_canafflict)
					{
						user_random = random(1,5);
						if (user_random <= 1) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(140,280)); } // Deceleratle for 4-8 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 2) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(210,350)); } // Deceleratle for 6-10 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 3) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(210,350)); } // Deceleratle for 6-10 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random == 4) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(210,350)); } // Deceleratle for 6-10 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
						else if (user_random >= 5) { ACS_NamedExecuteAlways("BuffTimer",0,8,15,random(280,420)); } // Deceleratle for 8-12 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			FX16 GHIJKL 2 bright;
			Stop;
	}
}
class MedusabeamCrisis : Medusabeam
{
	default
	{
		Speed 125; // 100
		Radius 4;
		Height 4;
		DamageFunction ((1 * random(1,8)) * CrisisMultiplier);
		MissileType "MBSparkCrisis";
		Scale 0.25;
		Decal "CrossbowScorch2";
	}
}

class MBSpark : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		+NOINTERACTION;
		+CLIENTSIDEONLY; 
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 DEF 3 BRIGHT;
			Stop;
	}
}
class MBSparkCrisis : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		+NOINTERACTION;
		+CLIENTSIDEONLY; 
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 DEF 3 BRIGHT
			{
				A_SpawnItemEx("MBSpark", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
				A_SpawnItemEx("MBSpark", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
				A_SpawnItemEx("MBSpark", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			}
			Stop;
	}
}

class FireBlast : AetheriusProjectileZSC
{
	default
	{
		Tag "Apprentice FireBlast";
		DamageFunction (3 * random(1,4));
		Speed 25;
		Scale 0.75;
		PROJECTILE;
		+STRIFEDAMAGE;
		+NOGRAVITY;
		DEATHSOUND "fireblast/explode";
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT;
			Loop;
    Death:
			PROJ D 4 BRIGHT 
			{
				A_Explode(8,64,0);
			}
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}
class FireBlastCrisis : FireBlast
{
	default
	{
		DamageFunction ((3 * random(1,4)) * CrisisMultiplier);
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			PROJ D 4 BRIGHT 
			{
				A_Explode(8*CrisisMultiplier,64,0);
			}
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}

class SuperFireBlast : FireBlast
{
	default
	{
		Tag "Apprentice Super FireBlast";
		DamageFunction (24 * random(1,4));
		Speed 16;
		Scale 1.5;
		DEATHSOUND "superfireblast/explode";
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT
			{
			}
			Loop;
    Death:
			PROJ D 4 BRIGHT A_Explode(256,128,0);
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}
class SuperFireBlastCrisis : SuperFireBlast
{
	default
	{
		DamageFunction ((24 * random(1,4)) * CrisisMultiplier);
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			PROJ D 4 BRIGHT A_Explode(256*CrisisMultiplier,128,0);
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}

class VolcanoBlastNew : AetheriusProjectileZSC replaces VolcanoBlast
{
	default
	{
		Tag "Volcano Magma Blast";
		Radius 8;
		Height 8;
		Speed 2;
		DamageFunction (random(2,3) * random(1,8));
		DamageType "Fire";
		Gravity 0.125;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		DeathSound "world/volcano/blast";
	}
	
	States
	{
		Spawn:
			VFBL AB 4 BRIGHT A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
			Loop;
		Death:
			XPL1 A 4 BRIGHT A_VolcBallImpact();
			XPL1 BCDEF 4 BRIGHT;
			Stop;
	}
}

class VolcanoTBlastNew : AetheriusProjectileZSC replaces VolcanoTBlast
{
	default
	{
		Tag "Volcano Magma MiniBlast";
		DamageFunction (1 * random(1,8));
		Radius 8;
		Height 6;
		Speed 2;
		Gravity 0.125;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		Damagetype "Fire";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			VTFB AABB 2 BRIGHT;
			Loop;
		Death:
			SFFI CBABCDE 4 BRIGHT;
			Stop;
	}
}