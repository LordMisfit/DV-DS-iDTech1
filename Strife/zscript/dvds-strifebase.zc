class SpectralMonsterBase : AetheriusBossZSC
{
	Default
	{
		Monster;
		+SPECIAL
		+SPECTRAL
		+NOICEDEATH
	}
	
	override void Touch (Actor toucher)
	{
		int dmg = (random(1,256) & 9) * 5;
		if (CheckClass("AlienSpectre1New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 5;
		if (CheckClass("AlienSpectre2New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * random(5,6);
		if (CheckClass("AlienSpectre3New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 6;
		if (CheckClass("AlienSpectre4New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * random(6,7);
		if (CheckClass("AlienSpectre5New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 7;
		if (CheckClass("EntityBossNew", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 10) * 7;
		if (CheckClass("EntitySecondNew", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 6;
		if (CheckClass("EntityAscended", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 11) * 8;
		dmg /= 5;
		A_MonsterCrisisCheck(); // Spectres/Entity - Touch Damage
		if (user_canusecrisisatk == 1) 
		{
			dmg *= CrisisMultiplier;
			if (self.health > 0) A_PlayCrisisAtkSound(); 
		}
		//Console.Printf("dmg = %d", dmg);
		if (self.health > 0) toucher.DamageMobj (self, self, dmg, 'SpectralTouch');
	}
	

	//============================================================================

	void A_SpectreChunkSmall ()
	{
		Actor foo = Spawn("AlienChunkSmall", pos + (0, 0, 10), ALLOW_REPLACE);

		if (foo != null)
		{
			int t;

			t = random[SpectreChunk]() & 15;
			foo.Vel.X = (t - (random[SpectreChunk]() & 7));
			
			t = random[SpectreChunk]() & 15;
			foo.Vel.Y = (t - (random[SpectreChunk]() & 7));

			foo.Vel.Z = (random[SpectreChunk]() & 15);
		}
	}

	void A_SpectreChunkLarge ()
	{
		Actor foo = Spawn("AlienChunkLarge", pos + (0, 0, 10), ALLOW_REPLACE);

		if (foo != null)
		{
			int t;

			t = random[SpectreChunk]() & 7;
			foo.Vel.X = (t - (random[SpectreChunk]() & 15));
			
			t = random[SpectreChunk]() & 7;
			foo.Vel.Y = (t - (random[SpectreChunk]() & 15));

			foo.Vel.Z = (random[SpectreChunk]() & 7);
		}
	}

	void A_Spectre3Attack (string centerball = "SpectralLightningV2Monster", string centerballcrisis = "SpectralLightningV2MonsterCrisis", string subball = "SpectralLightningBall2Monster", string subballcrisis = "SpectralLightningBall2MonsterCrisis")
	{
		string atktype1 = centerball;
		string atktype2 = subball;
		A_MonsterCrisisCheck(); // Spectre3 - Lightning Ball 180
		if (user_canusecrisisatk == 1) 
		{
			atktype1 = centerballcrisis;
			atktype2 = subballcrisis;
			A_PlayCrisisAtkSound(); 
		}

		if (target == null)
			return;

		// Drops the center shot
		Actor foo = Spawn(atktype1, Pos + (0, 0, 32), ALLOW_REPLACE);
		if (foo != null)
		{
			foo.Vel.Z = -12;
			foo.target = self;
			foo.FriendPlayer = 0;
			foo.tracer = target;
		}

		// Fires the 180 attack
		Angle -= 90.;
		for (int i = 0; i < 20; ++i)
		{
			Angle += 9.;
			SpawnSubMissile (atktype2, self);
		}
		Angle -= 90.;
	}
	
	// Spectres
	void A_AlienSpectreDeath ()
	{
		PlayerPawn player = null;
		int log = 0;

		A_NoBlocking(); // [RH] Need this for Sigil rewarding
		if (!CheckBossDeath ())
		{
			return;
		}
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].health > 0)
			{
				player = players[i].mo;
				break;
			}
		}
		if (player == null)
		{
			return;
		}
		
		class<Actor> cls = GetClass();
		if (cls == "AlienSpectre1")
		{
			Floor_LowerToLowest(999, 8);
			log = 95;
		}
		else if (cls == "AlienSpectre2")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_BISHOP");
			log = 74;
			player.GiveInventoryType ("QuestItem21");
		}
		else if (cls == "AlienSpectre3")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_ORACLE");
			// If there are any Oracles still alive, kill them.
			ThinkerIterator it = ThinkerIterator.Create("Oracle");
			Actor oracle;

			while ( (oracle = Actor(it.Next())) != null)
			{
				if (oracle.health > 0)
				{
					oracle.health = 0;
					oracle.Die (self, self);
				}
			}
			player.GiveInventoryType ("QuestItem23");
			if (player.FindInventory ("QuestItem21"))
			{
				// If the Bishop is dead, set quest item 22
				player.GiveInventoryType ("QuestItem22");
			}
			if (player.FindInventory ("QuestItem24") == null)
			{
				// Macil is calling us back...
				log = 87;
			}
			else
			{
				// You wield the power of the complete Sigil.
				log = 85;
			}
			Door_Open(222, 64);
		}
		else if (cls == "AlienSpectre4")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_MACIL");
			player.GiveInventoryType ("QuestItem24");
			if (player.FindInventory ("QuestItem25") == null)
			{
				// Richter has taken over. Macil is a snake.
				log = 79;
			}
			else
			{
				// Back to the factory for another Sigil!
				log = 106;
			}
		}
		else if (cls == "AlienSpectre5")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_LOREMASTER");

			player.GiveInventoryType ("QuestItem26");
			if (!multiplayer)
			{
				player.GiveInventoryType ("UpgradeStamina");
				player.GiveInventoryType ("UpgradeAccuracy");
			}
			Sigil sigl = Sigil(player.FindInventory("Sigil"));
			if (sigl != null && sigl.health == 5)
			{
				// You wield the power of the complete Sigil.
				log = 85;
			}
			else
			{
				// Another Sigil piece. Woohoo!
				log = 83;
			}
			Floor_LowerToLowest(666, 8);
		}
		if (log > 0)
		{
			String voc = "svox/voc" .. log;
			A_StartSound(voc, CHAN_VOICE);
			player.player.SetLogNumber (log);
		}
	}

	// Entity
	private void A_SpectralMissile (class<Actor> missilename)
	{
		if (target != null)
		{
			Actor missile = SpawnMissileXYZ (Pos + (0,0,32), target, missilename, false);
			if (missile != null)
			{
				missile.tracer = target;
				missile.CheckMissileSpawn(radius);
			}
		}
	}

	void A_EntityAttack()
	{
		// Apparent Strife bug: Case 5 was unreachable because they used % 5 instead of % 6.
		// I've fixed that by making case 1 duplicate it, since case 1 did nothing.
		switch (random[Entity]() % 5)
		{
		case 0:
			A_SpotLightning("SpectralLightningSpotNew","SpectralLightningSpotCrisis");
			break;

		case 2:
			A_MonsterCrisisCheck(); // Entity Attack - 180 Spread
			A_CrisisSpawnProjectile("SpectralLightningH3Monster", "SpectralLightningH3MonsterCrisis", 32, 0);
			break;

		case 3:
			A_Spectre3Attack("SpectralLightningV2Monster","SpectralLightningV2MonsterCrisis","SpectralLightningBall2Monster","SpectralLightningBall2MonsterCrisis");
			break;

		case 4:
			A_MonsterCrisisCheck(); // Entity Attack - Large Lightning Column
			A_CrisisSpawnProjectile("SpectralLightningBigV2Monster", "SpectralLightningBigV2MonsterCrisis", 32, 0);
			break;

		default:
			A_MonsterCrisisCheck(); // Entity Attack - Giant Ball
			A_CrisisSpawnProjectile("SpectralLightningBigBall2New", "SpectralLightningBigBall2Crisis", 32, 0);
			break;
		}
	}

	void A_EntityDeath()
	{
		Actor second;
		double secondRadius = GetDefaultByType("EntitySecond").radius * 2;

		static const double turns[] = { 0, 90, -90 };

		Actor spot = tracer;
		if (spot == null) spot = self;

		for (int i = 0; i < 3; i++)
		{
			double an = Angle + turns[i];
			Vector3 pos = spot.Vec3Angle(secondRadius, an, tracer ? 70. : 0.);

			second = Spawn("EntitySecond", pos, ALLOW_REPLACE);
			if (second != null)
			{
				second.CopyFriendliness(self, true);
				second.A_FaceTarget();
				second.VelFromAngle(i == 0? 4.8828125 : secondRadius * 4., an);
			}
		}
	}
	
	// Sub-Entity
	void A_SubEntityDeath ()
	{
		if (CheckBossDeath ())
		{
			Exit_Normal(0);
		}
	}
}

// MONSTER SPAWNERS
class InquisitorSpawner : AetheriusMonsterSpawner replaces Inquisitor
{
	Default
	{
		Radius 40;
		Height 110;
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,1024) <= evolveChance)
			return "DarkInquisitor";
		else
			return "InquisitorNew";
	}
}

//
class AetheriusTeleporterBeaconNew : TeleporterBeacon
{
	void A_Beacon(string cname = "Rebel1New")
	{
		Actor owner = target;
		Actor rebel = Spawn(cname, (pos.xy, floorz), ALLOW_REPLACE);
		if (rebel == null)
		{
			return;
		}
		if (!rebel.TryMove (rebel.Pos.xy, true))
		{
			rebel.Destroy();
			return;
		}
		// Once the rebels start teleporting in, you can't pick up the beacon anymore.
		bSpecial = false;
		Inventory(self).DropTime = 0;
		// Set up the new rebel.
		rebel.threshold = rebel.DefThreshold;
		rebel.ChangeTID(1000);
		rebel.target = null;
		rebel.bInCombat = true;
		rebel.LastHeard = owner;	// Make sure the rebels look for targets
		if (deathmatch)
		{
			rebel.health *= 2;
		}
		if (owner != null)
		{
			// Rebels are the same color as their owner (but only in multiplayer)
			if (multiplayer)
			{
				rebel.Translation = owner.Translation;
			}
			rebel.SetFriendPlayer(owner.player);
			// Set the rebel's target to whatever last hurt the player, so long as it's not
			// one of the player's other rebels.
			if (owner.target != null && !rebel.IsFriend (owner.target))
			{
				rebel.target = owner.target;
			}
		}

		rebel.SetState (rebel.SeeState);
		rebel.Angle = Angle;
		rebel.SpawnTeleportFog(rebel.Vec3Angle(20., Angle, 0), false, true);
		if (--health < 0)
		{
			SetStateLabel("Death");
		}
	}
}

class HealthFillUpNew : DummyStrifeItem replaces HealthFillUp
{
	Default
	{
		Tag "$TAG_HEALTHFILLUP";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		AetheriusPlayerPawn cplayerpawn;

		
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		double healthrestorefactor = 1.0;
		double healthrestorelimit = 1.0;
		int CurrentHealth;
		int PlayerMaxHP = CallACS("StatCheck",1);
		if (TrueGameSkill == 0) { healthrestorefactor = 1.000; healthrestorelimit = 1.000; }
		if (TrueGameSkill == 1) { healthrestorefactor = 0.75; healthrestorelimit = 0.75; }
		if (TrueGameSkill == 2) { healthrestorefactor = 0.75; healthrestorelimit = 0.75; }
		if (TrueGameSkill == 3) { healthrestorefactor = 0.50; healthrestorelimit = 0.50; }
		if (TrueGameSkill == 4) { healthrestorefactor = 0.50; healthrestorelimit = 0.50; }
		if (TrueGameSkill == 5) { healthrestorefactor = 0.375; healthrestorelimit = 0.375; }
		if (TrueGameSkill == 6) { healthrestorefactor = 0.375; healthrestorelimit = 0.375; }
		if (TrueGameSkill == 7) { healthrestorefactor = 0.25; healthrestorelimit = 0.25; }
		if (TrueGameSkill == 8) { healthrestorefactor = 0.25; healthrestorelimit = 0.25; }
		if (TrueGameSkill == 9) { healthrestorefactor = 0.125; healthrestorelimit = 0.125; }
		healthrestorefactor *= 0.25;
		int HealLimit = (PlayerMaxHP * healthrestorelimit);
		
		if (toucher)
		{
			cplayerpawn = AetheriusPlayerPawn(toucher);
			if (cplayerpawn)
			{
				CurrentHealth = cplayerpawn.player.mo.health;
				if (CurrentHealth < HealLimit)
				{
					CurrentHealth += (PlayerMaxHP * healthrestorefactor);
					if (CurrentHealth >= HealLimit) CurrentHealth = HealLimit;
					cplayerpawn.player.mo.health = cplayerpawn.player.health = CurrentHealth;
					toucher.A_StartSound("gethealthkit",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					toucher.A_SetBlend("E0 E0 E0",0.33,random(17,18),"E0 E0 E0",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
					//Console.Printf("[True] CurrentHealth: %d, Limit: %d", CurrentHealth, (PlayerMaxHP * healthrestorelimit));
				}
				else
				{
					//Console.Printf("[False] CurrentHealth: %d, Limit: %d", CurrentHealth, (PlayerMaxHP * healthrestorelimit));
					return false;
				}
			}
			else
			{
				return false;
			}
		}

		GoAwayAndDie();
		return true;
	}
}

class AmmoFillupNew : DummyStrifeItem replaces AmmoFillup
{
	Default
	{
		Tag "$TAG_AMMOFILLUP";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		//Console.Printf("235252");
		int maxammo;
		Inventory item = toucher.FindInventory("ElectricBolts");
		if (item == NULL)
		{
			item = toucher.GiveInventoryType("ElectricBolts");
			if (item != NULL)
			{
				maxammo = item.MaxAmount;
				item.Amount = maxammo / 5;
				toucher.A_StartSound("misc/i_pkup",9,CHANF_DEFAULT,1.0,ATTN_NORM);
				toucher.A_SetBlend("FF FF FF",0.33,random(11,12),"FF FF FF",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
		}
		else 
		{
			maxammo = item.MaxAmount;
			if (item.Amount < (maxammo / 5))
			{
				item.Amount = maxammo / 5;
				toucher.A_StartSound("misc/i_pkup",9,CHANF_DEFAULT,1.0,ATTN_NORM);
				toucher.A_SetBlend("FF FF FF",0.33,random(11,12),"FF FF FF",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
			else
			{
				return false;
			}
		}
		GoAwayAndDie ();
		return true;
	}
	
}


// WEAPONS
class ElectricBoltsNew : ElectricBolts replaces ElectricBolts
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		Inventory.Amount 20;
		Inventory.MaxAmount 50;
		Ammo.BackpackAmount 4;
		Ammo.BackpackMaxAmount 100;
		Inventory.Icon "I_XQRL";
		Tag "$TAG_ELECTRICBOLTS"; // "Electric Bolts";
		Inventory.PickupMessage "$TXT_ELECTRICBOLTS"; // "You picked up the electric bolts."
	}
	
	States
	{
		Spawn:
			XQRL A -1;
			Stop;
	}
}

class PoisonBoltsNew : PoisonBolts replaces PoisonBolts
{
	default
	{
		+FLOORCLIP;
		+DONTGIB;
		Inventory.Amount 10;
		Inventory.MaxAmount 25;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 50;
		Inventory.Icon "I_PQRL";
		Tag "$TAG_POISONBOLTS"; // "Poison Bolts";
		Inventory.PickupMessage "$TXT_POISONBOLTS"; // "You picked up the poison bolts.";
	}
	States
	{
		Spawn:
			PQRL A -1;
			Stop;
	}
}

// Crossbow Projectiles
class ElectricBoltNew : AetheriusProjectileZSC replaces ElectricBolt
{
	int user_zaptimer;
	int user_zaprad;
	default
	{
		Tag "Electric Bolt";
		Speed 30;
		Radius 10;
		Height 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+STRIFEDAMAGE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DROPOFF;
		DamageType "Thunder";
		MaxStepHeight 4;
		SeeSound "misc/swish";
		ActiveSound "misc/swish";
		DeathSound "weapons/xbowhit";
		Obituary "$OB_MPELECTRICBOLT"; // "%o got bolted to the wall by %k.";
	}
	
	States
	{
		Spawn:
			AROW A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(25,0); 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			AROW A 10 A_LoopActiveSound();
			Loop;
		Death:
			ZAP1 AAABBBCCCDDDEEEFFFEEEDDCCBBA 1
			{
				user_zaprad = randompick(4,5,6) + (CallACS("MiscVarCheckDECORATE",10031) * 0.5);
				user_zaptimer++;
				if ((user_zaptimer % random(3,4)) == 0) 
				{
					bFORCERADIUSDMG = false;
					if (random(1,(8-CallACS("MiscVarCheckDECORATE",10031)) <= 2)) { bFORCERADIUSDMG = true; }
					A_Explode(A_GetPlayerAttackDamage(72),(user_zaprad*2),0,0,user_zaprad,0,0,"BulletPuff","Thunder");
				}
			}
			Stop;
	}
}

class PoisonBoltNew : AetheriusProjectileZSC replaces PoisonBolt
{
	default
	{
		Tag "Poison Bolt";
		Speed 30;
		Radius 10;
		Height 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+STRIFEDAMAGE;
		DamageType "PoisonBolt";
		MaxStepHeight 4;
		SeeSound "misc/swish";
		ActiveSound "misc/swish";
		Obituary "%o recieved a lethal dose of %k's wrath.";
	}
	
	States
	{
		Spawn:
			ARWP A 0 NoDelay 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(26,0); 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			ARWP A 10 A_LoopActiveSound();
			Loop;
		Death:
			AROW A 1;
			Stop;
	}
}

// Crossbow
class StrifeCrossbowNew : StrifeWeaponBase replaces StrifeCrossbow
{
	default
	{
		+FLOORCLIP;
		Weapon.SelectionOrder 1200;
		+WEAPON.NOALERT;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 8;
		Weapon.AmmoType1 "ElectricBolts";
		Weapon.SisterWeapon "StrifeCrossbow2New";
		Inventory.PickupMessage "You picked up the crossbow \cx[Slot 2]\c-";
		Tag "Crossbow [w/ Electric Bolts]";
		Inventory.Icon "CBOWA0";
	}

	States
	{
		Spawn:
			CBOW A -1;
			Stop;
		Ready:
			XBOW A 0 A_GunFlash("Flash", GFF_NOEXTCHANGE);
			XBOW A 1 A_WeaponReady();
			Wait;
		Deselect:
			XBOW A 1 
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			XBOW A 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			TNT1 A 0
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { return resolvestate("Fire5"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { return resolvestate("Fire4"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { return resolvestate("Fire3"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { return resolvestate("Fire2"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { return resolvestate("Fire1"); }
				return resolvestate("Fire0");
			}
		Fire0:
			// 32 [3]
			XBOW A 3 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire1:
			// 29 [3]
			XBOW A 3 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire2:
			// 27 [2]
			XBOW A 2 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire3:
			// 24 [2]
			XBOW A 2 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire4:
			// 22 [1]
			XBOW A 1 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		Fire5:
			// 19 [1]
			XBOW A 1 A_GunFlash("LightDone",GFF_NOEXTCHANGE);
			goto FireArrow;
		FireArrow:
			TNT1 A 0 
			{
				CallACS("StartTensionCountDown");
				A_StartSound("weapons/xbowshoot",1);
				A_SpreadAuraFireProjectile("ElectricBoltNew",frandom(-(A_GetHitScanXSpread(6)),(A_GetHitScanXSpread(6))),1,"ElectricBolts",0,0,0,0);
			}
			XBOW B 6
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					}
					else
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}
			}
			XBOW C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW D 6
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					}
					else
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}
			}
			XBOW E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
			}
			XBOW F 5
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW G 5
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}

				A_GunFlash ("Flash", GFF_NOEXTCHANGE);
				A_CheckReload();
			}
			Goto Ready+1;
		Flash:
			XBOW KLM 5;
			Loop;
	}
}

class StrifeCrossbow2New : StrifeWeaponBase replaces StrifeCrossbow2
{
	default
	{
		Weapon.SelectionOrder 2700;
		+WEAPON.NOALERT;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType1 "PoisonBolts";
		Weapon.SisterWeapon "StrifeCrossbowNew";
		Tag "Crossbow [w/ Poison Bolts]";
	}
	
	States
	{
		Ready:
			XBOW H 1 A_WeaponReady();
			Loop;
		Deselect:
			XBOW H 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			XBOW H 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			TNT1 A 0
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { return resolvestate("Fire5"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { return resolvestate("Fire4"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { return resolvestate("Fire3"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { return resolvestate("Fire2"); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { return resolvestate("Fire1"); }
				return resolvestate("Fire0");
			}
		Fire0:
			// 32 [3]
			XBOW H 3;
			goto FireArrow;
		Fire1:
			// 29 [3]
			XBOW H 3;
			goto FireArrow;
		Fire2:
			// 27 [2]
			XBOW H 2;
			goto FireArrow;
		Fire3:
			// 24 [2]
			XBOW H 2;
			goto FireArrow;
		Fire4:
			// 22 [1]
			XBOW H 1;
			goto FireArrow;
		Fire5:
			// 19 [1]
			XBOW H 1;
			goto FireArrow;
		FireArrow:
			TNT1 A 0 
			{
				CallACS("StartTensionCountDown");
				A_StartSound("weapons/xbowshoot",1);
				A_SpreadAuraFireProjectile("PoisonBoltNew",frandom(-(A_GetHitScanXSpread(6)),(A_GetHitScanXSpread(6))),1,"PoisonBolts",0,0,0,0);
			}
			XBOW B 6 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					}
					else
					{
						if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
						else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}
			}
			XBOW C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW D 6
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(5); }
				else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
			}
			XBOW E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
			}
			XBOW I 5
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
			}
			XBOW J 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3)
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(4); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 4) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 2) { A_SetTics(4); }
					else if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(5); }
				}

				A_CheckReload();
			}
			Goto Ready;
		Flash:
			Stop;
	}
}

// AMMO
// Bullet Clip
class ClipOfBulletsNew : ClipOfBullets replaces ClipOfBullets
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			BLIT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 1)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 48)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Box of Bullets
class BoxOfBulletsNew : BoxOfBullets replaces BoxOfBullets
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			BBOX A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 144)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Assault Gun
class AssaultGunNew : AssaultGun replaces AssaultGun
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			RIFL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 16)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 4)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			RIFG A 1 A_WeaponReady();
			Loop;
		Deselect:
			RIFG B 1 A_Lower(18);
			Loop;
		Select:
			RIFG A 1 A_Raise(18);
			Loop;
		Fire:
			RIFF AB 3 A_FireAssaultGun();
			RIFG D 3 A_FireAssaultGun();
			RIFG C 0 A_ReFire();
			RIFG B 2 A_Light0();
			Goto Ready;
	}
}

class AssaultGunStandingNew : AssaultGunStanding replaces AssaultGunStanding
{
	default
	{
		DropItem "AssaultGunNew";
		Inventory.PickupMessage "$TXT_ASSAULTGUN"; // "You picked up the assault gun."
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			RIFL B 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 16)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 4)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Mini Missiles
class MiniMissilesNew : MiniMissiles replaces MiniMissiles
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MSSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 1)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 48)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Crate Of Missiles
class CrateOfMissilesNew : CrateOfMissiles replaces CrateOfMissiles
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			ROKT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 144)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Mini Missile Launcher
class MiniMissileLauncherNew : MiniMissileLauncher replaces MiniMissileLauncher
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MMSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 48)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 24)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 6)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			MMIS A 1 A_WeaponReady();
			Loop;
		Deselect:
			MMIS A 1 A_Lower(18);
			Loop;
		Select:
			MMIS A 1 A_Raise(18);
			Loop;
		Fire:
			MMIS A 4 A_FireMiniMissile();
			MMIS B 4 A_Light1();
			MMIS C 5 Bright;
			MMIS D 2 Bright A_Light2();
			MMIS E 2 Bright;
			MMIS F 2 Bright A_Light0();
			MMIS F 0 A_ReFire();
			Goto Ready;
	}
}

// Flamethrower
class FlameThrowerNew : FlameThrower replaces FlameThrower
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			FLAM A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 64)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 8)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			FLMT AB 3 A_WeaponReady();
			Loop;
		Deselect:
			FLMT A 1 A_Lower(18);
			Loop;
		Select:
			FLMT A 1 A_Raise(18);
			Loop;
		Fire:
			FLMF A 2 A_FireFlamer();
			FLMF B 3 A_ReFire();
			Goto Ready;
	}
}

// HE Grenade Rounds
class HEGrenadeRoundsNew : HEGrenadeRounds replaces HEGrenadeRounds
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MSSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}
// Phosphorus Grenades
class PhosphorusGrenadeRoundsNew : PhosphorusGrenadeRounds replaces PhosphorusGrenadeRounds
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			ROKT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Grenade Launcher
class StrifeGrenadeLauncherNew : StrifeGrenadeLauncher replaces StrifeGrenadeLauncher
{
	default
	{
		Weapon.AmmoType1 "HEGrenadeRounds";
		Weapon.SisterWeapon "StrifeGrenadeLauncher2New";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			GRND A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 256) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 192) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0); }
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			GREN A 1 A_WeaponReady();
			Loop;
		Deselect:
			GREN A 1 A_Lower(18);
			Loop;
		Select:
			GREN A 1 A_Raise(18);
			Loop;
		Fire:
			GREN A 5 A_FireGrenade("HEGrenade", -90, "Flash");
			GREN B 10;
			GREN A 5 A_FireGrenade("HEGrenade", 90, "Flash2");
			GREN C 10;
			GREN A 0 A_ReFire();
			Goto Ready;
		Flash:
			GREF A 5 Bright A_Light1();
			Goto LightDone;
		Flash2:
			GREF B 5 Bright A_Light2();
			Goto LightDone;
	}
}
class StrifeGrenadeLauncher2New : StrifeGrenadeLauncher2 replaces StrifeGrenadeLauncher2
{
	default
	{
		Weapon.AmmoType1 "PhosphorusGrenadeRounds";
		Weapon.SisterWeapon "StrifeGrenadeLauncherNew";
	}
	
	States
	{
		Ready:
			GREN D 1 A_WeaponReady();
			Loop;
		Deselect:
			GREN D 1 A_Lower(18);
			Loop;
		Select:
			GREN D 1 A_Raise(18);
			Loop;
		Fire:
			GREN D 5 A_FireGrenade("PhosphorousGrenade", -90, "Flash");
			GREN E 10;
			GREN D 5 A_FireGrenade("PhosphorousGrenade", 90, "Flash2");
			GREN F 10;
			GREN A 0 A_ReFire();
			Goto Ready;
		Flash:
			GREF C 5 Bright A_Light1();
			Goto LightDone;
		Flash2:
			GREF D 5 Bright A_Light2();
			Goto LightDone;
	}
}

// Energy Pod
class EnergyPodNew : EnergyPod replaces EnergyPod
{
	default
	{
		+DONTGIB;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			MSSL A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 5)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 240)
					{
						A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}
// Energy Pack
class EnergyPackNew : EnergyPack replaces EnergyPack
{
	default
	{
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			ROKT A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 15)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 240)
					{
						A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;
	}
}

// Mauler [both modes]
class MaulerNew : Mauler replaces Mauler
{
	default
	{
		Weapon.SisterWeapon "Mauler2New";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TRPD A 1
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 256)
					{
						A_SpawnItemEx("RandomHellcoreWeapon",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 64)
					{
						A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,0);
					}
					if (random(1,256) <= 16)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,0,0);
					}
					A_FadeOut(1.0);
				}
			}
			Loop;

		Ready:
			MAUL FGHA 6 A_WeaponReady();
			Loop;
		Deselect:
			MAUL A 1 A_Lower(18);
			Loop;
		Select:
			MAUL A 1 A_Raise(18);
			Loop;
		Fire:
			BLSF A 5 Bright A_FireMauler1(); // see MaulerPuff
			MAUL B 3 Bright A_Light1();
			MAUL C 2 A_Light2();
			MAUL DE 2;
			MAUL A 7 A_Light0();
			MAUL H 7;
			MAUL G 7 A_CheckReload();
			Goto Ready;
	}
}
class Mauler2New : Mauler2 replaces Mauler2
{
	default
	{
		Weapon.SisterWeapon "MaulerNew";
	}
	
	States
	{
		Ready:
			MAUL IJKL 7 A_WeaponReady();
			Loop;
		Deselect:
			MAUL I 1 A_Lower(18);
			Loop;
		Select:
			MAUL I 1 A_Raise(18);
			Loop;
		Fire:
			MAUL I 20 A_FireMauler2Pre();
			MAUL J 10 A_Light1();
			BLSF A 10 Bright A_FireMauler2(); // see MaulerTorpedo
			MAUL B 10 Bright A_Light2();
			MAUL C 2;
			MAUL D 2 A_Light0();
			MAUL E 2 A_ReFire();
			Goto Ready;
	}
}

// SELL ITEMS
// IMPORTANT: THESE ARE FOR USE BY STRIFE DIALOGxx SCRIPTS TO GIVE THE PLAYER A SPECIFIC AMOUNT OF 
// GOLD FOR THE RESPECTIVE ITEMS. SINCE ITEMS CAN ONLY BE GIVEN 1 AT A TIME, THIS THE BEST WORKAROUND I HAVE :V
class BaseSellItem : AetheriusCustomInventory
{
	default
	{
		radius 5;
		height 5;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
}

// MEDICAL ITEMS
class MedicinalHerbSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",10,AAPTR_PLAYER1);
				A_TakeInventory("MedicinalHerbSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class StrongMediceneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",25,AAPTR_PLAYER1);
				A_TakeInventory("StrongMediceneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class SpecialMediceneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",75,AAPTR_PLAYER1);
				A_TakeInventory("SpecialMediceneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class YggdrasilDewSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",625,AAPTR_PLAYER1);
				A_TakeInventory("YggdrasilDewSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MedPatchSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",5,AAPTR_PLAYER1);
				A_TakeInventory("MedPatchSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MedicalKitSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",12,AAPTR_PLAYER1);
				A_TakeInventory("MedicalKitSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class SurgeryKitSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",37,AAPTR_PLAYER1);
				A_TakeInventory("SurgeryKitSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// BUFF ITEMS
class PaxaPunchSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",250,AAPTR_PLAYER1);
				A_TakeInventory("PaxaPunchSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MercuryBandanaSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",250,AAPTR_PLAYER1);
				A_TakeInventory("MercuryBandanaSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// MAGICAL ITEMS
class MagicWaterSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",87,AAPTR_PLAYER1);
				A_TakeInventory("MagicWaterSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class SageElixirSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",225,AAPTR_PLAYER1);
				A_TakeInventory("SageElixirSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class ElfinElixirItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",500,AAPTR_PLAYER1);
				A_TakeInventory("ElfinElixirItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
 }
}

// UNIQUE ITEMS
class EnvironmentalSuitSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",12,AAPTR_PLAYER1);
				A_TakeInventory("EnvironmentalSuitSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class TargeterSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",125,AAPTR_PLAYER1);
				A_TakeInventory("TargeterSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class DegninOreSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",1375,AAPTR_PLAYER1);
				A_TakeInventory("DegninOreSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class ShadowArmorSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",500,AAPTR_PLAYER1);
				A_TakeInventory("ShadowArmorSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class TeleporterBeaconSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",150,AAPTR_PLAYER1);
				A_TakeInventory("TeleporterBeaconSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class ScannerSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",750,AAPTR_PLAYER1);
				A_TakeInventory("ScannerSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// VIMSTONE ITEMS
class LesserVimstoneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",1125,AAPTR_PLAYER1);
				A_TakeInventory("LesserVimstoneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class GreaterVimstoneSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",4020,AAPTR_PLAYER1);
				A_TakeInventory("GreaterVimstoneSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

class MiraclePotionSellItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",315,AAPTR_PLAYER1);
				A_TakeInventory("MiraclePotionSellItem1",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}

// OTHER "JUNK"
class OfferingChaliceItem1 : BaseSellItem
{
	States
	{
		Pickup:
		Use:
			TNT1 A 1 
			{
				A_GiveInventory("Coin",7500,AAPTR_PLAYER1);
				A_GiveInventory("SeedOfSkillForced",2,AAPTR_PLAYER1);
				A_TakeInventory("OfferingChaliceItem1",1,0,AAPTR_PLAYER1);
				A_TakeInventory("QuestItem2",1,0,AAPTR_PLAYER1);
				A_StartSound("Grabbed/Coins",0);
			}
			Stop;
	}
}