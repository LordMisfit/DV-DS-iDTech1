// Base HumanoidClass
class StrifeHumanoidBase : AetheriusMonsterZSC
{
	default
	{
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		CrushPainSound "misc/pcrush";
	}
	
	States
	{
		Burn:
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

// PEASANTS
class PeasantNew : StrifeHumanoidBase replaces Peasant
{
	default
	{
		Tag "Peasant";
		Health 31;
		PainChance 200;
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0;
		Speed 8;
		Radius 20;
		Height 56;
		Monster;
		+NEVERTARGET;
		-COUNTKILL;
		+NOSPLASHALERT;
		+FLOORCLIP;
		+JUSTHIT;
		+CANTSEEK;
		MinMissileChance 150;
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		SeeSound "peasant/sight";
		AttackSound "peasant/attack";
		PainSound "peasant/pain";
		DeathSound "peasant/death";
		HitObituary "$OB_PEASANT"; // "%o should have never picked a fight with a civilian.";
	}
	
	States
	{
		Spawn:
			PEAS A 0 NoDelay;
			PEAS A 10 A_Look2();
			goto Spawn+1;
		See:
			PEAS A 0;
			PEAS AABBCCDD 5 A_DVDSWander(0,1,3,1,1);
			loop;
		Melee:
			PEAS E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			PEAS F 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(2*random(1,5)+2);
			}
			PEAS E 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto See;
		Pain:
			PEAS O 3;
			PEAS O 3 A_DVDSPain();
			Goto Melee;
		Pain.Fist:
			PEAS O 3;
			PEAS O 3 A_DVDSPain();
			PEAS OO 3;
			Goto Melee;
		Pain.Kick:
			PEAS O 3;
			PEAS O 3 A_DVDSPain();
			PEAS OOOO 3;
			Goto Melee;
		Wound:
			PEAS G 5
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
			}
			PEAS H 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(11); }
				A_GetHurt();
			}
			PEAS I 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto Wound+1;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			PEAS G 5;
			PEAS H 5 A_Scream();
			PEAS I 6;
			PEAS J 5 A_NoBlocking();
			PEAS K 5;
			PEAS L 6;
			PEAS M 8;
			PEAS N 1400;
			GIBS U 5;
			GIBS V 1400;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			GIBS M 5 A_TossGib();
			GIBS N 5 A_XScream();
			GIBS O 5 A_NoBlocking();
			GIBS PQRS 4 A_TossGib();
			Goto Death+9;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

class Peasant1New : PeasantNew replaces Peasant1
{
	default
	{
		Tag "Peasant";
		Speed 4;
	}
}

class Peasant2New : PeasantNew replaces Peasant2
{
	default
	{
		Tag "Peasant";
		Speed 5;
	}
}

class Peasant3New : PeasantNew replaces Peasant3
{
	default
	{
		Tag "Peasant";
		Speed 5;
	}
}

class Peasant4New : PeasantNew replaces Peasant4
{
	default
	{
		Tag "Peasant";
		Translation 0;
		Speed 7;
	}
}

class Peasant5New : PeasantNew replaces Peasant5
{
	default
	{
		Tag "Peasant";
		Translation 0;
		Speed 7;
	}
}

class Peasant6New : PeasantNew replaces Peasant6
{
	default
	{
		Tag "Peasant";
		Translation 0;
		Speed 7;
	}
}

class Peasant7New : PeasantNew replaces Peasant7
{
	default
	{
		Tag "Peasant";
		Translation 2;
	}
}

class Peasant8New : PeasantNew replaces Peasant8
{
	default
	{
		Tag "Peasant";
		Translation 2;
	}
}

class Peasant9New : PeasantNew replaces Peasant9
{
	default
	{
		Tag "Peasant";
		Translation 2;
	}
}

class Peasant10New : PeasantNew replaces Peasant10
{
	default
	{
		Tag "Peasant";
		Translation 1;
	}
}

class Peasant11New : PeasantNew replaces Peasant11
{
	default
	{
		Tag "Peasant";
		Translation 1;
	}
}

class Peasant12New : PeasantNew replaces Peasant12
{
	default
	{
		Tag "Peasant";
		Translation 1;
	}
}

class Peasant13New : PeasantNew replaces Peasant13
{
	default
	{
		Tag "Peasant";
		Translation 3;
	}
}

class Peasant14New : PeasantNew replaces Peasant14
{
	default
	{
		Tag "Peasant";
		Translation 3;
	}
}

class Peasant15New : PeasantNew replaces Peasant15
{
	default
	{
		Tag "Peasant";
		Translation 3;
	}
}

class Peasant16New : PeasantNew replaces Peasant16
{
	default
	{
		Tag "Peasant";
		Translation 5;
	}
}

class Peasant17New : PeasantNew replaces Peasant17
{
	default
	{
		Tag "Peasant";
		Translation 5;
	}
}

class Peasant18New : PeasantNew replaces Peasant18
{
	default
	{
		Tag "Peasant";
		Translation 5;
	}
}

class Peasant19New : PeasantNew replaces Peasant19
{
	default
	{
		Tag "Peasant";
		Translation 4;
	}
}

class Peasant20New : PeasantNew replaces Peasant20
{
	default
	{
		Tag "Peasant";
		Translation 4;
	}
}

class Peasant21New : PeasantNew replaces Peasant21
{
	default
	{
		Tag "Peasant";
		Translation 4;
	}
}

class Peasant22New : PeasantNew replaces Peasant22
{
	default
	{
		Tag "Peasant";
		Translation 6;
	}
}

// BEGGARS
class BeggarNew : StrifeHumanoidBase replaces Beggar // Base Class
{
	default
	{
		Tag "Beggar";
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0;
		Health 20;
		PainChance 250;
		Speed 3;
		Radius 20;
		Height 56;
		Monster;
		+JUSTHIT;
		-COUNTKILL;
		+NOSPLASHALERT;
		+CANTSEEK;
		MinMissileChance 150;
		Tag "Beggar";
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		HitObituary "$OB_BEGGAR"; // "%o was beaten to death by the poor.";
		AttackSound "beggar/attack";
		PainSound "beggar/pain";
		DeathSound "beggar/death";
	}

	States
	{
		Spawn:
			BEGR A 0 NoDelay;
			BEGR A 10 A_Look();
			goto Spawn+1;
		See:
			BEGR A 0;
			BEGR AABBCC 4 A_DVDSWander(0,1,3,1,1);
			Loop;
		Melee:
			BEGR D 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
			}
			BEGR D 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(2*random(1,5)+2);
			}
			BEGR E 1
			{
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			BEGR D 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
				A_SentinelRefire();
			}
			Loop;
		Pain:
			BEGR A 3 A_DVDSPain();
			BEGR A 3 A_DVDSChase("Melee","Missile",0,1,3,1,1);
			Goto Melee;
		Pain.Fist:
			BEGR A 3;
			BEGR A 3 A_DVDSPain();
			BEGR AA 3;
			Goto Melee;
		Pain.Kick:
			BEGR A 3;
			BEGR A 3 A_DVDSPain();
			BEGR AAAA 3;
			Goto Melee;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			BEGR F 4;
			BEGR G 4 A_Scream();
			BEGR H 4;
			BEGR I 4 A_NoBlocking();
			BEGR JKLM 4;
			BEGR N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			BEGR F 5 A_TossGib();
			GIBS M 5 A_TossGib();
			GIBS N 5 A_XScream();
			GIBS O 5 A_NoBlocking();
			GIBS PQRST 4 A_TossGib();
			GIBS U 5;
			GIBS V 1400;
			Stop;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

class Beggar1New : BeggarNew replaces Beggar1 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar2New : BeggarNew replaces Beggar2 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar3New : BeggarNew replaces Beggar3 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar4New : BeggarNew replaces Beggar4 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar5New : BeggarNew replaces Beggar5 
{
	default
	{
		Tag "Beggar";
	}
}

// MERCHANTS
class MerchantNew : AetheriusMonsterZSC replaces Merchant
{
	default
	{
		Tag "Merchant";
		Health 94;
		PainChance 256; // a merchant should always enter the pain state when getting hurt
		Radius 20;
		Height 56;
		Mass 5000;
		CrushPainSound "misc/pcrush";
		+SOLID;
		+SHOOTABLE;
		+NOTDMATCH;
		+NOSPLASHALERT;
		+NOBLOOD;
		+NODAMAGE;
		+CANTSEEK;
	}
	
	States
	{
		Spawn:
			MRST A 10 A_Look2();
			Loop;
			MRLK A 30 A_ActiveSound();
			Loop;
			MRLK B 30;
			Loop;
			MRBD ABCDEDCB 4;
			MRBD A 5;
			MRBD F 6;
			Loop;
		See:
		Pain:
			MRPN A 1;
			MRPN A 2 A_AlertMonsters();
			MRPN B 3 A_DVDSPain();
			MRPN C 3;
			MRPN D 9 Door_CloseWaitOpen(999, 64, 960);
			MRPN C 4;
			MRPN B 3;
			MRPN A 3 A_ClearSoundTarget();
			Goto Spawn;
		Yes:
			MRYS A 20;
			// Fall through
		Greetings:
			MRGT ABCDEFGHI 5;
			Goto Spawn;
		No:
			MRNO AB 6;
			MRNO C 10;
			MRNO BA 6;
			Goto Greetings;
	}
}

class WeaponSmithNew : MerchantNew replaces WeaponSmith
{
	default
	{
		Tag "Weapon Smith";
		PainSound "smith/pain";
		Tag "$TAG_WEAPONSMITH"; // "Weapon Smith"
	}
}

class BarKeepNew : MerchantNew replaces BarKeep
{
	default
	{
		Tag "Bartender";
		Translation 4;
		PainSound "barkeep/pain";
		ActiveSound "barkeep/active";
		Tag "$TAG_BARKEEP"; // "Bar Keep"
	}
}

class ArmorerNew : MerchantNew replaces Armorer
{
	default
	{
		Tag "Armorer";
		Translation 5;
		PainSound "armorer/pain";
		Tag "$TAG_ARMORER"; // "Armorer"
	}
}

class MedicNew : MerchantNew replaces Medic
{
	default
	{
		Tag "Medic";
		Translation 6;
		PainSound "medic/pain";
		Tag "$TAG_MEDIC"; // "Medic"
	}
}

// THE FRONT
class RebelNew : StrifeHumanoidBase replaces Rebel // Base class for Rebels
{
	default
	{
		Tag "Front Rebel";
		Health 75; // 1.25x the HP
		PainChance 187; // 75% the original pain chance
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0;
		Speed 10; // 25% more speed than before
		Radius 20;
		Height 56;
		Monster;
		+FRIENDLY;
		-COUNTKILL;
		+NOSPLASHALERT;
		+CANTSEEK;
		species "Players";
		MinMissileChance 150;
		Tag "$TAG_REBEL"; // "Rebel"
		SeeSound "rebel/sight";
		PainSound "rebel/pain";
		DeathSound "rebel/death";
		ActiveSound "rebel/active";
		Obituary "$OB_REBEL"; // "%o was gunned down by a Rebel."
	}

	States
	{
		Spawn:
			HMN1 P 0 NoDelay;
			HMN1 P 5 A_Look2();
			goto Spawn+1;
			HMN1 Q 0;
			HMN1 Q 8;
			goto Spawn+1;
			HMN1 R 0;
			HMN1 R 8;
			goto Spawn+1;
			HMN1 A 0;
			HMN1 ABCDABCD 6 A_DVDSWander(0,1,3,1,1);
			goto Spawn+1;
		See:
			HMN1 A 0;
			HMN1 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 E 6
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}

		Shoot1:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 F 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
					else 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
				}
				else
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
					else 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 E 6
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
					else 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
				}
				else
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
					else 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
				}
			}
			HMN1 O 0 A_Jump(96,"See");
			HMN1 O 0 A_MonsterRefire(48,"See");
			Goto See;

		Pain:
			HMN1 O 2;
			HMN1 O 2 A_DVDSPain();
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Pain.Fist:
			HMN1 O 2;
			HMN1 O 2 A_DVDSPain();
			HMN1 OO 2;
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Pain.Kick:
			HMN1 O 2;
			HMN1 O 2 A_DVDSPain();
			HMN1 OOOO 2;
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			HMN1 G 5;
			HMN1 H 5 A_Scream();
			HMN1 I 3 A_NoBlocking();
			HMN1 J 4;
			HMN1 KLM 3;
			HMN1 N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			RGIB A 4 A_TossGib();
			RGIB B 4 A_XScream();
			RGIB C 3 A_NoBlocking();
			RGIB DEF 3 A_TossGib();
			RGIB G 3;
			RGIB H 1400;
			Stop;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
		Ice:
			TNT1 A 0 { bCANTSEEK = true; }
			HMN1 A 5 A_FreezeDeath();
			HMN1 A 1 A_FreezeDeathChunks();
			Wait;
	}
}

class Rebel1New : RebelNew replaces Rebel1
{
	default
	{
		Tag "Front Rebel";
		DropItem "ClipOfBullets";
	}
}

class Rebel2New : RebelNew replaces Rebel2
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel3New : RebelNew replaces Rebel3
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel4New : RebelNew replaces Rebel4
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel5New : RebelNew replaces Rebel5
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel6New : RebelNew replaces Rebel6
{
	default
	{
		Tag "Front Rebel";
	}
}