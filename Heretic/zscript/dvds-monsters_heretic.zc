class ChickenNew : AetheriusMorphedMonster replaces Chicken
{
	default
	{
		Tag "Chicken";
		Health 10;
		Radius 9;
		Height 22;
		Mass 40;
		Speed 4;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		DamageFactor "Crush", 4.0;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		+FLOORCLIP;
		SeeSound "chicken/pain";
		AttackSound "chicken/attack";
		PainSound "chicken/pain";
		DeathSound "chicken/death";
		ActiveSound "chicken/active";
		Obituary "$OB_CHICKEN";
	}
	
	States
	{
		Spawn:
			CHKN A 0 NoDelay;
			CHKN AB 10 A_Look();
			goto Spawn+1;
		See:
			CHKN A 0;
			CHKN AB 3
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			CHKN A 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			CHKN C 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ChicAttack](1,2));
			}
			Goto See;
		Pain:
			CHKN D 5 A_Feathers();
			CHKN C 5 A_DVDSPain();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CHKN E 6 A_Scream();
			CHKN F 6 A_Feathers();
			CHKN G 6;
			CHKN H 6 A_NoBlocking();
			CHKN IJK 6;
			CHKN L -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			wait;
	}
}
class FChicken : ChickenNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Gargoyles
class HereticImpNew : AetheriusMonsterZSC // replaces HereticImp
{ 
	default
	{
		Tag "Gargoyle";
		Health 40;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 10;
		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.25;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		Species "Gargoyle";
		DamageFunction (0);
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "$OB_HERETICIMP";
		HitObituary "$OB_HERETICIMPHIT";
	}
	
	states
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(24);
			goto Spawn+1;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(6,12,18,24,0.333,0.333);
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](5,12), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			IMPX A 0
			{
				if (levelbehavior && user_monsterlevel > 300) { user_chargechance = 70; }
				else if (levelbehavior && user_monsterlevel > 280) { user_chargechance = 67; }
				else if (levelbehavior && user_monsterlevel > 260) { user_chargechance = 64; }
				else if (levelbehavior && user_monsterlevel > 240) { user_chargechance = 61; }
				else if (levelbehavior && user_monsterlevel > 220) { user_chargechance = 58; }
				else if (levelbehavior && user_monsterlevel > 200) { user_chargechance = 55; }
				else if (levelbehavior && user_monsterlevel > 180) { user_chargechance = 52; }
				else if (levelbehavior && user_monsterlevel > 160) { user_chargechance = 49; }
				else if (levelbehavior && user_monsterlevel > 140) { user_chargechance = 46; }
				else if (levelbehavior && user_monsterlevel > 120) { user_chargechance = 43; }
				else if (levelbehavior && user_monsterlevel > 100) { user_chargechance = 40; }
				else if (levelbehavior && user_monsterlevel > 80) { user_chargechance = 37; }
				else if (levelbehavior && user_monsterlevel > 60) { user_chargechance = 34; }
				else if (levelbehavior && user_monsterlevel > 40) { user_chargechance = 31; }
				else if (levelbehavior && user_monsterlevel > 20) { user_chargechance = 28; }
				else { user_chargechance = 25; }

				if (random(1,100) > user_chargechance) { return resolvestate("See"); }
				else
				{
					A_GargDashCheck(); // if (AAPTR_TARGET == AAPTR_NULL) { return resolvestate("See"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Charge:
			IMPX A 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			IMPX B 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }

				// A_ImpMsAttack; Emulation
				SetDamage(((0+(user_monsterlevel/45))));
				A_MonsterCrisisCheck(); // SkullAttack
				if (user_canusecrisisatk == 1) 
				{
					if (user_monsterlevel >= 45) { A_PlayCrisisAtkSound(); } 
					SetDamage((((0+(user_monsterlevel/45)))*CrisisMultiplier)); 
				}
				A_SkullAttack(12+(user_monsterlevel/random(22,23)));
			}
			IMPX CBAB 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
			}
			IMPX A 0 A_GargDashCheck2();
			Goto Charge+2;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			goto See;
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GGGG 3;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Crash:
			IMPX I 7 A_ImpExplode();
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			IMPX H 5;
			IMPX G 4;
			goto See;
	}
}
class FHereticImp : HereticImpNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class HereticImpLeaderNew : HereticImpNew // replaces HereticImpLeader
{
	default
	{
		Tag "NitroGargoyle";
		Health 80;
		Painchance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 225; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.25;
		Species "Gargoyle";
		-MISSILEMORE;
		+DONTHARMSPECIES;
		AttackSound "himp/leaderattack";
		Translation "141:141=144:144", "145:160=145:153", "248:254=248:251", "66:94=66:80", "95:110=95:103";
	}
	
	states
	{
		Melee:
			Stop;
		Missile:
			IMPX D 0;
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("HereticImpBallNew", "HereticImpBallCrisis", 16, random[ImpMsAttack2](5,12), "himp/leaderattack");
			}
			goto See;
	}
}
class FHereticImpLeader : HereticImpLeaderNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Plague Gargoyle
class PlagueImp : HereticImpLeaderNew
{
	default
	{
		Tag "Plague Gargoyle";
		Health 120;
		DamageFactor "Crush", 0.95;
		Scale 1;
		Painchance 160;
		Painchance "Fist", 240; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 240; // Fist attacks have a +50% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
		Obituary "%o was poisoned by a plague gargoyle";
		HitObituary "%o was ripped up by a plague gargoyle";
		Translation "145:168=225:240", "255:248=0:0";
	}

	States
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](6,14), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			IMPX D 0
			{
				A_CheckIfTargetDead("See");
				user_shotsfired = 0;
				if (health <= user_HPLowRange) { user_theta = (80 - (user_monsterlevel * 0.5)); }
																	else { user_theta = (240 - (user_monsterlevel * 0.1667)); }

				if (random(1,256) <= user_theta)
				{
					user_shotsfiredmax = 1;
					return resolvestate("MissileSingle"); 
				}
				else 
				{ 
					user_shotsfiredmax = randompick(3,4,5,6) + (user_monsterlevel / frandompick(11.25,22.5,33.75,45));
					return resolvestate("MissileMulti"); 
				}
				return resolvestate(null);
			}
		MissileSingle:
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }

				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }

				A_MonsterCrisisCheck(); // Single Projectile
				if (random(1,256) <= 32) { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-0.6,0.6), frandom(-0.06,0.06)); }
														else { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-6.0,6.0), frandom(-0.6,0.6)); }
			}
			goto See;
		MissileMulti:
			IMPX DE 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }

				A_FaceTarget();
			}
			IMPX F 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }

				A_MonsterCrisisCheck(); // Single Projectile
				if (random(1,256) <= 32) { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-0.96,0.96), frandom(-0.096,0.096)); }
														else { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-9.6,9.6), frandom(-0.96,0.96)); }
			}
			IMPX F 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				A_CheckIfTargetDead("See");
				return resolvestate(null);
			}
			Loop;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			goto See;	
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GGGG 3;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Crash:
			IMPX I 0 
			{
				bNOGRAVITY = false;
				A_SpawnItemEx("HereticImpChunk1", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
				A_SpawnItemEx("HereticImpChunk2", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
			}
			IMPX I 7;
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Raise:
			IMPX L 0;
			IMPX L 0 A_RemoveChildren();
			IMPX LKJIHG 6;
			goto See;
	}
}

// Dark/Watcher Gargoyle
class WatcherImp : HereticImpNew 
{
	default
	{
		Tag "Watcher Gargoyle";
		Health 120;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 15;
		scale 1.2;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "%o was burnt by a Watcher Gargoyle.";
		HitObituary "%o was slashed by a Watcher Gargoyle.";
		DamageFactor "Fire", 0.5;
		DamageFactor "Crush", 0.95;
		PainChance 50;
		Painchance "Fire", 25; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 75; // Fist attacks have a +50% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
	}
	
	States
	{
		Spawn:
			WATC A 0 NoDelay;
			WATC ABCB 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			WATC A 0;
			WATC AABBCCBB 3
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			goto See;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC D 0
			{
				user_firevolleys = 0;
				user_firevolleymax = random(2,3);
				if (random(1,16) == 1) { user_firevolleymax *= random(3,4); }
			}
			WATC D 0 BRIGHT A_Jump(85,"Beastball");
		MissileLoop:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("HereticImpBall2", "HereticImpBall2Crisis", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("HereticImpBall2", "HereticImpBall2Crisis", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC ] 0 BRIGHT
			{
				user_firevolleys += 1;
				if (user_firevolleys >= user_firevolleymax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Beastball:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 6 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			WATC F 6 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("BeastBall2", "BeastBall2Crisis", 14, random[BeastAttack](1,8)*3, "beast/attack");
			}
			goto See;
		Pain:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			goto See;
		Pain.Fist:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GG 3;
			goto See;
		Pain.Kick:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GGGG 3;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC G 4 A_ImpDeath();
			WATC H 5;
			Wait;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC S 5 A_ImpXDeath1();
			WATC TU 5;
			WATC V 5 A_Gravity();
			WATC W 5;
			Wait;
		Crash:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC I 7 A_ImpExplode();
			WATC J 7 A_Scream();
			WATC K 7;
			WATC L -1;
			Stop;
		XCrash:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC X 7;
			WATC Y 7;
			WATC Z -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			WATC G 5 A_GenericFreezeDeath();
			WATC G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WATC H 5;
			WATC G 4;
			goto See;
	}
}

// Golems
class MummyNew : AetheriusMonsterZSC
{
	default
	{
		Tag "Golem";
		Health 80;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	states
	{
		Spawn:
			MUMM A 0 NoDelay;
			MUMM AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMM A 0;
			MUMM ABCD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Pain:
			MUMM H 4;
			MUMM H 4 A_DVDSPain();
			Goto See;
		Pain.Fist:
			MUMM H 4;
			MUMM H 4 A_DVDSPain();
			MUMM HH 4;
			Goto See;
		Pain.Kick:
			MUMM H 4;
			MUMM H 4 A_DVDSPain();
			MUMM HHHH 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			MUMM H 5 A_GenericFreezeDeath();
			MUMM H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class FMummy : MummyNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class MummyGhostNew : MummyNew
{
	default
	{
		Tag "Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
	}
	
	states
	{
		Spawn:
			MUMM A 0 NoDelay;
			MUMM AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMM A 0;
			MUMM ABCD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Pain:
			MUMM H 4;
			MUMM H 4 A_DVDSPain();
			Goto See;
		Pain.Fist:
			MUMM H 4;
			MUMM H 4 A_DVDSPain();
			MUMM HH 4;
			Goto See;
		Pain.Kick:
			MUMM H 4;
			MUMM H 4 A_DVDSPain();
			MUMM HHHH 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5;
			MUMM P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			MUMM H 5 A_GenericFreezeDeath();
			MUMM H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class FMummyGhost : MummyGhostNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class MummyLeaderNew : AetheriusMonsterZSC
{
	default
	{
		Tag "NitroGolem";
		Health 100;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		PainChance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 96; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		Obituary "$OB_MUMMYLEADER";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}

	states
	{
		Spawn:
			MUMA A 0 NoDelay;
			MUMA AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMA A 0;
			MUMA ABCD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMM E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			MUMA X 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("MummyFX1", "MummyFX1Crisis", 32, random[MummyAttack2](1,8)*2, "mummy/attack2");
			}
			Goto See;
		Pain:
			MUMA H 4;
			MUMA H 4 A_DVDSPain();
			Goto See;
		Pain.Fist:
			MUMA H 4;
			MUMA H 4 A_DVDSPain();
			MUMA HH 4;
			Goto See;
		Pain.Kick:
			MUMA H 4;
			MUMA H 4 A_DVDSPain();
			MUMA HHHH 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			MUMA H 5 A_GenericFreezeDeath();
			MUMA H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class FMummyLeader : MummyLeaderNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class MummyLeaderGhostNew : MummyLeaderNew
{
	default
	{
		Tag "NitroGolem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
	}
	
	states
	{
		Spawn:
			MUMA A 0 NoDelay;
			MUMA AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMA A 0;
			MUMA ABCD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			MUMA E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMA F 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMA G 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			MUMA X 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("MummyFX1", "MummyFX1Crisis", 32, random[MummyAttack2](1,8)*2, "mummy/attack2");
			}
			Goto See;
		Pain:
			MUMA H 4;
			MUMA H 4 A_DVDSPain();
			Goto See;
		Pain.Fist:
			MUMA H 4;
			MUMA H 4 A_DVDSPain();
			MUMA HH 4;
			Goto See;
		Pain.Kick:
			MUMA H 4;
			MUMA H 4 A_DVDSPain();
			MUMA HHHH 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			MUMA H 5 A_GenericFreezeDeath();
			MUMA H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class FMummyLeaderGhost : MummyLeaderGhostNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Ice Golem
class IceGolem : AetheriusMonsterZSC
{
	int user_HalfMaxHP;
	int user_regenchance;
	int user_regenchanceextra;
	default
	{
		Tag "Ice Golem";
		Health 450;
		Radius 26; // 22;
		Height 75; // 62;
		Mass 900;
		Speed 16;
		Painchance 32;
		Painchance "Fire", 56; // Fire attacks have a +80% chance of stunning an enemy
		Painchance "Ice", 0; // Ice can't stun Ice Golems
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 48; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.925;
		RadiusDamageFactor 0.578125;
		DamageFactor "Explosion", 0.578125;
		DamageFactor "Crush", 0.7;
		DamageFactor "Fire", 1.8;
		DamageFactor "Ice", 0.0;
		Monster;
		+FLOORCLIP;
		+NOBLOOD;
		+DONTHARMSPECIES;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 1.2;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		ActiveSound "mummy/active";
		HitObituary "%o was bludgeoned by an ice golem";
		Species "Golem";
	}
	
	States
	{
		Spawn:
			IGLM A 0 NoDelay;
			IGLM AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			IGLM ABCD 5
			{
				user_HalfMaxHP = user_MaxHP / 2;
				if (health <= user_HPCritRange) { user_regenchance = 32; }
				else if (health <= user_HPLowRange) { user_regenchance = 8; }
				else if (health <= user_HalfMaxHP) { user_regenchance = 4; }
				else if (health <= user_MaxHP) { user_regenchance = 2; }
				if (levelbehavior)
				{
					user_regenchanceextra = user_regenchance / 4;
					user_regenchanceextra = (user_regenchanceextra * user_monsterlevel) / 45;

					user_regenchance += user_regenchanceextra;
					//A_LogInt(user_regenchance);
					//A_LogInt(user_regenchanceextra);
				}

				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				

				if (random(1,256) <= user_regenchance && health < user_MaxHP) { return resolvestate("RegenerateStart");  }
				return resolvestate(null);
			}
			Loop;
		Melee:
			IGLM E 0 A_Jump(128, "Melee2");
			IGLM E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM F 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM G 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Melee2:
			IGLM H 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM I 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM J 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		RegenerateStart:
			IGLM K 10
			{
				user_regencyclemax = 10;
				A_StartSound("misc/freeze",CHAN_WEAPON);
				bCANTSEEK = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				A_GiveInventory("IceGolemArmor",1);
			}
		Regenerate:
			IGLM K 0 
			{ 
				if (health < user_MaxHP) 
				{ 
					A_DVDSHealThing((user_MaxHP/random(18,22)),user_MaxHP);
					//A_Print("23r2");
					user_regencycles += 1; 
				} 
				else 
				{ 
					return resolvestate("RegenerateEnd"); 
				} 
				return resolvestate(null); 
			}
			IGLM KKKKKKKKKK 1 A_SpawnItemEx("IceGolemParticleA", Random(24, 32), 0, 4, 0, 0, (Random(20, 35)*0.1), Random(0, 360), 128);
		RegenerateCheck:
			IGLM K 0
			{
				if (user_regencycles < user_regencyclemax) { return resolvestate("Regenerate"); }
				if (health < user_MaxHP)
				{
					if (random(1,8) == 1) { user_regencycles = 0; return resolvestate("Regenerate"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		RegenerateEnd:
			IGLM K 0
			{
				user_regencycles = 0;
				user_regencyclemax = 0;
				bCANTSEEK = false;
				bNOPAIN = false;
				bDONTTHRUST = false;
				A_SetInventory("IceGolemArmor",0);
			}
			Goto See;
		Pain:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			Goto See;
		Pain.Fist:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			IGLM LL 4;
			Goto See;
		Pain.Kick:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			IGLM LLLL 4;
			Goto See;
		Pain.Fire:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			IGLM L 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IGLM L 12;
			IGLM L 0 A_SetTranslucent(1.0, 0);
			IGLM L 1 A_IceGuyDie();
			Stop;
	}
}
class IceGolemGhost : IceGolem
{
	default
	{
		Tag "Ice Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.32;
		DamageFactor "Eldritch", 0.4;
	}
}

// Frost Golem [ranged Ice Golem]
class FrostGolem : IceGolem
{
	int user_randvar1;
	default
	{
		Tag "Frost Golem";
		Health 540;
		Radius 26; // 22;
		Height 75; // 62;
		Mass 900;
		Speed 16;
		Painchance 32;
		Painchance "Fire", 44; // Fire attacks have a +80% chance of stunning an enemy
		Painchance "Ice", 0; // Ice can't stun Ice Golems
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 48; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.85;
		DamageFactor "Explosive", 0.53125;
		RadiusDamageFactor 0.53125;
		DamageFactor "Crush", 0.7;
		DamageFactor "Fire", 1.4;
		DamageFactor "Ice", 0.0;
		Monster;
		+FLOORCLIP;
		+NOBLOOD;
		+DONTHARMSPECIES;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 1.2;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		ActiveSound "mummy/active";
		Obituary "%o was iced over by an frost golem";
		HitObituary "%o was bludgeoned by an frost golem";
		Species "Golem";
	}
	
	States
	{
		Spawn:
			IGLM A 0 NoDelay;
			IGLM AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			IGLM ABCD 5
			{
				user_HalfMaxHP = user_MaxHP / 2;
				if (health <= user_HPCritRange) { user_regenchance = 40; }
				else if (health <= user_HPLowRange) { user_regenchance = 10; }
				else if (health <= user_HalfMaxHP) { user_regenchance = 5; }
				else if (health <= user_MaxHP) { user_regenchance = random(2,3); }
				if (levelbehavior)
				{
					user_regenchanceextra = user_regenchance * 6 / 20;
					user_regenchanceextra = (user_regenchanceextra * user_monsterlevel) / 36;

					user_regenchance += user_regenchanceextra;
					//A_LogInt(user_regenchance);
					//A_LogInt(user_regenchanceextra);
				}

				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				

				if (random(1,256) <= user_regenchance && health < user_MaxHP) { return resolvestate("RegenerateStart");  }
				return resolvestate(null);
			}
			Loop;
		Melee:
			TNT1 A 0;
			IGLM E 0 A_Jump(128, "Melee2");
			IGLM E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM F 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM G 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Melee2:
			IGLM H 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM I 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM J 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			IGLM K 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			IGLM K 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				user_randvar1 = random(3,9) * 2;
				A_StartSound("IceGuyAttack");
				if (levelbehavior && user_monsterlevel > 240) { A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 48, ((user_randvar1*4)/2), 0, 1); }
				A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 48, user_randvar1, 0, 1);
				if (levelbehavior && user_monsterlevel > 120) { A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 48, 0, 0, 1); }
				A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 48, -user_randvar1, 0, 1);
				if (levelbehavior && user_monsterlevel > 240) { A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 48, ((-user_randvar1*4)/2), 0, 1); }
			}
			IGLM K 4
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		RegenerateStart:
			IGLM K 10
			{
				user_regencyclemax = 10;
				A_StartSound("misc/freeze",CHAN_WEAPON);
				bCANTSEEK = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				A_GiveInventory("IceGolemArmor",1);
			}
		Regenerate:
			IGLM K 0 
			{ 
				if (health < user_MaxHP) 
				{ 
					A_DVDSHealThing((user_MaxHP/random(18,22)),user_MaxHP);
					//A_Print("23r2");
					user_regencycles += 1; 
				} 
				else 
				{ 
					return resolvestate("RegenerateEnd"); 
				} 
				return resolvestate(null); 
			}
			IGLM KKKKKKKKKK 1 A_SpawnItemEx("IceGolemParticleA", Random(24, 32), 0, 4, 0, 0, (Random(20, 35)*0.1), Random(0, 360), 128);
		RegenerateCheck:
			IGLM K 0
			{
				if (user_regencycles < user_regencyclemax) { return resolvestate("Regenerate"); }
				if (health < user_MaxHP)
				{
					if (random(1,8) == 1) { user_regencycles = 0; return resolvestate("Regenerate"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		RegenerateEnd:
			IGLM K 0
			{
				user_regencycles = 0;
				user_regencyclemax = 0;
				bCANTSEEK = false;
				bNOPAIN = false;
				bDONTTHRUST = false;
				A_SetInventory("IceGolemArmor",0);
			}
			Goto See;
		Pain:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			Goto See;
		Pain.Fist:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			IGLM LL 4;
			Goto See;
		Pain.Kick:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			IGLM LLLL 4;
			Goto See;
		Pain.Fire:
			IGLM L 4;
			IGLM L 4 A_DVDSPain();
			IGLM L 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IGLM L 12;
			IGLM L 0 A_SetTranslucent(1.0, 0);
			IGLM L 1 A_IceGuyDie();
			Stop;
	}
}
class FrostGolemGhost : FrostGolem
{
	default
	{
		Tag "Frost Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.32;
		DamageFactor "Eldritch", 0.4;
	}
}

class IceGolemArmor : PowerProtection
{
	default
	{
		damageFactor "normal", 0.01;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class IceGolemParticleA : AetheriusBaseZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+Missile;
		+NoBlockMap;
		+NoGravity;
		+DontSplash;
		+NoClip;
		RenderStyle "Add";
		Scale 0.0275;
	}
	
	States
	{
		Spawn:
			IGLP A 0 A_SpawnItemEx("IceGolemParticleTrail", -(Vel.X*1.2), -(Vel.Y*1.2), (Vel.Z*-1.2), (Vel.X*0.8), (Vel.Y*0.8), (Vel.Z*0.8), -Angle, 138);
			IGLP A 1 A_FadeOut(0.065);
			Loop;
	}
}

class IceGolemParticleTrail : IceGolemParticleA
{
	States
	{
		Spawn:
			IGLP A 1 A_FadeOut(0.075);
			Loop;
	}
}

// Undead Warriors
class KnightNew : AetheriusMonsterZSC
{
	default
	{
		Tag "Undead Warrior";
		Health 200;
		Radius 24;
		Height 78;
		Mass 150;
		Speed 12;
		MeleeRange 68;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 150; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.9;
		MeleeRange 68;
		Monster;
		+FLOORCLIP;
		SeeSound "hknight/sight";
		AttackSound "hknight/attack";
		PainSound "hknight/pain";
		DeathSound "hknight/death";
		ActiveSound "hknight/active";
		Obituary "$OB_BONEKNIGHT";
		HitObituary "$OB_BONEKNIGHTHIT";
		DropItem "CrossbowAmmo", 84, 5;
		DropItem "CrossbowHefty", 8, 25;
	}
	
	States
	{
		Spawn:
			KNIG A 0 NoDelay;
			KNIG AB 10 A_Look();
			goto Spawn+1;
		See:
			KNIG A 0;
			KNIG ABCD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
		Missile:
			KNIG E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				if (bSHADOW || random(1,256) <= 40)
				{
					A_CrisisComboAttack("RedAxeNew", "RedAxeCrisis", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CrisisComboAttack("KnightAxeNew", "KnightAxeCrisis", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
				// A_KnightAttack();
			}
			KNIG E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attacks
				if (bSHADOW || random(1,256) < 40)
				{
					A_CrisisComboAttack("RedAxeNew", "RedAxeCrisis", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CrisisComboAttack("KnightAxeNew", "KnightAxeCrisis", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
				//A_KnightAttack();
			}
			Goto See;
		Pain:
			KNIG H 3;
			KNIG H 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			KNIG H 3;
			KNIG H 3 A_DVDSPain();
			KNIG HH 3;
			Goto See;
		Pain.Kick:
			KNIG H 3;
			KNIG H 3 A_DVDSPain();
			KNIG HHHH 3;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			KNIG I 6;
			KNIG J 6 A_Scream();
			KNIG K 6;
			KNIG L 6 A_NoBlocking();
			KNIG MN 6;
			KNIG O -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			KNIG H 5 A_GenericFreezeDeath();
			KNIG H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			KNIG N 6;
			KNIG MLKJI 6;
			Goto See;
	}
}
class FKnight : KnightNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}
class KnightGhostNew : KnightNew
{
	default
	{
		Tag "Undead Warrior (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
	}
}

class FKnightGhost : KnightGhostNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Death Knight
class DeathKnight : AetheriusMonsterZSC 
{ 
	default
	{
		Tag "Death Knight";
		Health 1100;
		Radius 24;
		Height 72;
		Mass 700;
		Speed 10;
		MeleeDamage 10;
		MeleeRange 80;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Holy", 35; // Holy attacks have a +75% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Holy", 1.75;
		DamageFactor "Crush", 0.9;
		MONSTER;
		+FLOORCLIP;
		+NOTARGET;
		+NORADIUSDMG;
		+MISSILEMORE;
		+BOSS;
		+DEFLECT;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		Obituary "%o got thought %g could kill a Death Knight.";
		HitObituary "A Death Knight hacked %o into pieces.";
		MeleeSound "monster/dknhit";
		SeeSound "monster/dknsit";
		PainSound "monster/dknpai";
		DeathSound "monster/dkndth";
		ActiveSound "monster/dknact";
		Species "UndeadWarrior";
	}
	
	States 
	{
		Spawn: 
			DKNT A 0 NoDelay;
			DKNT AB 10 A_Look();
			goto Spawn+1;
		See:
			DKNT A 0;
			DKNT A 0 A_Jump(51,"SeeShielded");
			DKNT AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DeathKnightShieldOff();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		SeeShielded:
			DKNT P 0;
			DKNT PPQQRRSS 3 // A_SetReflectiveInvulnerable
			{
				A_DeathKnightShieldOn();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			DKNT S 0
			{
				if (random(1,100) >= 20) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Melee:
			TNT1 A 0;
			DKNT E 0 // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT E 6
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			DKNT F 6 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("monster/dknswg");
			}
			DKNT G 6
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(10*random(1,8), "monster/dknhit");
			}
			Goto See;
		Missile:
			TNT1 A 0;
			DKNT E 0 A_Jump(88,"Missile1");
			DKNT E 0 A_Jump(88,"Missile2");
			DKNT E 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT E 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			DKNT F 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("monster/kntswg");
			}
			DKNT G 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,-3,0);
				A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,-1,0);
				A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,1,0);
				A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,3,0);
				if (levelbehavior && user_monsterlevel > 60)
				{
					A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,-5,0);
					A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,5,0);
				}
				if (levelbehavior && user_monsterlevel > 120)
				{
					A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,-7,0);
					A_CrisisSpawnProjectile("DKDart","DKDartCrisis",32,0,7,0);
				}
			}
			DKNT A 0 A_Jump(64,"Missile2");
			Goto See;
		Missile1:
			DKNT T 1 Bright // A_SetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
	
				user_defendtimer += 1;
	
				if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = 4; }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("Missile1Phase2"); }
				return resolvestate(null);
			}
			Loop;
		Missile1Phase2:
			DKNT U 1 Bright
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
			}
		Missile1Phase3:
			DKNT U 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();

				user_defendtimer += 1;
				if (user_defendtimer == 2) 
				{
					A_MonsterCrisisCheck(); // Multiple Projectiles
					A_CrisisSpawnProjectile("FHeadShot","FHeadShotCrisis",44,-4,-12,0);
					A_CrisisSpawnProjectile("FHeadShot","FHeadShotCrisis",44,-4,12,0);
				}
				
				if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = 3; }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("Missile1End"); }
				return resolvestate(null);
			}
			Loop;
		Missile1End:
			DKNT U 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT U 0 A_Jump(64,"Missile2");
			Goto See;
		Missile2:
			DKNT T 0 Bright // A_SetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
			}
		Missile2Phase1: // 6 times
			DKNT T 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();

				user_defendtimer += 1;

				if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = 2; }
				else { user_defendtimermax = 3; }
				if (user_defendtimer >= user_defendtimermax) 
				{
					user_defendtimer = 0; 
					return resolvestate("Missile2Phase2"); 
				}
				return resolvestate(null);
			}
			Loop;
		Missile2Phase2: // 6 times
			DKNT U 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
	
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_MonsterCrisisCheck(); // Single Projectile
					A_CrisisSpawnProjectile("DKbolt","DKboltCrisis",44,-4,0,0); 
				}

				if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = 2; }
				else { user_defendtimermax = 3; }
				if (user_defendtimer >= user_defendtimermax) 
				{
					user_defendtimer = 0; 
					user_defendcycles += 1;
					
					if (user_defendcycles >= 6) { return resolvestate("Missile2End"); } else { return resolvestate("Missile2Phase1"); }
					return resolvestate(null); 
				}
				return resolvestate(null);
			}
			Loop;
		Missile2End:
			DKNT U 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Pain:
			DKNT H 2;
			DKNT H 2 A_DVDSPain();
			goto PainShield;
		Pain.Fist:
			DKNT H 2;
			DKNT H 2 A_DVDSPain();
			DKNT HH 2;
			goto PainShield;
		Pain.Kick:
			DKNT H 2;
			DKNT H 2 A_DVDSPain();
			DKNT HHHH 2;
			goto PainShield;

		PainShield:
			DKNT T 1 // A_SetReflectiveInvulnerable
			{
				A_DeathKnightShieldOn();
				user_defendtimer += 1;

				if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(17,18); }
				else if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = random(16,17); }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,4) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_DeathKnightShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 7) { return resolvestate("PainShieldEnd"); }
				return resolvestate(null);
			}
			Loop;
		PainShieldEnd:
			DKNT T 0 // A_UnSetReflectiveInvulnerable()
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();

				if (random(1,16) == 1) { return resolvestate("SeeShielded"); }
				return resolvestate(null);
			}
			DKNT H 1
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DKNT I 0 Bright A_SpawnProjectile("DKSword",44,32,-90,0);
			DKNT I 8 Bright 
			{
				if (random(1,4) == 1) { A_SpawnProjectile("EvilWarriorShield",44,-32,90,0); }
				else { A_SpawnProjectile("DKShield",44,-32,90,0); }
			}
			DKNT J 8 Bright A_Scream(); 
			DKNT K 8 Bright;
			DKNT L 8 Bright A_NoBlocking();
			DKNT M 8 Bright;
			DKNT N 8 Bright;
			DKNT O -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DKNT H 5 A_GenericFreezeDeath();
			DKNT H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DKNT NMLKJI 8 Bright;
			Goto See;
	}
}

class DeathKnightGhost : DeathKnight
{
	default
	{
		Tag "Death Knight (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		+DONTHARMSPECIES;
		Species "UndeadWarrior";
	}
}

// Disciples
class WizardNew : AetheriusMonsterZSC
{
	default
	{
		Tag "Disciple of D'Sparil";
		Health 180;
		Radius 16;
		Height 68;
		Mass 100;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 96; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.9;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		SeeSound "wizard/sight";
		AttackSound "wizard/attack";
		PainSound "wizard/pain";
		DeathSound "wizard/death";
		ActiveSound "wizard/active";
		Obituary "$OB_WIZARD";
		HitObituary "$OB_WIZARDHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiTomeOfPower", 4, 1;
		Obituary "%o was cursed by a Disciple of D'Sparil.";
		HitObituary "%o was scratched by a Disciple of D'Sparil.";
	}

	States
	{
		Spawn:
			WZRD A 0 NoDelay;
			WZRD AB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 120) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 120) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 120) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 120) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			WZRD N 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 135) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD O 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 135) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD P 12 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 135) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 112) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 67) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 23) { A_SetTics(11); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,5)*8, "wizard/melee", "none", "Melee", true);
			}
			Goto See;
		Missile:
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > randompick(133,133,134)) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > randompick(66,67,67)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD D 12
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 135) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 112) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 67) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 23) { A_SetTics(11); }

				A_MonsterCrisisCheck(); // Multiple Projectiles / WizAtk3
				A_WizAtk3("WizardFX1New","WizardFX1Crisis", 4*random(1,8));
			}
			Goto See;
		Pain:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			Goto See;
		Pain.Fist:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EE 3;
			Goto See;
		Pain.Kick:
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EEEE 3;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WZRD F 6 A_GhostOff();
			WZRD G 6 A_Scream();
			WZRD HI 6;
			WZRD J 6 A_NoBlocking();
			WZRD KL 6;
			WZRD M -1 A_SetFloorClip();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			WZRD Q 5 A_GenericFreezeDeath();
			WZRD Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WZRD M 6;
			WZRD LKJIHGF 6;
			Goto See;
	}
}
class FWizard : WizardNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class Banshee : AetheriusMonsterZSC
{
	default
	{
		Tag "Abyssal Banshee";
		Health 720;
		Radius 12; // 15
		Height 48; // 60
		Mass 515;
		Speed 15;
		Scale 0.8;
		PainChance 100;
		Painchance "Fire", 50; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 150; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		DamageFactor "Crush", 0.6;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		SeeSound "Banshee/Sight";
		PainSound "Banshee/Pain";
		DeathSound "Banshee/Death";
		ActiveSound "Banshee/Active";
		MeleeSound "Banshee/Raise";
		MONSTER;
		Obituary "%o Heard The Banshee's Wail";
		DropItem "BlasterAmmo", 42, 10;
		DropItem "BlasterHefty", 4, 50;
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "BlasterAmmo", 128, 10;
		DropItem "BlasterHefty", 13, 50;
		DropItem "ArtiTomeOfPower", 8, 1;    
	}
	
	States
	{
		Spawn:
			BANS A 0 NoDelay;
			BANS A 1 A_FloatLook(12);
			goto Spawn+1;
		See:
			TNT1 A 0 A_UnSetInvulnerable();
			BANS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }

				A_TakeInventory("BansheeMissile5Token",24);
				A_TakeInventory("BansheePainToken",2);

				A_DVDSChase(null,"Missile", CHF_RESURRECT,1,3,1,1);
			}
			BANS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }

				A_DVDSChase("Melee","Missile", CHF_RESURRECT,1,3,1,1);
				A_SpawnItem("BansheeTrail",0,0);
			}
			BANS A 0 A_Jump(2,"BansheeTeleport");
			Loop;
		Missile:
			BANS A 0 A_Jump(2,"Missile3");
			BANS A 0 A_Jump(50,"Missile4");
			BANS A 0 A_Jump(256,"Missile2", "Melee", "Missile1", "Missile5", "Missile6");
			Goto See;
		Missile1:
			BANS B 0 A_FaceTarget();
			BANS BCD 2	
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BANS B 0 
			{
				if (random(1,256) <= 176) 
				{
					if (random(1,256) <= A_GetEvolveChance()) 
					{
						if (random(1,384) <= A_GetEvolveChance()) { A_PainAttack("ForgottenOne"); }
						else { A_PainAttack("DSLostSoul2"); }
					}
					else 
					{
						A_PainAttack("DSLostSoul"); 
					}
				}
				else
				{
					if (random(1,256) <= A_GetEvolveChance()) 
					{
						if (random(1,384) <= A_GetEvolveChance()) { A_DualPainAttack("ForgottenOne"); }
						else { A_DualPainAttack("DSLostSoul2"); }
					}
					else 
					{
						A_DualPainAttack("DSLostSoul"); 
					}
				}
			}
			Goto See;
		Missile2:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BANS D 0 
			{
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BansheeFire", "BansheeFireCrisis", 50, 0, -8);
				A_CrisisSpawnProjectile("BansheeFire", "BansheeFireCrisis", 50, 0,  0);
				A_CrisisSpawnProjectile("BansheeFire", "BansheeFireCrisis", 50, 0,  8);
			}
			Goto See;
		Missile3:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BANS B 0 A_Jump(256,"BansheeTeleport");
			Goto See;
		Missile4:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BANS D 0 
			{
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BansheeFire3", "BansheeFire3Crisis");
			}
			Goto See;
		Missile5:  
			BANS B 0 A_FaceTarget();
		Missile5Loop:
			BANS BCD 1
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
			}
			BANS D 0 
			{
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BansheeFire4", "BansheeFire4Crisis");

				A_GiveInventory("BansheeMissile5Token",1);
				if (CountInv("BansheeMissile5Token") >= 30) { return resolvestate("See"); }
				return resolvestate(null);
			}
			BANS D 1 A_MonsterRefire(40,"See");
			Loop;
		Missile6:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BANS D 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0,-160);
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0,-128);
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0,-96 );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0,-64 );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0,-32 );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0, 0  );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0, 32 );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0, 64 );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0, 96 );
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0, 128);
				A_CrisisSpawnProjectile("BansheeFire5", "BansheeFire5Crisis", 50, 0, 160);
			}
			Goto See;
		Melee:
			BANS B 0 A_FaceTarget();
			BANS BCD 1;
			BANS D 4
			{
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0,-160);
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0,-128);
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0,-96 );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0,-64 );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0,-32 );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0, 0  );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0, 32 );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0, 64 );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0, 96 );
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0, 128);
				A_CrisisSpawnProjectile("BansheeFire2", "BansheeFire2Crisis", 50, 0, 160);
			}
			Goto See;
		BansheeTeleport:
			BANS A 0 A_SetInvulnerable();
			BANS A 1 A_SetTranslucent(0.90);
			BANS A 1 A_SetTranslucent(0.80);
			BANS A 1 A_SetTranslucent(0.70);
			BANS A 1 A_SetTranslucent(0.60);
			BANS A 1 A_SetTranslucent(0.50);
			BANS A 1 A_SetTranslucent(0.40);
			BANS A 1 A_SetTranslucent(0.30);
			BANS A 1 A_SetTranslucent(0.20);
			BANS A 1 A_SetTranslucent(0.10);
			BANS A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			BANS A 1 A_SetTranslucent(0.10);
			BANS A 1 A_SetTranslucent(0.20);
			BANS A 1 A_SetTranslucent(0.30);
			BANS A 1 A_SetTranslucent(0.40);
			BANS A 1 A_SetTranslucent(0.50);
			BANS A 1 A_SetTranslucent(0.60);
			BANS A 1 A_SetTranslucent(0.70);
			BANS A 1 A_SetTranslucent(0.80);
			BANS A 1 A_SetTranslucent(0.90);
			BANS A 1 A_SetTranslucent(1.0);
			BANS A 0 A_UnSetInvulnerable();
			Goto See;    

		Heal:
			BANS B 8 BRIGHT;
			BANS C 8 BRIGHT
			{
				A_BanshHealProj();
			}
			BANS D 8 BRIGHT;
			Goto See;

		Pain:
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Pain.Fist:
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS A 5;
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Pain.Kick:
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS AA 5;
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BANS G 2 A_Scream();
			BANS H 2 A_NoBlocking();
			BANS I 2 A_SpawnProjectile("SpawnFire", 0, 0, 0);
			BANS I 2 A_SpawnProjectile("SpawnFire", 0, 0, 0);
			BANS IJKLMNOPQR 2;
			BANS R -1;
			Stop;
	}
}
class FBanshee : Banshee
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class BansheePainToken : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeFire3Token : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeMissile5Token : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}

class IronlichNew : AetheriusMonsterZSC
{
	default
	{
		Tag "Iron Lich";
		Health 700;
		Radius 40;
		Height 72;
		Mass 325;
		Speed 6;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 48; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.5;
		Monster;
		+NOBLOOD;
		+DONTMORPH;
		+DONTSQUASH;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "ironlich/attack";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "$OB_IRONLICH";
		HitObituary "$OB_IRONLICHHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 10 A_Look();
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			LICH A 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			LICH B 20 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }

				A_LichAttack(5 + (user_monsterlevel / 30), 1 + (user_monsterlevel / 45), 6 * random(1,8), "HeadFX1New", "HeadFX1Crisis", "HeadFX3New", "HeadFX3Crisis", "WhirlwindNew", "WhirlwindCrisis", 1);
			}
			goto See;
		Pain:
			LICH A 4;
			LICH A 4 A_DVDSPain();
			goto See;
		Pain.Fist:
			LICH A 4;
			LICH A 4 A_DVDSPain();
			LICH AA 4;
			goto See;
		Pain.Kick:
			LICH A 4;
			LICH A 4 A_DVDSPain();
			LICH AAAA 4;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			LICH C 7;
			LICH D 7 A_Scream();
			LICH EF 7;
			LICH G 7 A_NoBlocking();
			LICH H 7;
			LICH I -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}
class FIronlich : IronlichNew
{
	default
	{
		-COUNTKILL; 
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Ice Lich
class IceLich : AetheriusMonsterZSC
{
	default
	{
		Tag "Ice Lich";
		health 700;
		painchance 16;
		Painchance "Ice", 0; // Ice can't stun Ice Liches
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 24; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Ice", 0;
		DamageFactor "Fire", 2;
		DamageFactor "Crush", 0.5;
		speed 6;
		radius 40;
		height 72;
		mass 500;
		MONSTER;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+MISSILEMORE;
		+DONTBLAST;
		+DONTMORPH;
		+DONTSQUASH;
		+NOICEDEATH;
		+DONTSPLASH;
		+BOSSDEATH;
		seesound "ironlich/sight";
		attacksound "";
		painsound "ironlich/pain";
		deathsound "freeze/shatter";
		activesound "ironlich/active";
		obituary "%o was frozen by an Ice Lich";
	}

	states
	{
		Spawn:
			ILCH A 0 NoDelay;
			ILCH A 10 A_Look();
			goto Spawn+1;
		See:
			ILCH A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				A_SpawnItemEx("IceGuyWisp1", random(-20,20), random(-20,20), random(50,70), 0, 0, 0, 32, 128);
			}
			ILCH A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				A_SpawnItemEx("IceGuyWisp1", random(-20,20), random(-20,20), random(50,70), 0, 0, 0, 32, 128);
			}
			ILCH A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			ILCH B 0 bright A_JumpIfCloser(300, "Breath");
			ILCH B 20 bright 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }
				A_FaceTarget();
				A_StartSound("IceGuyAttack", CHAN_AUTO);

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 44, 10, 0, 1);
				A_CrisisSpawnProjectile("IceGuyFX3New", "IceGuyFX3Crisis", 44, -10, 0, 1);
			}
			goto See;
		Breath:
			ILCH B 0 bright 
			{
				user_shotsfired = 0;
				user_shotsfiredmax = 5 + (user_monsterlevel/45);
			}
		BreathLoop: // 5 times
			ILCH B 0 bright 
			{
				A_StartSound("FrostBreath", CHAN_AUTO);
				A_FaceTarget();
			}
			ILCH BBB 2 bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("IceBreath", "IceBreathCrisis", 20, 0, frandom(-10.0,10.0), CMF_CHECKTARGETDEAD);
			}
			ILCH B 0 
			{
				A_FaceTarget();
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			ILCH A 0 A_DVDSPain();
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ILCH A 3 A_Scream();
			ILCH A 1 A_IceGuyDie();
			Stop;
	}
}

// Gold Lich
class Goldlich : IronlichNew
{
	default
	{
		Tag "Gold Lich";
		Mass 2000;
		Speed 10;
		Health 1400;
		Painchance 8;
		Painchance "Fist", 12; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 20; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 12; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.5;
		SeeSound "goldlich/sight";
		PainSound "goldlich/pain";
		DeathSound "goldlich/death";
		ActiveSound "goldlich/active";
		Translation "0:17=112:121", "18:35=137:144", "36:42=116:121", "43:51=137:144", "52:58=114:121", "59:65=137:144";
		Obituary "%o was annihilated by the goldlich's power.";
		Species "GoldLich";
		DropItem "BlasterAmmo", 84, 50;
		DropItem "BlasterAmmo", 8, 50;
		DropItem "BlasterHefty", 84, 50;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 1 A_Look();
			LICH A 3 A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }

				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			LICH A 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_FaceTarget();
			}
			LICH B 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);

				A_LichAttack(5 + (user_monsterlevel / 20), 1 + (user_monsterlevel / 30), 8*random(1,8), "HeadFX1New", "HeadFX1Crisis", "HeadFX3New", "HeadFX3Crisis", "WhirlwindNew", "WhirlwindCrisis", 1);
			}
			LICH BBB 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_FaceTarget();
			}
			goto See;
		Missile:
			LICH A 1 A_FaceTarget();
			LICH A 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 0
			{
				A_FaceTarget();
				if (random(1,256) <= 85 && GetClassName() == "Goldlich" && user_canusecrisisatk == 0) { return resolvestate("Missile2"); }
				if (random(1,256) <= 128) { return resolvestate("Missile3"); }
				if (random(1,256) <= 255) { return resolvestate("Missile4"); }
				return resolvestate(null);
			}
			goto See;
		Missile2:
			LICH BBBBBBBB 1 A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			TNT1 AAAAAAAAAAAAAAAA 0 A_DVDSWander(0,1,3,1,1);
			TNT1 A 0 
			{
				A_SpawnItemEx("TeleportFog");
				A_UnsetSolid();
				A_SpawnItemEx("FakeGoldlich", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSWander(0,1,3,1,1);
			TNT1 A 4 
			{
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_SetSolid();
			}
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			goto See;
		Missile3:
			LICH B 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_StartSound("goldlich/attack2");
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				for (user_barragecounter = 0; user_barragecounter < 12; user_barragecounter++)
				{
					A_CrisisSpawnProjectile("GoldLichBounce","GoldLichBounceCrisis",32,0,user_barragecounter*30);
				}
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			goto See;
		Missile4:
			LICH B 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_StartSound("goldlich/attack1");

				user_shotsfired = 0;
				user_shotsfiredmax = 4 + (user_monsterlevel/45);
				if (random (1,2) == 1)
				{
					A_MonsterCrisisCheck(); // Single Projectile
					A_CrisisSpawnProjectile("GoldLichFire","GoldLichFireCrisis");
				}
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
		Missile4Loop: // 4 times
			LICH B 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("GoldLichFire","GoldLichFireCrisis");
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				user_shotsfired += 1;
			}
			LICH B 1 
			{
				A_FaceTarget();
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("Missile4End"); }
				return resolvestate(null);
			}
			Loop;
		Missile4End:
			LICH B 0 
			{
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("GoldLichFire","GoldLichFireCrisis");
			}
			goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			LICH CC 4 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH D 1 A_Scream();
			LICH D 3 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH D 4 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH EE 4 A_SpawnItemEx("GoldLichGlitter", random(-40,40), random(-40,40), random(0,112),0,0,0, 0,0, 0);
			LICH FF 4 A_SpawnItemEx("GoldLichGlitter", random(-44,44), random(-44,44), random(0,96),0,0,0, 0,0, 0);
			LICH G 0 A_NoBlocking();
			LICH G 4 A_SpawnItemEx("GoldLichGlitter", random(-52,52), random(-52,52), random(0,80),0,0,0, 0,0, 0);
			LICH G 4 A_SpawnItemEx("GoldLichGlitter", random(-52,52), random(-52,52), random(0,80),0,0,0, 0,0, 0);
			LICH HH 4 A_SpawnItemEx("GoldLichGlitter", random(-56,56), random(-56,56), random(0,64),0,0,0, 0,0, 0);
			LICH I 4 A_SpawnItemEx("GoldLichGlitter", random(-64,64), random(-64,64), random(0,48),0,0,0, 0,0, 0);
			LICH I -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}

class GoldLichMiniExplodes : AetheriusBaseZSC
{
	default
	{
		+DONTSPLASH;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			FXA1 DEF 3 BRIGHT;
			Stop;
	}
}
class GoldLichGlitter : AetheriusBaseZSC
{
	default
	{
		+NOGRAVITY;
	}
	States
	{
		Spawn:
			GGLT ABCDE 4 BRIGHT;
			Stop;
	}
}

class FakeGoldLich : GoldLich
{
	default
	{
		Tag "Gold Lich";
		DropItem "BlasterHefty", 255, 50;
		Mass 250;
		Health 175;
		Species "GoldLich";
	}
}

// Blood Lich
class BloodLich : AetheriusMonsterZSC
{
	default
	{
		Tag "Blood Lich";
		Health 2100;
		Radius 40;
		Height 72;
		Mass 2100;
		Speed 10;
		PainChance 16;
		Painchance "Fire", 8; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 24; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		DamageFactor "Crush", 0.3;
		MONSTER;
		+NOGRAVITY;
		+NOTARGET;
		+NOFEAR;
		+SPAWNCEILING;
		+FLOAT;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+DONTBLAST;
		+DONTMORPH;
		+DONTRIP;
		+DONTSPLASH;
		+BOSS;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "%o was reduced to a pile of ash by a Blood Lich.";
		DropItem "BlasterAmmo", 21, 50;
		DropItem "BlasterAmmo", 2, 50;
		DropItem "BlasterAmmo", 84, 50;
		DropItem "BlasterAmmo", 8, 50;
		DropItem "BlasterHefty", 21, 50;
		DropItem "BlasterHefty", 2, 50;
		DropItem "BlasterHefty", 84, 50;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
		DropItem "ArtiEgg", 51, 0;
	}

	States
	{
		Spawn:
			BLCH A 0 NoDelay;
			BLCH A 10 A_Look();
			goto Spawn+1;
		See:
			BLCH A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }

				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BLCH B 0 Bright A_JumpIfCloser(300, "Breath");
			BLCH B 0 Bright A_Jump(96,"Curse");
			BLCH B 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("MageStaffFire", CHAN_AUTO);

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BloodLichFireball", "BloodLichFireballCrisis", 54, 10, -2, 1);
				A_CrisisSpawnProjectile("BloodLichFireball", "BloodLichFireballCrisis", 54, -10, 2, 1);
			}
			goto See;
		Breath:
			BLCH B 0 bright 
			{
				user_shotsfired = 0;
				user_shotsfiredmax = 5 + (user_monsterlevel/45);
			}
		BreathLoop: // 5
			BLCH B 0 Bright
			{
				A_StartSound("FlameBreath", CHAN_AUTO);
				A_FaceTarget();
			}
			BLCH BBB 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("FireBreath", "FireBreathCrisis", 20, 0, frandom(-3.0,3.0), CMF_CHECKTARGETDEAD);
			}
			BLCH B 0 
			{
				A_FaceTarget();
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Curse:
			BLCH B 0 Bright A_JumpIfCloser(300, "Breath");
			BLCH B 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("CurseSpell", "CurseSpellCrisis", 20, 0, 0, 1);
			}
			goto See;
		Pain:
			BLCH A 0 A_DVDSPain();
			goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BLCH C 7 
			{
				if (random(1,256) <= 160) { A_PainDie("HereticImpLeader"); }
			}
			BLCH D 7 A_Scream();
			BLCH EF 7;
			BLCH G 7 A_NoBlocking();
			BLCH H 7;
			BLCH I -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BLCH A 5 A_GenericFreezeDeath();
			BLCH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BLCH H 7;
			BLCH GFEDC 7;
			goto See;
	}
}