// Pig
class PigNew : AetheriusMorphedMonster replaces Pig
{
	default
	{
		Tag "Pig";
		Health 25;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		DamageFactor "Crush", 4.0;
		Speed 10;
		Radius 12;
		Height 22;
		Mass 60;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		SeeSound "PigActive1";
		PainSound "PigPain";
		DeathSound "PigDeath";
		ActiveSound "PigActive1";
	}
	
	States
	{
		Spawn:
			PIGY B 0 NoDelay;
			PIGY B 10 A_Look();
			goto Spawn+1;
		See:
			PIGY A 0;
			PIGY ABCD 3
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			PIGY A 5 A_FaceTarget();
			PIGY A 10 
			{
				A_FaceTarget();;
				
				A_CrisisMeleeAttack(random[PigAttack](2, 3), "PigAttack");
			}
			Goto See;
		Pain:
			PIGY D 4 A_PigPain();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			PIGY E 4 A_Scream();
			PIGY F 3 A_NoBlocking();
			PIGY G 4 A_QueueCorpse();
			PIGY H 3;
			PIGY IJK 4; 
			PIGY L -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			PIGY M 5 A_FreezeDeath();
			PIGY M 1 A_FreezeDeathChunks();
			Wait;
	}
}
class FPig : PigNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class EttinNew : AetheriusMonsterZSC // replaces Ettin
{
	default
	{
		Tag "Ettin";
		Health 175;
		Radius 25;
		Height 68;
		Mass 175;
		Speed 13;
		Damage 3;
		Painchance 60;
		Painchance "Fist", 90; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 150; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 90; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0;
		Monster;
		MeleeRange 68;
		+FLOORCLIP;
		+TELESTOMP;
		SeeSound "EttinSight";
		AttackSound "EttinAttack";
		PainSound "EttinPain";
		DeathSound "EttinDeath";
		ActiveSound "EttinActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_ETTIN";
	}
	
	States
	{
		Spawn:
			ETTN A 0 NoDelay;
			ETTN AA 10 A_Look();
			goto Spawn+1;
		See:
			ETTN A 0;
			ETTN ABCD 5
			{
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			ETTN EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			ETTN G 8 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[EttinAttack](1,8)*2);
			}
			Goto See;
		Pain:
			ETTN H 7 A_DVDSPain();
			Goto See;
		Pain.Fist:
			ETTN H 7 A_DVDSPain();
			ETTN H 7;
			Goto See;
		Pain.Kick:
			ETTN H 7 A_DVDSPain();
			ETTN HH 7;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ETTN IJ 4;
			ETTN K 4 A_Scream();
			ETTN L 4 A_NoBlocking();
			ETTN M 4 A_QueueCorpse();
			ETTN NOP 4;
			ETTN Q -1;
			Stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ETTB A 4;
			ETTB B 4 A_NoBlocking();
			ETTB C 4 A_SpawnItemEx("EttinMace", 0, 0, 8.5, random[DropMace](-128, 127)*0.03125, random[DropMace](-128, 127)*0.03125, 10+random[DropMace](0, 255)*0.015625, 0, SXF_ABSOLUTEVELOCITY);
			ETTB D 4 A_Scream();
			ETTB E 4 A_QueueCorpse();
			ETTB FGHIJK 4;
			TNT1 A 0;
			ETTB L -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ETTN R 5 A_FreezeDeath();
			ETTN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			ETTN P 4;
			ETTN ONMLKJI 4;
			Goto See;
	}
}
class FEttin : EttinNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class EttinGhostNew : EttinNew replaces EttinMash
{
	default
	{
		Tag "Ettin (Ghost)";
		+NOBLOOD;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
	}
	
	States
	{
		Death:
		XDeath:
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			TNT1 A 3;
			Stop;
	}
}

// Ettin Commander [ported from Wrath of Cronos]
class EttinCommander : EttinNew
{
	default
	{
		Tag "Ettin Commander";
		Health 275;
		Mass 250;
		Speed 15;
		Damage 4;
		Painchance 35;
		Painchance "Fist", 52; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 87; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 52; // Fist attacks have a +50% chance of stunning an enemy
		MeleeRange 68;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Magic", 1.142857143;
		DamageFactor "Crush", 1.0;
		Translation "81:96=81:88", "97:121=97:109";
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+NODAMAGETHRUST;
		+MISSILEMORE;
		Obituary "%o was smashed by an Ettin Commander.";
	}
	
	States
	{
		Spawn:
			CETN A 0 NoDelay;
			CETN AA 10 A_Look();
			goto Spawn+1;
		See:
			CETN A 0;
			CETN ABCD 5
			{
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			CETN H 7 A_DVDSPain();
			Goto See;
		Pain.Fist:
			CETN H 7 A_DVDSPain();
			CETN H 7;
			Goto See;
		Pain.Kick:
			CETN H 7 A_DVDSPain();
			CETN HH 7;
			Goto See;
		Melee:
			TNT1 A 0;
			CETN EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			CETN G 8 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("ThrownMace","ThrownMaceCrisis",52,(random(2,8)*4));
			}
			Goto See;
		Missile:
			TNT1 A 0;
			CETN EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			CETN G 8 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				A_StartSound("FighterHammerMiss");
				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("ThrownMace","ThrownMaceCrisis",52,(random(2,8)*4));
			}
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CETN IJ 4;
			CETN K 4 A_Scream();
			CETN L 4 A_NoBlocking();
			CETN M 4 A_QueueCorpse();
			CETN NO 4;
			CETN P 4;
			CETN Q -1; //A_DVDSBossDeath();
			Stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CETB A 4; //A_SpawnItemEx("GIBBER");
			CETB B 4 A_NoBlocking();
			CETB C 4 A_SpawnItemEx("EttinMace", 0,0,8.5, random[DropMace](-128,127) * 0.03125, random[DropMace](-128,127) * 0.03125, 10 + random[DropMace](0,255) * 0.015625, 0, SXF_ABSOLUTEMOMENTUM);
			CETB D 4 A_Scream();
			CETB E 4 A_QueueCorpse();
			CETB FGHIJ 4;
			CETB K 4;
			ETTB L -1; //A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			---- E 5 A_GenericFreezeDeath();
			---- E 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CETN P 4;
			CETN ONMLKJI 4;
			Goto See;
	}
}
class FEttinCommander : EttinCommander
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Bormereth :V
class Bormereth : AetheriusMonsterZSC
{
	default
	{
		Tag "Bormereth";
		Health 1200;
		Radius 30;
		Height 64;
		Speed 10;
		PainChance 75;
		Painchance "Fist", 112; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 187; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 112; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.1875;
		DamageFactor "Explosive", 0.1875;
		DamageFactor "Crush", 0.4;
		Mass 2500;
		BloodColor "Red";
		MeleeRange 68;
		MONSTER ;
		Meleedamage 8;
		+MISSILEEVENMORE;
		+FLOORCLIP;
		+BOSS;
		SeeSound "DMage/Attack";
		PainSound "DMage/Pain";
		ActiveSound "DMage/idle";
		DeathSound "DMage/death";
		Obituary "%o was incinerated by the rage of a Bormereth.";
		HitObituary "%o was smashed by a Bormereth.";
	}
	
	States
	{
		Spawn:
			BORM A 0 NoDelay;
			BORM A 10 A_Look();
			Loop;
		See:
			BORM A 0;
			BORM AABBCCDD 4
			{
				user_bormpainreact = 0;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BORM A 0;
			TNT1 A 0 A_Jump(60,"Missile2");
			TNT1 A 0 A_Jump(128,"Missile1b");
			BORM EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,0);
			}
			BORM EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,0);
			}
			BORM EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,0);
			}
			BORM EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,0);
			}
			Goto See;

		Missile1b:
			TNT1 A 0 A_Jump(128,"Missile1c");
			BORM E 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM F 3
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FaceTarget();
			}
			BORM F 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",31,10,0);
			}
			BORM G 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",28,5,0);
			}
			BORM G 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,0);
			}
			Goto See;

		Missile1c:
			BORM EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,20);
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,0);
				A_CrisisSpawnProjectile("BormerethFX1","BormerethFX1Crisis",25,0,-20);
			}
			Goto See;
		Missile2:
			BORM F 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			TNT1 A 0 A_StartSound("bormereth/missile2prepare",CHAN_5);
			TNT1 A 0 A_SpawnItemEx("PossEttFakeFireBall",5,25,64,0,0,0,0,128);
			BORM EEEEE 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			BORM E 3
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FaceTarget();
			}
			TNT1 A 0 
			{
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("PossEttFireBall","PossEttFireBallCrisis",64,25,0);
			}
			BORM FG 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;
		Melee:
			BORM EF 6
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("BormerethFX1","BormerethFX1Crisis",randompick(25,28,31),8*random(1,8));
			}
			BORM E 0 A_CPosRefire();
			Goto See;
		Pain:
			TNT1 A 0 
			{
				if (random(1,256) <= 192)
				{
					user_bormpainreact = 1;
					if (bormcountercooldown <= 0)
					{
						A_MonsterCrisisCheck(); // Multiple Projectiles
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,0);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,45);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,90);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,135);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,180);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,225);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,270);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_DVDSPain();
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		Pain.Fist:
			TNT1 A 0 
			{
				if (random(1,256) <= 112)
				{
					if (bormcountercooldown <= 0)
					{
						A_MonsterCrisisCheck(); // Multiple Projectiles
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,0);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,45);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,90);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,135);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,180);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,225);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,270);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_DVDSPain();
			BORM HH 2;
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		Pain.Kick:
			TNT1 A 0 
			{
				if (random(1,256) <= 112)
				{
					if (bormcountercooldown <= 0)
					{
						A_MonsterCrisisCheck(); // Multiple Projectiles
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,0);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,45);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,90);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,135);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,180);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,225);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,270);
						A_CrisisSpawnProjectile("FirePillarStarter","FirePillarStarterCrisis",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_DVDSPain();
			BORM HHHH 2;
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		PainReact:
			BORM H 2 
			{
				A_SetInvulnerable();
				bCANTSEEK = true;
			}
			BORM HHHHHHHHHH 2;
			BORM H 2 
			{
				user_bormpainreact = 0;
				A_UnSetInvulnerable();
				bCANTSEEK = false;
			}
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BORM I 5;
			BORM J 5 A_Scream();
			BORM K 5 A_NoBlocking();
			BORM L 5 A_Fall();
			BORM MNO 5;
			BORM P 5;
			BORM Q -1;
			Stop;
		XDeath:  //I just like this death too much! :P
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TNT1 A 0 A_StartSound("misc/gibbed");
			BORB A 5 A_Scream();
			BORB B 5 A_SpawnItemEx("DBigEttinMace", 0, 0, 32, 3, 0, 0, -90, 128);
			BORB C 5 A_NoBlocking();
			BORB D 5 A_Fall();
			BORB EFGHIJ 5;
			BORB K 5;
			BORB L -1;
			Stop;
		Raise:
			BORM Q 5;
			BORM PONMLKJI 5;
			Goto See;
	}
}
class FBormereth : Bormereth
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Centaurs
class CentaurNew : AetheriusMonsterZSC replaces Centaur
{
	default
	{
		Tag "Centaur";
		Health 200;
		Painchance 135;
		Painchance "Fist", 201; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 201; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosion", 0.875;
		DamageFactor "Plasma", 2;
		DamageFactor "Shock", 3;
		DamageFactor "Electric", 3;
		DamageFactor "Thunder", 3;
		DamageFactor "Crush", 1.0;
		Speed 13;
		Height 64;
		Mass 120;
		MeleeRange 80;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+SHIELDREFLECT;
		SeeSound "CentaurSight";
		AttackSound "CentaurAttack";
		PainSound "CentaurPain";
		DeathSound "CentaurDeath";
		ActiveSound "CentaurActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_CENTAUR";
	}

	States
	{
		Spawn:
			CENT A 0 NoDelay;
			CENT AB 10 A_Look();
			goto Spawn+1;
		See:
			CENT A 0;
			CENT ABCD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			CENT H 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[CentaurAttack](3, 9));
			}
			Goto See;
		Pain:
			CENT G 6 A_DVDSPain();
			Goto ShieldDefend;
		Pain.Fist:
			CENT G 6 A_DVDSPain();
			CENT GG 6;
			Goto ShieldDefend;
		Pain.Kick:
			CENT G 6 A_DVDSPain();
			CENT GGGG 6;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_CentaurShieldOn();
				A_FaceTarget();

				if (random(1,128) <= 1) { user_defendtimer += 1; }
				if (random(1,32) <= 1) { user_defendtimer += 1; }
				if (random(1,8) <= 1) { user_defendtimer += 1; }
				user_defendtimer += 1;

				if (levelbehavior && user_monsterlevel > 270) { user_defendtimermax = 3; }
				else if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = 4; }
				else if (levelbehavior && user_monsterlevel > 90) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_CentaurShieldOn();
				user_defendtimer += 1;

				if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(17,18); }
				else if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = random(16,17); }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
			}
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CENT K 4;
			CENT L 4 A_Scream();
			CENT MN 4;
			CENT O 4 A_NoBlocking();
			CENT PQ 4;
			CENT R 4 A_QueueCorpse();
			CENT S 4;
			CENT T -1;
			Stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CTXD A 4;
			CTXD B 4 A_NoBlocking();
			CTXD C 0 A_SpawnItemEx("CentaurSword", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 270);
			CTXD C 4 
			{
				if (random(1,256) == 1)
				{
					A_SpawnProjectile("EvilWarriorShield",44,-32,90,0);
				}
				else
				{
					A_SpawnItemEx("CentaurShield", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,
												1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 90);
				}
			}
			CTXD D 3 A_Scream();
			CTXD E 4 A_QueueCorpse();
			CTXD F 3;
			CTXD G 4;
			CTXD H 3;
			CTXD I 4;
			CTXD J 3;
			CTXD K -1;
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			CENT U 5 A_FreezeDeath();
			CENT U 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CENT T 4;
			CENT SRQPONMLK 4;
			Goto See;
	}
}
class FCentaur : CentaurNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class CentaurGhostNew : CentaurNew replaces CentaurMash
{
	default
	{
		Tag "Centaur (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
	}
	
	States
	{
		Death:
		XDeath:
			#### # 0 A_DVDSNormalDeath(-2,0,1);
			TNT1 A 3;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			TNT1 A 3;
			Stop;
	}
}

class SlaughtaurNew : CentaurNew replaces CentaurLeader
{
	default
	{
		Tag "Slaughtaur";
		Health 325;
		Speed 12.5;
		MeleeRange 80;
		Painchance 84;
		Painchance "Fist", 126; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 210; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 126; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.75;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Fire", 0.75;
		DamageFactor "Magic", 1.1167;
		DamageFactor "Plasma", 2;
		DamageFactor "Thunder", 3;
		DamageFactor "Electric", 3;
		DamageFactor "Lightning", 3;
		DamageFactor "Crush", 1.0;
		
		Translation "81:96=85:92", "97:121=101:113", "0:32=231:235", "33:50=231:235";  // Dark Skin, Obsidian Armor
	}
	
	States
	{
		Melee:
			TNT1 A 0;
			CENT H 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[CentaurAttack](5, 13));
			}
			Goto See;
		Missile:
			TNT1 A 0;
		MissilePhase1:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;

				if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(7,8); }
				else if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = random(8,9); }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase2"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase2:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_MonsterCrisisCheck(); // Single Projectile
					A_CrisisSpawnProjectile("CentaurFXNew", "CentaurFXCrisis", 45, 0, 0, CMF_AIMOFFSET); 
				}

				if (levelbehavior && user_monsterlevel > 270) { user_defendtimermax = random(5,6); }
				else if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(6,7); }
				else if (levelbehavior && user_monsterlevel > 90) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase3"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase3:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
	
				if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(7,8); }
				else if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = random(8,9); }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase4"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase4:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_MonsterCrisisCheck(); // Single Projectile
					A_CrisisSpawnProjectile("CentaurFXNew", "CentaurFXCrisis", 45, 0, 0, CMF_AIMOFFSET); 
				}
			
				if (levelbehavior && user_monsterlevel > 270) { user_defendtimermax = random(5,6); }
				else if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(6,7); }
				else if (levelbehavior && user_monsterlevel > 90) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }
	
				if (user_defendtimer >= user_defendtimermax) 
				{
					A_CentaurShieldOff();
					A_SlaughtaurShieldOff();
					return resolvestate("See"); 
				}
				return resolvestate(null); 
			}
			Loop;
		Pain:
			CENT G 5 A_DVDSPain();
			Goto ShieldDefend;
		Pain.Fist:
			CENT G 5 A_DVDSPain();
			CENT GG 5;
			Goto ShieldDefend;
		Pain.Kick:
			CENT G 5 A_DVDSPain();
			CENT GGGG 5;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
	
				if (random(1,32) == 1) { user_defendtimer += 1; }
				if (random(1,8) == 1) { user_defendtimer += 1; }
				user_defendtimer += 1;
	
				if (levelbehavior && user_monsterlevel > 315) { user_defendtimermax = 2; }
				else if (levelbehavior && user_monsterlevel > 210) { user_defendtimermax = 3; }
				else if (levelbehavior && user_monsterlevel > 105) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_SlaughtaurShieldOn();
				user_defendtimer += 1;
	
				if (levelbehavior && user_monsterlevel > 180) { user_defendtimermax = random(21,22); }
				else if (levelbehavior && user_monsterlevel > 120) { user_defendtimermax = random(19,20); }
				else if (levelbehavior && user_monsterlevel > 60) { user_defendtimermax = random(18,19); }
				else { user_defendtimermax = 18; }
	
				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
	
				if (levelbehavior && user_monsterlevel > 180) { user_paintomissile = 1; }
				else if (levelbehavior && user_monsterlevel > 160) { user_paintomissile = 2; }
				else if (levelbehavior && user_monsterlevel > 140) { user_paintomissile = 3; }
				else if (levelbehavior && user_monsterlevel > 120) { user_paintomissile = 4; }
				else if (levelbehavior && user_monsterlevel > 100) { user_paintomissile = 5; }
				else if (levelbehavior && user_monsterlevel > 80) { user_paintomissile = 6; }
				else if (levelbehavior && user_monsterlevel > 60) { user_paintomissile = 7; }
				else if (levelbehavior && user_monsterlevel > 40) { user_paintomissile = 8; }
				else if (levelbehavior && user_monsterlevel > 20) { user_paintomissile = 9; }
				else { user_paintomissile = 10; }
	
				if (random(1,user_paintomissile) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
	}
}
class FSlaughtaur : SlaughtaurNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Afrits
class FireDemonNew : AetheriusMonsterZSC // replaces FireDemon
{
	int user_firedemonchase;
	default
	{
		Tag "Afrit";
		Health 80;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 32;
		DamageFactor "Crush", 1.25;
		DamageFactor "Fire", 0.25;
		DamageFactor "Ice", 4;
		Speed 13;
		Radius 20;
		Height 68;
		Mass 75;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		+DONTHARMSPECIES;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "$OB_FIREDEMON"; // "%o tasted an Afrit's fire.";
	}
	
	States
	{
		Spawn:
			FDMN X 0 NoDelay;
			FDMN X 5 Bright;
			FDMN EFG 10 Bright A_FloatLook(16);
			Goto Spawn+3;
		See:
			FDMN E 0;
			FDMN E 8 Bright;
			FDMN F 6 Bright;
			FDMN G 5 Bright;
			FDMN F 8 Bright;
			FDMN E 6 Bright;
			FDMN G 7 Bright A_FiredRocks();
			FDMN HI 5 Bright;
			FDMN J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDMN ABC 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FireDChase(32,4,20,13,1,1,3,1);
			}
			Loop;
		Pain:
			FDMN D 0 Bright A_UnSetInvulnerable();
			FDMN D 6 Bright A_DVDSPain();
			Goto Chase;
		Pain.Fist:
			FDMN D 0 Bright A_UnSetInvulnerable();
			FDMN D 6 Bright A_DVDSPain();
			FDMN DD 6 Bright;
			Goto Chase;
		Pain.Kick:
			FDMN D 0 Bright A_UnSetInvulnerable();
			FDMN D 6 Bright A_DVDSPain();
			FDMN DDDD 6 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("Chase");
			}
			FDMN K 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDMN KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_StartSound("FireDemonAttack");
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("FireDemonMissile","FireDemonMissileCrisis",32);
			}
			Goto Chase;
		Crash:
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDMN D 4 Bright A_FaceTarget();
			FDMN L 4 Bright A_Scream();
			FDMN L 4 Bright A_NoBlocking();
			FDMN L 200 Bright;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FDMN R 5 A_FreezeDeath();
			FDMN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDMN L 4;
			FDMN LD 4;
			Goto Chase;
	}
}
class FFireDemon : FireDemonNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class FireDemonLeader : FireDemonNew
{
	default
	{
		Tag "Afrit Leader";
		Health 160;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 32;
		DamageFactor "Crush", 1.125;
		DamageFactor "Fire", 0.20;
		DamageFactor "Ice", 5;
		Speed 7;
		Radius 20;
		Height 56;
		Mass 100;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		MinMissileChance 400;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Leader's fire.";
	}
	
	States
	{
		Spawn:
			FDNL X 0 NoDelay;
			FDNL X 5 Bright;
			FDNL EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNL E 8 Bright;
			FDNL F 6 Bright;
			FDNL G 5 Bright;
			FDNL F 8 Bright;
			FDNL E 6 Bright;
			FDNL G 7 Bright A_FiredRocks();
			FDNL HI 5 Bright;
			FDNL J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNL A 0 Bright A_UnSetInvulnerable();
			FDNL AABBCC 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FireDChase(40,8,15,10,1,1,3,1);
			}
			Loop;
		Pain:
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_DVDSPain();
			Goto Chase;
		Pain.Fist:
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_DVDSPain();
			FDNL DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_DVDSPain();
			FDNL DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("Chase");
			}
			FDNL K 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNL KKKKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("FireDemonLeaderMissile","FireDemonLeaderMissileCrisis",32);
			}
			Goto Chase;
		Crash:
			FDNL M 5 A_FaceTarget();
			FDNL N 5 A_NoBlocking();
			FDNL O 0 
			{
				A_SpawnItemEx("FireDemonLeaderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonLeaderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNL O 5; //A_DVDSBossDeath();
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNL M 5 A_FaceTarget();
			FDNL N 5 A_NoBlocking();
			FDNL O 0 
			{
				A_SpawnItemEx("FireDemonLeaderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonLeaderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNL O 5; //A_DVDSBossDeath();
			Stop;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNL D 4 Bright A_FaceTarget();
			FDNL L 4 Bright A_Scream();
			FDNL L 4 Bright A_NoBlocking();
			FDNL L 200 Bright;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FDNL R 5 A_FreezeDeath();
			FDNL R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNL L 4;
			FDNL LD 4;
			Goto Chase;
	}
}

class FireDemonLeaderSplotch1 : AetheriusBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			FDNL P 3;
			FDNL P 6 A_QueueCorpse();
			FDNL Y -1;
			Stop;
	}
}

class FireDemonLeaderSplotch2 : FireDemonLeaderSplotch1
{
	States
	{
		Spawn:
			FDNL Q 3;
			FDNL Q 6 A_QueueCorpse();
			FDNL Z -1;
			Stop;
	}
}

class FireDemonCommander : FireDemonNew
{
	default
	{
		Tag "Afrit Commander";
		Health 240;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 32;
		DamageFactor "Crush", 1.125;
		DamageFactor "Fire", 0.20;
		DamageFactor "Ice", 5;
		Speed 8; // 7
		Radius 20;
		Height 56;
		Mass 133;
		Damage 1;
		Species "Afrit";
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		MinMissileChance 400;
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Commander's fire.";
	}
	
	States
	{
		Spawn:
			FDNC X 0 NoDelay ;
			FDNC X 5 Bright;
			FDNC EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNC E 8 Bright;
			FDNC F 6 Bright;
			FDNC G 5 Bright;
			FDNC F 8 Bright;
			FDNC E 6 Bright;
			FDNC G 7 Bright A_FiredRocks();
			FDNC HI 5 Bright;
			FDNC J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNC A 0 Bright A_UnSetInvulnerable();
			FDNC AABBCC 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FireDChase(48,6,18,12,1,1,3,1);
			}
			Loop;
		Pain:
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_DVDSPain();
			Goto Chase;
		Pain.Fist:
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_DVDSPain();
			FDNC DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_DVDSPain();
			FDNC DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("Chase");
			}
			FDNC K 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNC KKKKKKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("FireDemonCommanderMissile","FireDemonCommanderMissileCrisis",32);
			}
			Goto Chase;
		Crash:
			FDNC M 5 A_FaceTarget();
			FDNC N 5 A_NoBlocking();
			FDNC O 0 
			{
				A_SpawnItemEx("FireDemonCommanderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonCommanderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNC O 5; //A_DVDSBossDeath();
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNC M 5 A_FaceTarget();
			FDNC N 5 A_NoBlocking();
			FDNC O 0 
			{
				A_SpawnItemEx("FireDemonCommanderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonCommanderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNC O 5; //A_DVDSBossDeath();
			Stop;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNC D 4 Bright A_FaceTarget();
			FDNC L 4 Bright A_Scream();
			FDNC L 4 Bright A_NoBlocking();
			FDNC L 200 Bright;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FDNC R 5 A_FreezeDeath();
			FDNC R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNC L 4;
			FDNC LD 4;
			Goto Chase;
	}
}

class FireDemonCommanderSplotch1 : AetheriusBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			FDNC P 3;
			FDNC P 6 A_QueueCorpse();
			FDNC Y -1;
			Stop;
	}
}

class FireDemonCommanderSplotch2 : FireDemonCommanderSplotch1
{
	States
	{
		Spawn:
			FDNC Q 3;
			FDNC Q 6 A_QueueCorpse();
			FDNC Z -1;
			Stop;
	}
}

class FireDemonQueen : FireDemonNew
{
	default
	{
		Tag "Afrit Queen";
		Health 960;
		ReactionTime 8;
		Speed 8;
		Radius 20;
		Height 56;
		Mass 250;
		Damage 1;
		Painchance "Fist", 16;
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 16;
		DamageFactor "Crush", 1.0;
		DamageFactor "Fire", 0.2;
		DamageFactor "Ice", 2.5;
		Monster;
		+BOSS;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+NEVERRESPAWN;
		+LOOKALLAROUND;
		+DONTMORPH;
		+NOFEAR;
		+NOPAIN;
		MinMissileChance 400;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Queen's fire.";
	}
	
	States
	{
		Spawn:
			FDNQ X 0 NoDelay;
			FDNQ X 5 Bright;
			FDNQ EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNQ E 8 Bright;
			FDNQ F 6 Bright;
			FDNQ G 5 Bright;
			FDNQ F 8 Bright;
			FDNQ E 6 Bright;
			FDNQ G 7 Bright A_FiredRocks();
			FDNQ HI 5 Bright;
			FDNQ J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNQ A 0 Bright A_UnSetInvulnerable();
			FDNQ AABBCC 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_FireDChase(64,3,36,24,1,1,3,1);
			}
			Loop;
		Pain:
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_DVDSPain();
			Goto Chase;
		Pain.Fist:
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_DVDSPain();
			FDNQ DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_DVDSPain();
			FDNQ DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_Jump(48,"Clone");
			TNT1 A 0
			{
				A_CheckIfTargetDead("Chase");
			}
			FDNQ K 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNQ KKKKKKKKK 4 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("FireDemonQueenMissile","FireDemonQueenMissileCrisis",32);
			}
			Goto Chase;
		Clone:
			TNT1 A 0
			{
				A_CheckIfTargetDead("Chase");
			}
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_KillChildren();
			TNT1 A 0 A_UnSetShootable();
			FDNQ AAAAAAAAA 1 Bright A_FadeOut(0.10);
			FDNQ A 1 Bright
			{
				A_SetTranslucent(0.0);
				A_SpawnItemEx("FireDemonQueenClone",-50,100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",50,-100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",100,100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",-100,-50,0,0,0,0,0,16);
			}
			FDNQ AAAAAAAAAA 1 Bright A_FadeIn(0.10);
			TNT1 A 0 A_SetShootable();
			Goto Chase;
		Crash:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ M 5 A_FaceTarget();
			FDNQ N 5;
			FDNQ O 0 
			{
				A_SpawnItemEx("FireDemonQueenSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonQueenSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNQ O 5; //A_DVDSBossDeath();
			Stop;
		XDeath:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNQ M 5 A_FaceTarget();
			FDNQ N 5;
			FDNQ O 0
			{
				A_SpawnItemEx("FireDemonQueenSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonQueenSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNQ O 5; //A_DVDSBossDeath();
			Stop;
		Death:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ D 4 Bright A_FaceTarget();
			FDNQ L 4 Bright A_Scream();
			FDNQ L 4 Bright;
			FDNQ L 200 Bright;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FDNQ R 5 A_FreezeDeath();
			FDNQ R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNQ L 4;
			FDNQ LD 4;
			Goto Chase; 
	}
}

class FireDemonQueenClone : FireDemonQueen
{
	default
	{
		Tag "Afrit Queen?";
		Health 5;
		+NOBLOOD;
		-COUNTKILL;
		-TELESTOMP;
		-INVULNERABLE;
		-BOSS;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.0;
	}
	
	States
	{
		Spawn:
			FDNQ X 0 NoDelay;
			FNDQ A 0;
			FDNQ AAAAAAA 1 Bright A_FadeIn(0.10);
			Goto Chase;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("Chase");
			}
			FDNQ K 4 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				A_FaceTarget();
			}
			FDNQ KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("FireDemonQueenCloneMissile","FireDemonQueenCloneMissileCrisis",32);
			}
			Goto Chase;
		Crash:
		XDeath:
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FDNQ A 1 Bright A_FadeOut(0.10);
			Loop;
	}
}

class FireDemonQueenSplotch1 : AetheriusBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	States
	{
		Spawn:
			FDNQ P 3;
			FDNQ P 6 A_QueueCorpse();
			FDMN Y -1;
			Stop;
	}
}

class FireDemonQueenSplotch2 : FireDemonQueenSplotch1
{
	States
	{
		Spawn:
			FDNQ Q 3;
			FDNQ Q 6 A_QueueCorpse();
			FDMN Z -1;
			Stop;
	}
}


// Dark Bishops
class BishopNew : AetheriusMonsterZSC // replaces Bishop
{
	default
	{
		Tag "Dark Bishop";
		Health 130;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 100;
		PainChance 110;
		Painchance "Fist", 165; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 165; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.9;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+TELESTOMP;
		+DONTOVERLAP;
		+NOTARGETSWITCH;
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "$OB_BISHOP";
		Bloodtype "EtherealBloodGreen";
		-NOBLOOD;
		Species "Bishop";
	}
	
	States
	{
		Spawn:
			BISH A 0 NoDelay;
			BISH A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			BISH A 0;
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopChase();
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			BISH A 1 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				A_BishopDecide();
			}
			Loop;
		Blur:
			BISH A 2 A_BishopDoBlur(3,3,11.0);
			BISH A 4 A_BishopSpawnBlur(96);
			Wait;
		Pain:
			BISH C 6 A_FloatPain(0,8,64);
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Pain.Fist:
			BISH C 6 A_FloatPain(0,8,64);
			BISH CC 6;
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Pain.Kick:
			BISH C 6 A_FloatPain(0,8,64);
			BISH CCCC 6;
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			BISH ADE 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			BISH F 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_BishopAttack(4*random(1,8), (random(1,256) & 3) + 5 + (user_monsterlevel / 30));
			}
			BISH F 5 
			{
				A_CheckIfTargetDead("See");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_BishopAttack2("BishopFXNew","BishopFXCrisis");
			}
			Wait;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BISH G 6;
			BISH H 6 Bright A_Scream();
			BISH I 5 Bright A_NoBlocking();
			BISH J 5 Bright A_Explode(random[BishopBoom](25, 40));
			BISH K 5 Bright;
			BISH LM 4 Bright;
			BISH N 4 A_SpawnItemEx("BishopPuff", 0, 0, 40, 0, 0, 0.5);
			BISH O 4 A_QueueCorpse();
			BISH P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BISH X 5 A_FreezeDeath();
			BISH X 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BISH O 4;
			BISH NML 4;
			BISH KJI 5;
			BISH HG 6;
			Goto See;
	}
}
class FBishop : BishopNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class DarkDisciple : BishopNew
{
	default
	{
		Tag "Dark Disciple";
		Health 220;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 140;
		PainChance 110;
		Painchance "Fist", 165; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 165; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.8;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+TELESTOMP;
		+DONTOVERLAP;
		-NOTARGETSWITCH;
		+NODAMAGETHRUST;
		-NOBLOOD;
		Species "Bishop";
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "%o succumbed to a Disciple's dark power.";
		Bloodtype "EtherealBloodPurple";
	}
	
	States
	{
		Spawn:
			HDIS A 0 NoDelay;
			HDIS A 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopDecide();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopDecide();
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopDecide();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			Loop;

		Blur:
			HDIS A 0 { bGHOST = true; }
			HDIS A 0 A_SetTranslucent(0.8,0);
			HDIS A 2 A_BishopDoBlur(3,3,14.0);
			HDIS AAA 4 A_SpawnItem("DiscipleBlur");
			TNT1 A 0 A_Jump(256,1,2,3);
			HDIS AA 4 A_SpawnItem("DiscipleBlur");
			HDIS A 0 { bGHOST = false; }
			HDIS A 0 A_SetTranslucent(1,0);
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_SpawnItem("DiscipleBlur");
			TNT1 A 0 A_Jump(97,"Missile");
			Goto See;
		Pain:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Pain.Fist:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CC 6;
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Pain.Kick:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CCCC 6;
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HDIS ADE 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			HDIS F 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_BishopAttack(5*random(1,8));
				user_shotsfired = 0;
				user_shotsfiredmax = (random(1,256) & 3) + 5 + (user_monsterlevel / 25);
				A_StartSound("BishopAttack");
			}
		MissileLoop:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HDIS F 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("DiscipleSpreadFX","DiscipleSpreadFXCrisis",32,0,-60,1);
				A_CrisisSpawnProjectile("DiscipleSpreadFX","DiscipleSpreadFXCrisis",32,0,60,1);
				A_CrisisSpawnProjectile("DiscipleFX","DiscipleFXCrisis",32);
				user_shotsfired += 1;
			}
			HDIS F 0 
			{
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			HDIS A 0
			{ 
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HDIS G 6;
			HDIS H 6 Bright A_Scream();
			HDIS I 5 Bright A_NoBlocking();
			HDIS J 5 Bright A_Explode(random(40, 65),128,1);
			HDIS K 5 Bright;
			HDIS LM 4 Bright;
			HDIS N 4 A_SpawnItemEx("BishopPuff", 0,0,40, 0,0,0.5);
			HDIS O 4 A_QueueCorpse();
			HDIS P -1; //A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HDIS C 5 A_GenericFreezeDeath();
			HDIS C 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			HDIS ON 5;
			HDIS MLKJIH 5 Bright;
			HDIS G 5;
			Goto See;
	}
}

class DisciplePainBlur : AetheriusBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			HDIS C 8;
			Stop;
	}
}

class DiscipleBlur : AetheriusBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			HDIS A 16;
			HDIS A 8 A_SetTranslucent(0.4);
			Stop;
	}
}

class EtherealBloodPurple : AetheriusBaseZSC
{
	default
	{
		+NOCLIP;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+CLIENTSIDEONLY;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1
			{
				if (GetCVar("dvds_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("dvds_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}

class EtherealBloodPurpleParticle : AetheriusBaseZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+MISSILE;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		RenderStyle "Add";
		Scale 0.045;
		Gravity 0.25;
	}
	
	States
	{
		Spawn:
			EBLD A 1 Bright A_FadeOut(0.02);
			Loop;
	}
}

class EtherealBloodGreen : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				if (GetCVar("dvds_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("dvds_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}

class EtherealBloodGreenParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD B 1 Bright A_FadeOut(0.02);
			Loop;
	}
}

class EtherealBloodRed : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				if (GetCVar("dvds_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("dvds_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}

class EtherealBloodRedParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD F 1 Bright A_FadeOut(0.02);
			Loop;
	}
}

// Vampire [Bishop Variant]
class VampireDVDS : BishopNew
{ 
	default
	{
		Tag "Vampire";
		Health 450;
		PainChance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.8;
		Species "Bishop";
		Speed 8;
		Scale 0.90;
		Radius 20;
		Height 56; 
		Mass 200;
		SeeSound "vampire/see";
		DeathSound "vampire/death";
		PainSound "vampire/pain";
		Bloodtype "EtherealBloodRed";
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		-NOGRAVITY;
		-FLOAT;
		Obituary "A Vampire drained all of %o's life.";
	}
	
	States 
	{
		Spawn: 
			VAM1 A 0 NoDelay;
			VAM1 AB 10 A_FloatLook(8);
			goto Spawn+1;
		See:
			VAM1 A 0;
			VAM1 A 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			VAM1 A 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 A 1
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(0); }
				A_BishopDecide();
			}
			Loop;

		Blur:
			VAM1 A 2 A_BishopDoBlur(3,3,17.0);
			VAM1 AAA 4 A_SpawnItem("VampireBlur");
			TNT1 A 0 A_Jump(256,1,2,3);
			VAM1 AA 4 A_SpawnItem("VampireBlur");
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_SpawnItem("VampireBlur");
			TNT1 A 0 A_Jump(97,"Missile");
			Goto See;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			VAM1 X 0 Bright A_Jump(96,"Missile2");
			VAM1 X 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotsfiredmax = 9 + (random(1,256) & 3) + (user_monsterlevel / 45);
			}
		BatAttack:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 Bright 
			{
				A_SpawnItemEx("VampCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BatAttack","BatAttackCrisis",Random(8,64),Random(-32,32),Random(20,-20),1);

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("BatEnd"); }
				return resolvestate(null);
			}
			Loop;
		BatEnd:
			VAM1 Y 8 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto See;

		Missile2:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			VAM1 E 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotsfiredmax = 42 + (random(1,256) & 14) + (user_monsterlevel / 20);
			}
			VAM1 AAAAAAAAAAAAAA 0 A_SpawnDebris("VampireBloodBoom",1);
		BeamLoop: // 56
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			VAM1 F 1 Bright 
			{
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("VampireRoundBeam","VampireRoundBeamCrisis",32,0,0,1);

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			VAM1 C 6 A_FloatPain(0,4,96);
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Fist:
			VAM1 C 6 A_FloatPain(0,4,96);
			VAM1 CC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Kick:
			VAM1 C 6 A_FloatPain(0,4,96);
			VAM1 CCCC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			VAM1 G 1 Bright;
			VAM1 G 8 Bright A_Scream(); 
			VAM1 H 5 Bright;
			VAM1 I 5 Bright A_NoBlocking();
			TNT1 AAAAAAAAAAAAAA 0 A_SpawnItemEx("VampCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			VAM1 J 5 Bright;
			VAM1 KLM 5 Bright;
			VAM1 N 5;
			VAM1 O 5;
			VAM1 P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			VAM1 C 5 A_GenericFreezeDeath();
			VAM1 C 1 A_FreezeDeathChunks();
			Wait;
		Raise: 
			VAM1 P 5;
			VAM1 ONMLKJIHG 5;
			Goto See;
	}
}
class FVampire : VampireDVDS
{
	default
	{
		-COUNTKILL; 
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class VampirePainBlur : AetheriusBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+CLIENTSIDEONLY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			VAM1 C 8;
			Stop;
	}
}
class VampireBlur : AetheriusBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+CLIENTSIDEONLY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			VAM1 A 16;
			VAM1 A 8 A_SetTranslucent(0.4);
			Stop;
	}
}
class VampireBloodBoom : AetheriusBaseZSC
{
	default
	{
		scale 0.75;
		health 1;
		radius 8;
		height 1;
		mass 1;
		+CORPSE;
		+NOTELEPORT;
		+NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			VAB1 A 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 A 1 ;
			VAB1 A 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 A 1;
			VAB1 B 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 B 1;
			VAB1 B 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 B 1;
			VAB1 C 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 C 1;
			VAB1 C 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 C 1;
			VAB1 D 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 D 1;
			VAB1 D 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 D 1;
			Loop;
		Crash:
			TNT1 A 1 A_SpawnItemEx("VampireBloodSpot",0,0,0,1,0,0,0,128);
			Stop;
	}
}

class VampireBloodSpot : AetheriusBaseZSC
{
	default
	{
		radius 12;
		height 2;
		mass 1;
		+NOTELEPORT;
		-NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_StartSound("vampireblood");
			TNT1 A 0 A_Jump(64,4);
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(192,4);
			TNT1 A 0 A_Jump(255,4);
			VAB3 A 750;
			Stop;
			VAB3 B 750;
			Stop;
			VAB3 C 750;
			Stop;
			VAB3 D 750;
			Stop;
	}
}

class VampireBloodTrail : AetheriusBaseZSC
{
	default
	{
		scale 0.70;
		mass 1;
		+LOWGRAVITY;
		+NOTELEPORT;
		+NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			VAB2 A 4;
			VAB2 B 4;
			VAB2 C 4;
			VAB2 D 4;
			Stop;
	}
}

class VampCloudSpawner : AetheriusBaseZSC
{
	default
	{
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("VampCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1));
			Stop;
	}
}

class VampCloud : AetheriusBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.5;
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.05);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.05);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.05);
			Goto Spawn+12;
	}
}

class BatCloudSpawner : AetheriusBaseZSC
{
	default
	{
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("BatCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1));
			Stop;
	}
}

class BatCloud : AetheriusBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.2;
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.10);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.10);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.10);
			Goto Spawn+12;
	}
}

class EtherealBloodWhite : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("EtherealBloodWhiteParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
			TNT1 A 1;
			Stop;
			TNT1 AAAA 0 A_SpawnItemEx("EtherealBloodWhiteParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
			TNT1 A 1;
			Stop;
	}
}

class EtherealBloodWhiteParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD F 1 Bright A_FadeOut(0.02);
			Loop;
	}
}

class DarkPatriarch : BishopNew
{
	default
	{
		Health 1000;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 250;
		PainChance 0;
		Species "Bishop";
		Monster;
		+FLOAT;
		+NOTARGET;
		+NOGRAVITY;
		-NOTARGETSWITCH;
		+TELESTOMP;
		-NOBLOOD;
		+NOPAIN;
		-DONTOVERLAP;
		+DONTMORPH;
		+NOFEAR;
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "%o was judged by the Dark Patriarch.";
		DamageType "Spiritual";
		Bloodtype "EtherealBloodWhite";
		Tag "Dark Patriarch";
		+USEKILLSCRIPTS;
		
		DropItem "ArtiSuperHealth", 64;
		DropItem "ArtiInvulnerability2", 64;
		Dropitem "ArtiDarkServant", 64;
		Dropitem "ArtiBoostMana", 64;
	}
	
	States
	{
		Spawn:
			DPTR A 10 A_Look();
			Loop;
		See:
			DPTR A 0 
			{
				//A_RadiusGive("PatriarchRadiusHeal", 256, RGF_MONSTERS, 1);
			}
			DPTR A 2 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 75) { bAVOIDMELEE = true; }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR A 2
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 75) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 2 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 75) { bAVOIDMELEE = true; }
				A_BishopDecide();
			}
			DPTR B 2 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 75) { bAVOIDMELEE = true; }
				A_BishopChase(1,1,3,1);
			}
			DPTR B 2 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 75) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR B 2 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 75) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 0 A_BishopDecide();
			Loop;
		Blur:
			DPTR A 0 A_FaceTarget();
			DPTR A 2 A_BishopDoBlur(3,3,17.0);
			DPTR A 0 A_UnsetShootable();
			DPTR AAA 4 A_SpawnItemEx("PatriarchBlur");
			DPTR A 0 A_Jump(256,1,2,3);
			DPTR AA 4 A_SpawnItemEx("PatriarchBlur");
			DPTR A 0 A_SetShootable();
			DPTR A 0 Thing_Stop(0);
			DPTR A 0 A_SpawnItemEx("PatriarchBlur");
			Goto See;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			DPTR A 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR DE 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR F 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_StartSound("BishopAttack");
			}
			TNT1 A 0 A_Jump(256,1,2,3,4);
			DPTR FFFFFFFF 5 
			{
				A_CheckIfTargetDead("See");

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("PatriarchFX","PatriarchFXCrisis",32);
			}
			Goto See;
		Pain:
			DPTR C 6 A_FloatPain(0,4,96);
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Fist:
			DPTR C 6 A_FloatPain(0,4,96);
			DPTR CC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Kick:
			DPTR C 6 A_FloatPain(0,4,96);
			DPTR CCCC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DPTR G 6 A_KillChildren();
			DPTR H 6 Bright A_Scream();
			DPTR I 5 Bright A_NoBlocking();
			DPTR J 5 Bright A_Explode(frandom(50,80),128,XF_NOTMISSILE);
			DPTR K 5 Bright;
			DPTR LM 4 Bright;
			DPTR N 4 A_SpawnItemEx("BishopPuff", 0,0,40, 0,0,0.5);
			DPTR O 4 A_QueueCorpse();
			DPTR P -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DPTR C 5 A_GenericFreezeDeath();
			DPTR C 1 A_FreezeDeathChunks();
			Wait;
	}
}

class PatriarchPainBlur : AetheriusBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			DPTR C 2 A_SetTranslucent(0.6);
			DPTR C 2 A_SetTranslucent(0.45);
			DPTR C 2 A_SetTranslucent(0.3);
			DPTR C 2 A_SetTranslucent(0.15);
			Stop;
	}
}

class PatriarchBlur : AetheriusBaseZSC
{
	default
	{
		PROJECTILE;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NOCLIP;
		+PAINLESS;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			DPTR A 8 A_SetTranslucent(0.6);
			DPTR A 8 A_SetTranslucent(0.5);
			DPTR A 8 A_SetTranslucent(0.4);
			DPTR A 0 A_SpawnItemEx("DarkPatriarchClone", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER, 250);
			Stop;
	}
}

class DarkPatriarchClone : DarkPatriarch
{
	default
	{
		Health 100;
		Mass 125;
		DamageType "Spiritual";
		Bloodtype "EtherealBloodWhite";
		Tag "Dark Patriarch Clone";
		+USEKILLSCRIPTS;
		+NOICEDEATH;
		+DONTFALL;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.6;
		
		DropItem "None";
	}
	
	States
	{
		Spawn:
			DPTR A 10 A_Look();
			Loop;
		See:
			DPTR A 2 
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 150) { bAVOIDMELEE = true; }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR A 2
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 150) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 2 
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 150) { bAVOIDMELEE = true; }
				A_BishopDecide();
			}
			DPTR B 2 
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 150) { bAVOIDMELEE = true; }
				A_BishopChase(1,1,3,1);
			}
			DPTR B 2 
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 150) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR B 2 
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				if (levelbehavior && user_monsterlevel > 150) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 0 A_BishopDecide();
			Loop;
		Blur:
			DPTR A 0 A_FaceTarget();
			DPTR A 2 A_BishopDoBlur(3,3,17.0);
			DPTR AAA 4 A_SpawnItem("PatriarchBlurClone");
			DPTR A 0 A_Jump(256,1,2,3);
			DPTR AA 4 A_SpawnItem("PatriarchBlurClone");
			DPTR A 0 Thing_Stop(0);
			DPTR A 0 A_SpawnItem("PatriarchBlurClone");
			Goto See;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			DPTR A 3 
			{
				if (levelbehavior && user_monsterlevel > 360) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR DE 3 
			{
				if (levelbehavior && user_monsterlevel > 360) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR F 3 
			{
				if (levelbehavior && user_monsterlevel > 360) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				A_StartSound("BishopAttack");
			}
			DPTR FFF 5 
			{
				A_CheckIfTargetDead("See");

				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				A_FaceTarget();
				
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("PatriarchFX","PatriarchFXCrisis",32);
			}
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			---- A 3 A_FadeOut(0.1);
			Wait;
	}
}

class PatriarchBlurClone : AetheriusBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			DPTR A 16;
			DPTR A 8 A_SetTranslucent(0.2);
			Stop;
	}
}

class PatriarchFX : AetheriusProjectileZSC
{
	default
	{
		Tag "Patriarch Star";
		Radius 10;
		Height 6;
		Speed 15;
		DamageType "Spiritual";
		Projectile;
		+SEEKERMISSILE;
		DamageFunction (frandom(8,28));
		RenderStyle "Add";
		SeeSound "PatriarchMissileFire";
		DeathSound "PatriarchMissileExplode";
	}
	
	States
	{
		Spawn:
			PFX1 CCCC 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 DDDD 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 EEEE 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 FFFF 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			PFX1 HHHHH 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 IIIII 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 JJJJ 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 KKKLLLMMM 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 GGG 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			Stop;
	}
}
class PatriarchFXCrisis : PatriarchFX
{
	default
	{
		Radius 10;
		Height 6;
		Speed 15;
		DamageType "Spiritual";
		Projectile;
		+SEEKERMISSILE;
		DamageFunction ((frandom(8,28)) * CrisisMultiplier);
		RenderStyle "Add";
		SeeSound "PatriarchMissileFire";
		DeathSound "PatriarchMissileExplode";
	}
	
	States
	{
		Spawn:
			PFX1 CC 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_GenerateCrisisParticle();
			PFX1 CC 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 DD 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_GenerateCrisisParticle();
			PFX1 DD 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 EE 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_GenerateCrisisParticle();
			PFX1 EE 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 FF 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_GenerateCrisisParticle();
			PFX1 FF 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			PFX1 HHHHH 1 Bright A_SpawnItemEx("PatriarchRainFXCrisis",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 IIIII 1 Bright A_SpawnItemEx("PatriarchRainFXCrisis",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 JJJJ 1 Bright A_SpawnItemEx("PatriarchRainFXCrisis",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 KKKLLLMMM 1 Bright A_SpawnItemEx("PatriarchRainFXCrisis",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 GGG 1 Bright A_SpawnItemEx("PatriarchRainFXCrisis",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			Stop;
	}
}

class PatriarchFXClone : PatriarchFX
{
	States
	{
		Death:
			PFX1 HHHHH 1 Bright;
			PFX1 IIIII 1 Bright;
			PFX1 JJJJ 1 Bright;
			PFX1 KKKLLLMMM 1 Bright;
			PFX1 GGG 1 Bright;
			Stop;
	}
}

class PatriarchRainFX : AetheriusProjectileZSC
{
	default
	{
		Tag "Patriarch Rain";
		Radius 6;
		Height 12;
		Speed 12;
		DamageFunction (frandom(3,24));
		DamageType "Spiritual";
		Mass 5;
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		-NOGRAVITY;
		+SPAWNCEILING;
		+CEILINGHUGGER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			PFX3 A 0;
			PFX3 A 0 { bCEILINGHUGGER = false; }
		Animation:
			PFX3 A -1 Bright;
			Stop;
		Death:
			PFX3 B 0 Bright { bNOGRAVITY = true; }
			PFX3 B 0 Bright A_CheckFloor("NotFloor");
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 GHI 4 Bright;
			Stop;
		NotFloor:
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 BCDEF 4 Bright;
			Stop;
		Disappear:
			TNT1 A 1 Bright;
			Stop;
	}
}
class PatriarchRainFXCrisis : PatriarchRainFX
{
	default
	{
		Radius 6;
		Height 12;
		Speed 12;
		DamageFunction ((frandom(3,24)) * CrisisMultiplier);
		DamageType "Spiritual";
		Mass 5;
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		-NOGRAVITY;
		+SPAWNCEILING;
		+CEILINGHUGGER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			PFX3 A 0;
			PFX3 A 0 { bCEILINGHUGGER = false; }
		Animation:
			PFX3 A 2 Bright
			{
				A_GenerateCrisisParticle();
			}
			Loop;
		Death:
			PFX3 B 0 Bright { bNOGRAVITY = true; }
			PFX3 B 0 Bright A_CheckFloor("NotFloor");
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 GHI 4 Bright;
			Stop;
		NotFloor:
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 BCDEF 4 Bright;
			Stop;
		Disappear:
			TNT1 A 1 Bright;
			Stop;
	}
}

class PatriarchShot : AetheriusBaseZSC
{
	default
	{
		Tag "Patriarch Shot";
		Radius 10;
		Height 6;
		Speed 25;
		DamageFunction (frandom(15,30));
		Paintype "ManaDrain";
		DamageType "Spiritual";
		RenderStyle "Add";
		ALPHA 1;
		PROJECTILE;
		BounceType "Doom";
		BounceFactor 1;
		BounceCount 2;
		DeathSound "monster/disht1";
		Decal "WizardScorch";
	}
	
	States
	{
		Spawn:
			PFX1 AAABBB 1 Bright A_SpawnItemEx("DPFX1",  -(Pos.X/1.2), -(Pos.Y/1.2), (Pos.Z/1.2*-1), (Pos.X/1.2), (Pos.Y/1.2), (Pos.Z/1.2), 0, 138);
			Loop;
		Death:
			PFX1 HIJKLM 3 Bright;
			Stop;
	}
}

class DPFX1 : AetheriusBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		+CLIENTSIDEONLY;
		RenderStyle "Add";
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			PFX1 A 1 Bright A_FadeOut(0.1);
			Loop; 
	}
}