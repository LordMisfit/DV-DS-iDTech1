class DSparilBase : AetheriusBossZSC
{
	//**********
    //*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain ()
	{
		special1 = 20; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase ()
	{
		if (special1)
		{
			special1--;
			tics -= 3;
		}
		A_Chase();
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New", string crisismissiletype = "SorcererFX1Crisis")
	{
		A_MonsterCrisisCheck();
		string projtype = missiletype;
		if(user_canusecrisisatk == 1) 
		{
		 projtype = crisismissiletype;
		 meleedamage *= CallACS("CrisisMultiplier"); 
		}

		if (!target)
		{
			return;
		}
		A_PlaySound (AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			if(user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		if(user_canusecrisisatk == 1) A_PlayCrisisAtkSound();
		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{ // Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{ // Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{ // Maybe attack again
				if (special1)
				{ // Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{ // Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	// without Chaos Serpent
	void DSparilTeleport ()
	{
		SpotState state = SpotState.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_PlaySound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel ("Teleport");
			A_PlaySound ("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			DSparilTeleport ();
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype1crisis = "Sorcerer2FX1Crisis", string missiletype2 = "Sorcerer2FX2New",  string missiletype2crisis = "Sorcerer2FX2Crisis")
	{
		A_MonsterCrisisCheck();
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;
		if(user_canusecrisisatk == 1) 
		{
		 attacktype1 = missiletype1crisis;
		 attacktype2 = missiletype2crisis;
		 meleedamage *= CallACS("CrisisMultiplier");
		}

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_PlaySound (AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			if(user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		if(user_canusecrisisatk == 1) A_PlayCrisisAtkSound(); 
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{ // Wizard spawners

			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{ // Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{ // Need to loop
			SetStateLabel("DeathLoop");
		}
	}

}


// MONSTER SPAWNERS

// Gargoyle spawner
class GargoyleSpawner : AetheriusMonsterSpawner replaces HereticImp
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,256) <= evolveChance)
			{
				if (random(1,2) == 1)
					return "WatcherImp";
				else
					return "PlagueImp";
			}
			else
				return "HereticImpLeaderNew";
		}
		else
			return "HereticImpNew";
	}
}

// Gargoyle Leader spawner
class GargoyleLeaderSpawner : AetheriusMonsterSpawner replaces HereticImpLeader
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,2) == 1)
				return "WatcherImp";
			else
				return "PlagueImp";
		}
		else
			return "HereticImpLeaderNew";
	}
}

// Golem Spawner
class GolemSpawner : AetheriusMonsterSpawner replaces Mummy
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,256) <= evolveChance)
			{
				if (random(1,256) <= evolveChance)
				{
					if (random(1,2048) <= evolveChance)
					{
						if (random(1,4) == 1)
							return "IceGolemGhost";
						else
							return "IceGolem";
					}
					else
						return "MummyLeaderGhostNew";
				}
				else
					return "MummyLeaderNew";
			}
			else
				return "MummyGhostNew";
		}
		else
			return "MummyNew";
	}
}

// Golem Ghost Spawner
class GolemGhostSpawner : AetheriusMonsterSpawner replaces MummyGhost
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,256) <= evolveChance)
			{
				if (random(1,2048) <= evolveChance)
				{
					if (random(1,4) == 1)
						return "IceGolemGhost";
					else
						return "IceGolem";
				}
				else
					return "MummyLeaderGhostNew";
			}
			else
				return "MummyLeaderNew";
		}
		else
			return "MummyGhostNew";
	}
}

// NitroGolem Spawner
class NitroGolemSpawner : AetheriusMonsterSpawner replaces MummyLeader
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,2048) <= evolveChance)
			{
				if (random(1,4) == 1)
					return "IceGolemGhost";
				else
					return "IceGolem";
			}
			else
				return "MummyLeaderGhostNew";
		}
		else
			return "MummyLeaderNew";
	}
}

// NitroGolem Ghost Spawner
class NitroGolemGhostSpawner : AetheriusMonsterSpawner replaces MummyLeaderGhost
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,2048) <= evolveChance)
		{
			if (random(1,4) == 1)
				return "IceGolemGhost";
			else
				return "IceGolem";
		}
		else
			return "MummyLeaderGhostNew";
	}
}

// Undead Warrior/Knight spawner
class KnightSpawner : AetheriusMonsterSpawner replaces Knight
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,2048) <= evolveChance)
			{
				if (random(1,4) == 1)
					return "DeathKnightGhost";
				else
					return "DeathKnight";
			}
			else
				return "KnightGhostNew";
		}
		else
			return "KnightNew";
	}
}

// Undead Warrior/Knight spawner
class KnightGhostSpawner : AetheriusMonsterSpawner replaces KnightGhost
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");

		if (random(1,2048) <= evolveChance)
			return "DeathKnightGhost";
		else
			return "KnightNew";
	}
}

// Disciple Spawner
class WizardSpawner : AetheriusMonsterSpawner replaces Wizard
{
	Default
	{
		+FLOAT
		+NOGRAVITY
		+SPAWNFLOAT
		+DONTOVERLAP
	}

	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,2048) <= evolveChance)
			return "Banshee";
		else
			return "WizardNew";
	}
}

// IronLich Spawner
class LichSpawner : AetheriusMonsterSpawner replaces Ironlich
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,256) <= evolveChance)
		{
			if (random(1,512) <= evolveChance)
			{
				if (random(1,1024) <= evolveChance)
					return "BloodLich";
				else
					return "GoldLich";
			}
			else
				return "IceLich";
		}
		else
			return "IronLichNew";
	}
}

// Ophidian spawner
class SnakeSpawner : AetheriusMonsterSpawner replaces Snake
{
	override Class<Actor> ChooseWhatToSpawn()
	{
		let evolveChance = CallACS("GetEvolveChance");
		
		if (random(1,512) <= evolveChance)
			return "HellGuard";
		else
			return "SnakeNew";
	}
}