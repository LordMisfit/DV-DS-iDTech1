// Base HumanoidClass
class StrifeHumanoidBase : AetheriusMonsterZSC
{
	default
	{
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		CrushPainSound "misc/pcrush";
	}
	
	States
	{
		Burn:
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

// PEASANTS
class PeasantNew : StrifeHumanoidBase replaces Peasant
{
	default
	{
		Tag "Peasant";
		Health 31;
		PainChance 200;
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0;
		Speed 8;
		Radius 20;
		Height 56;
		Monster;
		+NEVERTARGET;
		-COUNTKILL;
		+NOSPLASHALERT;
		+FLOORCLIP;
		+JUSTHIT;
		+CANTSEEK;
		MinMissileChance 150;
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		SeeSound "peasant/sight";
		AttackSound "peasant/attack";
		PainSound "peasant/pain";
		DeathSound "peasant/death";
		HitObituary "$OB_PEASANT"; // "%o should have never picked a fight with a civilian.";
	}
	
	States
	{
		Spawn:
			PEAS A 0 NoDelay;
			PEAS A 10 A_Look2();
			goto Spawn+1;
		See:
			PEAS A 0;
			PEAS AABBCCDD 5 A_DVDSWander(0,1,3,1,1);
			loop;
		Melee:
			PEAS E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			PEAS F 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(2*random(1,5)+2);
			}
			PEAS E 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto See;
		Pain:
			PEAS O 3;
			PEAS O 3 A_DVDSPain();
			Goto Melee;
		Pain.Fist:
			PEAS O 3;
			PEAS O 3 A_DVDSPain();
			PEAS OO 3;
			Goto Melee;
		Pain.Kick:
			PEAS O 3;
			PEAS O 3 A_DVDSPain();
			PEAS OOOO 3;
			Goto Melee;
		Wound:
			PEAS G 5
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
			}
			PEAS H 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(11); }
				A_GetHurt();
			}
			PEAS I 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto Wound+1;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			PEAS G 5;
			PEAS H 5 A_Scream();
			PEAS I 6;
			PEAS J 5 A_NoBlocking();
			PEAS K 5;
			PEAS L 6;
			PEAS M 8;
			PEAS N 1400;
			GIBS U 5;
			GIBS V 1400;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			GIBS M 5 A_TossGib();
			GIBS N 5 A_XScream();
			GIBS O 5 A_NoBlocking();
			GIBS PQRS 4 A_TossGib();
			Goto Death+9;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

class Peasant1New : PeasantNew replaces Peasant1
{
	default
	{
		Tag "Peasant";
		Speed 4;
	}
}

class Peasant2New : PeasantNew replaces Peasant2
{
	default
	{
		Tag "Peasant";
		Speed 5;
	}
}

class Peasant3New : PeasantNew replaces Peasant3
{
	default
	{
		Tag "Peasant";
		Speed 5;
	}
}

class Peasant4New : PeasantNew replaces Peasant4
{
	default
	{
		Tag "Peasant";
		Translation 0;
		Speed 7;
	}
}

class Peasant5New : PeasantNew replaces Peasant5
{
	default
	{
		Tag "Peasant";
		Translation 0;
		Speed 7;
	}
}

class Peasant6New : PeasantNew replaces Peasant6
{
	default
	{
		Tag "Peasant";
		Translation 0;
		Speed 7;
	}
}

class Peasant7New : PeasantNew replaces Peasant7
{
	default
	{
		Tag "Peasant";
		Translation 2;
	}
}

class Peasant8New : PeasantNew replaces Peasant8
{
	default
	{
		Tag "Peasant";
		Translation 2;
	}
}

class Peasant9New : PeasantNew replaces Peasant9
{
	default
	{
		Tag "Peasant";
		Translation 2;
	}
}

class Peasant10New : PeasantNew replaces Peasant10
{
	default
	{
		Tag "Peasant";
		Translation 1;
	}
}

class Peasant11New : PeasantNew replaces Peasant11
{
	default
	{
		Tag "Peasant";
		Translation 1;
	}
}

class Peasant12New : PeasantNew replaces Peasant12
{
	default
	{
		Tag "Peasant";
		Translation 1;
	}
}

class Peasant13New : PeasantNew replaces Peasant13
{
	default
	{
		Tag "Peasant";
		Translation 3;
	}
}

class Peasant14New : PeasantNew replaces Peasant14
{
	default
	{
		Tag "Peasant";
		Translation 3;
	}
}

class Peasant15New : PeasantNew replaces Peasant15
{
	default
	{
		Tag "Peasant";
		Translation 3;
	}
}

class Peasant16New : PeasantNew replaces Peasant16
{
	default
	{
		Tag "Peasant";
		Translation 5;
	}
}

class Peasant17New : PeasantNew replaces Peasant17
{
	default
	{
		Tag "Peasant";
		Translation 5;
	}
}

class Peasant18New : PeasantNew replaces Peasant18
{
	default
	{
		Tag "Peasant";
		Translation 5;
	}
}

class Peasant19New : PeasantNew replaces Peasant19
{
	default
	{
		Tag "Peasant";
		Translation 4;
	}
}

class Peasant20New : PeasantNew replaces Peasant20
{
	default
	{
		Tag "Peasant";
		Translation 4;
	}
}

class Peasant21New : PeasantNew replaces Peasant21
{
	default
	{
		Tag "Peasant";
		Translation 4;
	}
}

class Peasant22New : PeasantNew replaces Peasant22
{
	default
	{
		Tag "Peasant";
		Translation 6;
	}
}

// BEGGARS
class BeggarNew : StrifeHumanoidBase replaces Beggar // Base Class
{
	default
	{
		Tag "Beggar";
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0;
		Health 20;
		PainChance 250;
		Speed 3;
		Radius 20;
		Height 56;
		Monster;
		+JUSTHIT;
		-COUNTKILL;
		+NOSPLASHALERT;
		+CANTSEEK;
		MinMissileChance 150;
		Tag "Beggar";
		MaxStepHeight 16;
		MaxDropoffHeight 32;
		HitObituary "$OB_BEGGAR"; // "%o was beaten to death by the poor.";
		AttackSound "beggar/attack";
		PainSound "beggar/pain";
		DeathSound "beggar/death";
	}

	States
	{
		Spawn:
			BEGR A 0 NoDelay;
			BEGR A 10 A_Look();
			goto Spawn+1;
		See:
			BEGR A 0;
			BEGR AABBCC 4 A_DVDSWander(0,1,3,1,1);
			Loop;
		Melee:
			BEGR D 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
			}
			BEGR D 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(2*random(1,5)+2);
			}
			BEGR E 1
			{
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			BEGR D 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
				A_SentinelRefire();
			}
			Loop;
		Pain:
			BEGR A 3 A_DVDSPain();
			BEGR A 3 A_DVDSChase("Melee","Missile",0,1,3,1,1);
			Goto Melee;
		Pain.Fist:
			BEGR A 3;
			BEGR A 3 A_DVDSPain();
			BEGR AA 3;
			Goto Melee;
		Pain.Kick:
			BEGR A 3;
			BEGR A 3 A_DVDSPain();
			BEGR AAAA 3;
			Goto Melee;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			BEGR F 4;
			BEGR G 4 A_Scream();
			BEGR H 4;
			BEGR I 4 A_NoBlocking();
			BEGR JKLM 4;
			BEGR N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			BEGR F 5 A_TossGib();
			GIBS M 5 A_TossGib();
			GIBS N 5 A_XScream();
			GIBS O 5 A_NoBlocking();
			GIBS PQRST 4 A_TossGib();
			GIBS U 5;
			GIBS V 1400;
			Stop;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
	}
}

class Beggar1New : BeggarNew replaces Beggar1 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar2New : BeggarNew replaces Beggar2 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar3New : BeggarNew replaces Beggar3 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar4New : BeggarNew replaces Beggar4 
{
	default
	{
		Tag "Beggar";
	}
}

class Beggar5New : BeggarNew replaces Beggar5 
{
	default
	{
		Tag "Beggar";
	}
}

// MERCHANTS
class MerchantNew : AetheriusMonsterZSC replaces Merchant
{
	default
	{
		Tag "Merchant";
		Health 94;
		PainChance 256; // a merchant should always enter the pain state when getting hurt
		Radius 20;
		Height 56;
		Mass 5000;
		CrushPainSound "misc/pcrush";
		+SOLID;
		+SHOOTABLE;
		+NOTDMATCH;
		+NOSPLASHALERT;
		+NOBLOOD;
		+NODAMAGE;
		+CANTSEEK;
	}
	
	States
	{
		Spawn:
			MRST A 10 A_Look2();
			Loop;
			MRLK A 30 A_ActiveSound();
			Loop;
			MRLK B 30;
			Loop;
			MRBD ABCDEDCB 4;
			MRBD A 5;
			MRBD F 6;
			Loop;
		See:
		Pain:
			MRPN A 1;
			MRPN A 2 A_AlertMonsters();
			MRPN B 3 A_DVDSPain();
			MRPN C 3;
			MRPN D 9 Door_CloseWaitOpen(999, 64, 960);
			MRPN C 4;
			MRPN B 3;
			MRPN A 3 A_ClearSoundTarget();
			Goto Spawn;
		Yes:
			MRYS A 20;
			// Fall through
		Greetings:
			MRGT ABCDEFGHI 5;
			Goto Spawn;
		No:
			MRNO AB 6;
			MRNO C 10;
			MRNO BA 6;
			Goto Greetings;
	}
}

class WeaponSmithNew : MerchantNew replaces WeaponSmith
{
	default
	{
		Tag "Weapon Smith";
		PainSound "smith/pain";
		Tag "$TAG_WEAPONSMITH"; // "Weapon Smith"
	}
}

class BarKeepNew : MerchantNew replaces BarKeep
{
	default
	{
		Tag "Bartender";
		Translation 4;
		PainSound "barkeep/pain";
		ActiveSound "barkeep/active";
		Tag "$TAG_BARKEEP"; // "Bar Keep"
	}
}

class ArmorerNew : MerchantNew replaces Armorer
{
	default
	{
		Tag "Armorer";
		Translation 5;
		PainSound "armorer/pain";
		Tag "$TAG_ARMORER"; // "Armorer"
	}
}

class MedicNew : MerchantNew replaces Medic
{
	default
	{
		Tag "Medic";
		Translation 6;
		PainSound "medic/pain";
		Tag "$TAG_MEDIC"; // "Medic"
	}
}

// THE FRONT
class RebelNew : StrifeHumanoidBase replaces Rebel // Base class for Rebels
{
	default
	{
		Tag "Front Rebel";
		Health 75; // 1.25x the HP
		PainChance 187; // 75% the original pain chance
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0;
		Speed 10; // 25% more speed than before
		Radius 20;
		Height 56;
		Monster;
		+FRIENDLY;
		-COUNTKILL;
		+NOSPLASHALERT;
		+CANTSEEK;
		species "Players";
		MinMissileChance 150;
		Tag "$TAG_REBEL"; // "Rebel"
		SeeSound "rebel/sight";
		PainSound "rebel/pain";
		DeathSound "rebel/death";
		ActiveSound "rebel/active";
		Obituary "$OB_REBEL"; // "%o was gunned down by a Rebel."
	}

	States
	{
		Spawn:
			HMN1 P 0 NoDelay;
			HMN1 P 5 A_Look2();
			goto Spawn+1;
			HMN1 Q 0;
			HMN1 Q 8;
			goto Spawn+1;
			HMN1 R 0;
			HMN1 R 8;
			goto Spawn+1;
			HMN1 A 0;
			HMN1 ABCDABCD 6 A_DVDSWander(0,1,3,1,1);
			goto Spawn+1;
		See:
			HMN1 A 0;
			HMN1 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 E 6
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}

		Shoot1:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 F 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
					else 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
				}
				else
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
					else 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HMN1 E 6
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
					else 
					{
						A_CustomBulletAttack(frandom(XSpread*-1,XSpread), 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); 
					}
				}
				else
				{
					A_ActorGetHitScanXSpread(101);
					if (levelbehavior && user_monsterlevel > 75) 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
					else 
					{
						A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 32, 12, frandom(XSpread*-1,XSpread), CMF_OFFSETPITCH|CMF_BADPITCH, 0); 
					}
				}
			}
			HMN1 O 0 A_Jump(96,"See");
			HMN1 O 0 A_MonsterRefire(48,"See");
			Goto See;

		Pain:
			HMN1 O 2;
			HMN1 O 2 A_DVDSPain();
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Pain.Fist:
			HMN1 O 2;
			HMN1 O 2 A_DVDSPain();
			HMN1 OO 2;
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Pain.Kick:
			HMN1 O 2;
			HMN1 O 2 A_DVDSPain();
			HMN1 OOOO 2;
			HMN1 O 0 A_Jump(80,"Missile");
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			HMN1 G 5;
			HMN1 H 5 A_Scream();
			HMN1 I 3 A_NoBlocking();
			HMN1 J 4;
			HMN1 KLM 3;
			HMN1 N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			RGIB A 4 A_TossGib();
			RGIB B 4 A_XScream();
			RGIB C 3 A_NoBlocking();
			RGIB DEF 3 A_TossGib();
			RGIB G 3;
			RGIB H 1400;
			Stop;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN NOPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR GHIJ 4;
			MEAT D 700;
			Stop;
		Ice:
			TNT1 A 0 { bCANTSEEK = true; }
			HMN1 A 5 A_FreezeDeath();
			HMN1 A 1 A_FreezeDeathChunks();
			Wait;
	}
}

class Rebel1New : RebelNew replaces Rebel1
{
	default
	{
		Tag "Front Rebel";
		DropItem "ClipOfBullets";
	}
}

class Rebel2New : RebelNew replaces Rebel2
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel3New : RebelNew replaces Rebel3
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel4New : RebelNew replaces Rebel4
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel5New : RebelNew replaces Rebel5
{
	default
	{
		Tag "Front Rebel";
	}
}

class Rebel6New : RebelNew replaces Rebel6
{
	default
	{
		Tag "Front Rebel";
	}
}
// THE ORDER
class AcolyteNew : StrifeHumanoidBase replaces Acolyte
{
	default
	{
		Tag "Order Acolyte";
		Health 70;
		Painchance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 225; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "PoisonBolt", 25.0;
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 0.875;
		DamageFactor "Ice", 0.9375;
		DamageFactor "Plasma", 1.125;
		DamageFactor "Thunder", 1.25;
		DamageFactor "Electric", 1.25;
		DamageFactor "Lightning", 1.25;
		Speed 7;
		Radius 24;
		Height 64;
		Mass 400;
		Monster;
		+SEESDAGGERS;
		+NOSPLASHALERT;
		+FLOORCLIP;
		+NEVERRESPAWN;
		MinMissileChance 150;
		Tag "$TAG_ACOLYTE"; // "ACOLYTE";
		SeeSound "acolyte/sight";
		PainSound "acolyte/pain";
		AttackSound "acolyte/rifle";
		DeathSound "acolyte/death";
		ActiveSound "acolyte/active";
		Obituary "$OB_ACOLYTE"; // "%o was zealously shot down by an Acolyte.";
		DropItem "AssaultGun", 1;
	}

	States
	{
		Spawn:
			AGRD A 0 NoDelay;
			AGRD A 5
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_Look2();
			}
			goto Spawn+1;
			AGRD B 8 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_ClearShadow();
			}
			goto Spawn+1;
			AGRD D 8
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			goto Spawn+1;
			AGRD ABCDABCD 5 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_DVDSWander(0,1,3,1,1);
			}
			goto Spawn+1;
		See:
			AGRD A 6 Fast Slow 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				A_AcolyteBits();
				A_AcolyteShieldOff();
			}
			AGRD BCD 6 Fast Slow
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				A_AcolyteShieldOff();
			}
			Loop;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 
			{
				A_AcolyteShieldOn();
			}
			AGRD E 8 Fast Slow 
			{
				A_AcolyteShieldOn();

				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			
				user_shotsfired = 0;
				user_shotsfiredmax = 1 + (user_monsterlevel/100);
			}

		// Shot 1
		Shoot1:
			AGRD FE 4 Fast Slow 
			{
				A_CheckIfTargetDead("See");

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
				A_AcolyteShieldOn();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(8, 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(8, 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); }
				}
				else
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					else { A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
				}
			}
			AGRD F 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("EndShoot"); }
				return resolvestate(null);
			}
			loop;
		EndShoot:
			AGRD F 6 Fast Slow 
			{
				A_CheckIfTargetDead("See");

				user_shotsfired = 0;
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				A_AcolyteShieldOn();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				if (bullet_tracer_mode == 0)
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(8, 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(8, 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); }
				}
				else
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					else { A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 32, 12, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
				}
			}
			AGRD F 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Pain:
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
				A_DVDSPain();
			}
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
			}
			AGRD O 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Pain.Fist:
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
				A_DVDSPain();
			}
			AGRD OO 4 Fast Slow
			{
				A_AcolyteShieldOn();
			}
			AGRD O 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Pain.Kick:
			AGRD O 4 Fast Slow
			{
				A_AcolyteShieldOn();
				A_DVDSPain();
			}
			AGRD OOOO 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
			}
			AGRD O 0
			{
				A_AcolyteShieldOff();
			}
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(3,8));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			AGRD G 4;
			AGRD H 4 A_Scream();
			AGRD I 4;
			AGRD J 3;
			AGRD K 3 A_NoBlocking();
			AGRD L 3;
			AGRD M 3 A_AcolyteDie();
			AGRD N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(3,8));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			GIBS A 5 A_NoBlocking();
			GIBS BC 5 A_TossGib();
			GIBS D 4 A_TossGib();
			GIBS E 4 A_XScream();
			GIBS F 4 A_TossGib();
			GIBS GH 4;
			GIBS I 5;
			GIBS J 5 A_AcolyteDie();
			GIBS K 5;
			GIBS L 1400;
			Stop;
		Ice:
			TNT1 A 0 A_GiveGold(random(3,8));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			AGRD O 5 A_FreezeDeath();
			AGRD O 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			AGRD M 3;
			AGRD LKJ 3;
			AGRD IHG 4;
			goto See;
		Burn:
			TNT1 A 0 A_GiveGold(random(3,8));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BURN A 3 Bright A_StartSound("human/imonfire",CHAN_VOICE);
			BURN B 3 Bright A_DropFire();
			BURN C 3 Bright A_DVDSWander(0,1,3,1,1);
			BURN D 3 Bright A_NoBlocking();
			BURN E 5 Bright A_DropFire();
			BURN FGH 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN I 5 Bright A_DropFire();
			BURN JKL 5 Bright A_DVDSWander(0,1,3,1,1);
			BURN M 5 Bright A_DropFire();
			BURN N 5 Bright A_AcolyteDie();
			BURN OPQPQ 5 Bright;
			BURN RSTU 7 Bright;
			BURN V -1;
			Stop;
		Disintegrate:
			TNT1 A 0 A_GiveGold(random(3,8));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TNT1 A 0 ;
			DISR A 5 A_StartSound("misc/disruptordeath",CHAN_VOICE);
			DISR BC 5;
			DISR D 5 A_NoBlocking();
			DISR EF 5;
			DISR G 4 A_AcolyteDie();
			DISR HIJ 4;
			MEAT D 700;
			Stop;
	}
}

class AcolyteBlueNew : AcolyteNew replaces AcolyteBlue
{
	default
	{
		Tag "Order Acolyte";
		Health 60;
		Translation 6;
	}
}

class AcolyteDGreenNew : AcolyteNew replaces AcolyteDGreen
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 3;
	}
}

class AcolyteGoldNew : AcolyteNew replaces AcolyteGold
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 4;
	}
}

class AcolyteGrayNew : AcolyteNew replaces AcolyteGray
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 2;
	}
}

class AcolyteLGreenNew : AcolyteNew replaces AcolyteLGreen
{
	default
	{
		Tag "Order Acolyte";
		Health 60;
		Translation 5;
	}
}

class AcolyteRedNew : AcolyteNew replaces AcolyteRed
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 0;
	}
}

class AcolyteRustNew : AcolyteNew replaces AcolyteRust
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Translation 1;
	}
}

class AcolyteShadowNew : AcolyteNew replaces AcolyteShadow
{
	default
	{
		Tag "Shadow Acolyte";
		+MISSILEMORE;
		DropItem "ClipOfBullets";
	}
	
	States
	{
		See:
			AGRD A 6 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }

				A_BeShadowy();
			}
			Goto Super::See+1;
		Pain:
			AGRD O 0 Fast Slow A_SetShadow();
			AGRD O 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
				A_DVDSPain();
			}
			AGRD O 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
			}
			AGRD O 0
			{
				bNOBLOOD = false;
				bNOPAIN = false;
				A_SetInventory("AcolyteShieldDefend",0); // A_UnSetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
			}
			Goto See;
		Pain.Fist:
			AGRD O 0 Fast Slow A_SetShadow();
			AGRD O 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
				A_DVDSPain();
			}
			AGRD OO 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
			}
			AGRD O 0
			{
				bNOBLOOD = false;
				bNOPAIN = false;
				A_SetInventory("AcolyteShieldDefend",0); // A_UnSetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
			}
			Goto See;
		Pain.Kick:
			AGRD O 0 Fast Slow A_SetShadow();
			AGRD O 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
				A_DVDSPain();
			}
			AGRD OOOO 4 Fast Slow
			{
				if (random(1,2) == 1) 
				{
					bNOPAIN = true;
					bNOBLOOD = true; 
				}
				else
				{
					bNOPAIN = false;
					bNOBLOOD = false;
				}
				A_SetInventory("AcolyteShieldDefend",1); // A_SetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
				if (random(1,4) == 1) { A_SetInventory("AcolyteShieldDefendExtra",1); } 
			}
			AGRD O 0
			{
				bNOBLOOD = false;
				bNOPAIN = false;
				A_SetInventory("AcolyteShieldDefend",0); // A_UnSetInvulnerable
				A_SetInventory("AcolyteShieldDefendExtra",0);
			}
			Goto See;
	}
}

class AcolyteTanNew : AcolyteNew replaces AcolyteTan
{
	default
	{
		Tag "Order Acolyte";
		+MISSILEMORE;
		+MISSILEEVENMORE;
		DropItem "ClipOfBullets";
	}
}

class SentinelNew : AetheriusMonsterZSC replaces Sentinel
{
	default
	{
		Tag "Order Sentinel";
		Health 100;
		Painchance 255;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 1.25;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 0.875;
		DamageFactor "Plasma", 1.375;
		DamageFactor "Thunder", 1.75;
		DamageFactor "Electric", 1.75;
		DamageFactor "Lightning", 1.75;
		Speed 7;
		Radius 23;
		Height 53;
		Mass 300;
		Monster;
		+SPAWNCEILING;
		+NOGRAVITY;
		+DROPOFF;
		+NOBLOOD;
		+NOBLOCKMONST;
		+INCOMBAT;
		+MISSILEMORE;
		+LOOKALLAROUND;
		+NEVERRESPAWN;
		MinMissileChance 150;
		SeeSound "sentinel/sight";
		DeathSound "sentinel/death";
		ActiveSound "sentinel/active";
		Obituary "$OB_SENTINEL"; // "%o was shot down by a Sentinel."
	}
	
	States
	{
		Spawn:
			SEWR A 0 NoDelay;
			SEWR A 10 A_Look();
			goto Spawn+1;
		See:
			SEWR A 0;
			SEWR A 6 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(5); }
				A_SentinelBob();
			}
			SEWR A 6
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(5); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			SEWR B 4 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();
			}
			SEWR C 8 Bright // A_SentinelAttack
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); A_SentinelAttack("Sentinel2FX5New","Sentinel2FX5Crisis"); }
				else if (levelbehavior && user_monsterlevel > 135) { A_SetTics(5); A_SentinelAttack("Sentinel2FX4New","Sentinel2FX4Crisis"); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(6); A_SentinelAttack("Sentinel2FX3New","Sentinel2FX3Crisis"); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(7); A_SentinelAttack("Sentinel2FX2New","Sentinel2FX2Crisis"); }
				else { A_SentinelAttack("Sentinel2FX1New","Sentinel2FX1Crisis"); }
			}
			SEWR C 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_SentinelRefire();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			Goto Missile+2;
		Pain:
			SEWR D 5 A_DVDSPain();
			Goto Missile+3;
		Pain.Fist:
			SEWR D 5 A_DVDSPain();
			SEWR D 5;
			Goto Missile+3;
		Pain.Kick:
			SEWR D 5 A_DVDSPain();
			SEWR DD 5;
			Goto Missile+3;

		Death:
			TNT1 A 0 A_GiveGold(random(4,7));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SEWR D 7 A_Fall;
			SEWR E 8 Bright A_TossGib();
			SEWR F 5 Bright A_Scream();
			SEWR GH 4 Bright A_TossGib();
			SEWR I 4;
			SEWR J 5;
			Stop;

		Ice:
			TNT1 A 0 A_GiveGold(random(4,7));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SEWR D 5 A_FreezeDeath();
			SEWR D 1 A_FreezeDeathChunks();
			Wait;
	}
}

class OStalkerNew : AetheriusMonsterZSC replaces Stalker
{
	default
	{
		Tag "Order Stalker";
		Health 80;
		PainChance 40;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 60; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 0.875;
		DamageFactor "Plasma", 1.375;
		DamageFactor "Thunder", 1.75;
		DamageFactor "Electric", 1.75;
		DamageFactor "Lightning", 1.75;
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 1.25;
		Speed 16;
		Radius 31;
		Height 25;
		Monster;
		+NOGRAVITY;
		+DROPOFF;
		+NOBLOOD;
		+SPAWNCEILING;
		+INCOMBAT;
		+NOVERTICALMELEERANGE;
		MaxDropOffHeight 32;
		MinMissileChance 150;
		SeeSound "stalker/sight";
		AttackSound "stalker/attack";
		PainSound "stalker/pain";
		DeathSound "stalker/death";
		ActiveSound "stalker/active";
		HitObituary "$OB_STALKER"; // "%o was bugged by a Stalker.";
	}
	
	States
	{
		Spawn:
			STLK A 0 NoDelay;
			STLK A 1 A_StalkerLookInit();
			goto Spawn+1;
		LookCeiling:
			STLK A 10 
			{
				A_Look();
				A_SetInventory("OnCeiling",1);
			}
			Loop;
		LookFloor:
			STLK J 10
			{
				A_Look();
				A_SetInventory("OnCeiling",0);
			}
			Loop;
		See: // While on Ceiling
			TNT1 A 0;
			STLK A 0 Slow 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				A_StalkerChaseDecide();
				A_SetInventory("OnCeiling",1);
			}
			STLK ABB 3 Slow
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) { A_DVDSChase("Melee","MissileCeiling",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_SetInventory("OnCeiling",1);
			}
			STLK C 3 Slow 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) { A_DVDSChase("Melee","MissileCeiling",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_StartSound("stalker/walk",4);
				A_SetInventory("OnCeiling",1);
			}
			STLK C 3 Slow
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) { A_DVDSChase("Melee","MissileCeiling",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_SetInventory("OnCeiling",1);
			}
			Loop;
		SeeFloor:
			STLK J 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) {  A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_StartSound("stalker/walk",4);
				A_SetInventory("OnCeiling",0);
			}
			STLK KK 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_SetInventory("OnCeiling",0);
			}
			STLK L 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_StartSound("stalker/walk",4);
				A_SetInventory("OnCeiling",0);
			}
			STLK L 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 60) { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				A_SetInventory("OnCeiling",0);
			}
			Loop;
		Melee:
			TNT1 A 0 A_SetInventory("OnCeiling",0);
			STLK J 3 Slow 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			STLK K 3 Slow 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_StalkerAttack((random(1,256) & 7) * 2 + 2);
			}
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				A_SetInventory("OnCeiling",0);
				user_shotsfired = 0;
				user_shotsfiredmax = 2 + (user_monsterlevel/60);
				if (levelbehavior && user_monsterlevel < 61) { return resolvestate("See"); }
				return resolvestate(null);
			}
		MissileLoop1: // 3 Shots
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			STLK J 3 Slow
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			STLK J 3 Bright Slow
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 240) { A_SentinelAttack("Sentinel2FX5New","Sentinel2FX5Crisis"); }
				else if (levelbehavior && user_monsterlevel > 195) { A_SentinelAttack("Sentinel2FX4New","Sentinel2FX4Crisis"); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SentinelAttack("Sentinel2FX3New","Sentinel2FX3Crisis"); }
				else if (levelbehavior && user_monsterlevel > 105) { A_SentinelAttack("Sentinel2FX2New","Sentinel2FX2Crisis"); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SentinelAttack("Sentinel2FX1New","Sentinel2FX1Crisis"); }
			}
			STLK K 3 Bright Slow 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SentinelRefire();
			}
			STLK K 0 Bright Slow 
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			loop;
		MissileCeiling:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				A_SetInventory("OnCeiling",1);
				user_shotsfired = 0;
				user_shotsfiredmax = 2 + (user_monsterlevel/60);
				if (levelbehavior && user_monsterlevel < 61) { return resolvestate("See"); }
				return resolvestate(null);
			}
		MissileCeilingLoop:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			STLK A 3 Slow 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			STLK A 3 Bright Slow
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				if (levelbehavior && user_monsterlevel > 240) { A_SentinelAttack("Sentinel2FX5New","Sentinel2FX5Crisis"); }
				else if (levelbehavior && user_monsterlevel > 195) { A_SentinelAttack("Sentinel2FX4New","Sentinel2FX4Crisis"); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SentinelAttack("Sentinel2FX3New","Sentinel2FX3Crisis"); }
				else if (levelbehavior && user_monsterlevel > 105) { A_SentinelAttack("Sentinel2FX2New","Sentinel2FX2Crisis"); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SentinelAttack("Sentinel2FX1New","Sentinel2FX1Crisis"); }
			}
			STLK B 3 Bright Slow
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SentinelRefire();
			}
			STLK B 0 Bright Slow 
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			STLK L 1 A_DVDSPain();
			Goto See;
		Pain.Fist:
			STLK L 1 A_DVDSPain();
			STLK LL 1;
			Goto See;
		Pain.Kick:
			STLK L 1 A_DVDSPain();
			STLK LLLL 1;
			Goto See;
		Drop:
			STLK C 2 A_StalkerDrop();
			STLK IHGFED 3;
			Goto SeeFloor;

		Death:
			STLK O 0 A_SetInventory("OnCeiling",0);
			STLK O 0 A_GiveGold(random(3,6));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			STLK O 4;
			STLK P 4 A_Scream();
			STLK QRST 4;
			STLK U 4 A_NoBlocking();
			STLK VW 4;
			STLK XYZ[ 4 Bright;
			Stop;
		Ice:
			TNT1 A 0 A_GiveGold(random(3,6));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			STLK O 5 A_FreezeDeath();
			STLK O 1 A_FreezeDeathChunks();
			Wait;
	}
}

class CeilingTurretNew : AetheriusMonsterZSC replaces CeilingTurret
{
	default
	{
		Tag "Ceiling Turret";
		Health 125;
		Speed 0;
		PainChance 0;
		Painchance "Fist", 0; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 0; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 0; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.00125;
		DamageFactor "Fire", 0.85;
		DamageFactor "Ice", 0.9375;
		DamageFactor "Plasma", 1.125;
		DamageFactor "Thunder", 1.25;
		DamageFactor "Electric", 1.25;
		DamageFactor "Lightning", 1.25;
		Mass 1000000000;
		Monster;
		-SOLID;
		-CANPASS;
		+AMBUSH;
		+SPAWNCEILING;
		+NODAMAGETHRUST;
		+NOGRAVITY;
		+NOBLOOD;
		+NOSPLASHALERT;
		+DONTFALL;
		MinMissileChance 150;
		DeathSound "turret/death";
	}

	States
	{
		Spawn:
			TURT A 0 NoDelay 
			{
				A_SetInventory("OnCeiling",1);
			}
			TURT A 5 
			{
				A_SetInventory("OnCeiling",1);
				if (levelbehavior && user_monsterlevel > 135) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(4); }
				A_TurretLook();
			}
			goto Spawn+1;
		See:
			TURT A 0
			{
				A_SetInventory("OnCeiling",1);
			}
			TURT A 2
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
		Pain:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TURT B 4 Slow 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();

				A_StartSound("monsters/rifle", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(8, 0, 1, 3*random(3,15), "StrifePuff", 2048, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(8, 0, 1, 3*random(1,5), "StrifePuff", 2048, CBAF_NORANDOM); }
				}
				else
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CrisisSpawnProjectile("StrifeGenBulletTracer2", "StrifeGenBulletTracer2Crisis", 0, 0, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					else { A_CrisisSpawnProjectile("StrifeGenBulletTracer", "StrifeGenBulletTracerCrisis", 0, 0, frandom(-4.0,4.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
				}
			}
			TURT D 3 Slow
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(2); }
				A_SentinelRefire();
			}
			TURT A 4 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_SentinelRefire();
			}
			goto Missile;

		Death:
			TNT1 A 0 A_GiveGold(random(4,7));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BALL A 6 Bright A_Scream();
			BALL BCDE 6 Bright;
			TURT C -1;
			Stop;
		Ice:
			goto Death;
	}
}
class TemplarNew : AetheriusMonsterZSC replaces Templar
{
	default
	{
		Tag "Order Templar";
		Health 300;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 150; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 0.875;
		DamageFactor "Plasma", 1.25;
		DamageFactor "Thunder", 1.5;
		DamageFactor "Electric", 1.5;
		DamageFactor "Lightning", 1.5;
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.7;
		Speed 8;
		Radius 20;
		Height 60;
		Mass 500;
		Monster;
		+NOBLOOD;
		+SEESDAGGERS;
		+NOSPLASHALERT;
		MaxDropOffHeight 32;
		MinMissileChance 200;
		SeeSound "templar/sight";
		PainSound "templar/pain";
		DeathSound "templar/death";
		ActiveSound "templar/active";
		CrushPainSound "misc/pcrush";
		Tag "$TAG_TEMPLAR"; // "TEMPLAR"
		HitObituary "$OB_TEMPLARHIT"; // "%o was clawed by a Templar."
		Obituary "$OB_TEMPLAR"; // "%o was vaporized by a Templar."
		DropItem "EnergyPod";
		DropItem "Mauler", 1;
	}

	States
	{
		Spawn:
			PGRD A 0 NoDelay;
			PGRD A 5 A_Look2();
			goto Spawn+1;
			PGRD B 10;
			goto Spawn+1;
			PGRD C 10;
			goto Spawn+1;
			PGRD B 10 A_DVDSWander(0,1,3,1,1);
			goto Spawn+1;
		See:
			PGRD A 0;
			PGRD AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			PGRD E 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			PGRD F 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,8)*3, "reaver/blade");
			}
			Goto See;
		Missile:
			TNT1 A 0;
			PGRD G 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			PGRD H 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				A_StartSound("templar/shoot", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Multiple Pellets
				if (GetCVar("dvds_shotgunnerspread") == 0) // Original Attack [10 pellets @ 2*1d4 damage, original Templar's version of the Mauler]
				{
					if (bullet_tracer_mode == 0) // Hitscan
					{
						if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(11.25, 7, 10, 2*random(3,12), "MaulerPuff", 2048, CBAF_NORANDOM); }
						else { A_CustomBulletAttack(11.25, 7, 10, 2*random(1,4), "MaulerPuff", 2048, CBAF_NORANDOM); }
					}
					else // Tracers
					{
						if (levelbehavior && user_monsterlevel > 75) 
						{
							for (user_pelletsfired = 0; user_pelletsfired < 10; user_pelletsfired++)
							{
								A_CrisisSpawnProjectile("StrifeMaulerTracer2", "StrifeMaulerTracer2Crisis", 32, 12, frandom(-5.625,5.625), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-3.5,3.5)); 
							}
						}
						else 
						{
							for (user_pelletsfired = 0; user_pelletsfired < 10; user_pelletsfired++)
							{
								A_CrisisSpawnProjectile("StrifeMaulerTracer", "StrifeMaulerTracerCrisis", 32, 12, frandom(-5.625,5.625), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-3.5,3.5)); 
							}
						}
					}
				}
				else // "Retail" Attack [20 pellets @ 5*1d3 damage, with a wider spread: like the Strife player's Mauler (harder to deal with)]
				{
					if (bullet_tracer_mode == 0) // Hitscan
					{
						if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(22.5, 14, 20, 3*random(3,15), "MaulerPuff", 2048, CBAF_NORANDOM); }
						else { A_CustomBulletAttack(22.5, 14, 20, 3*random(1,5), "MaulerPuff", 2048, CBAF_NORANDOM); }
					}
					else // Tracers
					{
						if (levelbehavior && user_monsterlevel > 75) 
						{
							for (user_pelletsfired = 0; user_pelletsfired < 20; user_pelletsfired++)
							{
								A_CrisisSpawnProjectile("StrifeMaulerTracerRetail2", "StrifeMaulerTracerRetail2Crisis", 32, 12, frandom(-11.25,11.25), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-7.0,7.0)); 
							}
						}
						else 
						{
							for (user_pelletsfired = 0; user_pelletsfired < 20; user_pelletsfired++)
							{
								A_CrisisSpawnProjectile("StrifeMaulerTracerRetail", "StrifeMaulerTracerRetailCrisis", 32, 12, frandom(-11.25,11.25), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-7.0,7.0)); 
							}
						}
					}
				}
			}
			Goto See;
		Pain:
			PGRD A 2;
			PGRD A 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			PGRD A 2;
			PGRD A 2 A_DVDSPain();
			PGRD AA 2;
			Goto See;
		Pain.Kick:
			PGRD A 2;
			PGRD A 2 A_DVDSPain();
			PGRD AAAA 2;
			Goto See;

		Death:
			TNT1 A 0 A_GiveGold(random(6,12));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			PGRD I 4 A_TossGib();
			PGRD J 4 A_Scream();
			PGRD K 4 A_TossGib();
			PGRD L 4 A_NoBlocking();
			PGRD MN 4;
			PGRD O 4 A_TossGib();
			PGRD PQRSTUVWXYZ[ 4;
			PGRD \ -1;
			Stop;

		Ice:
			TNT1 A 0 A_GiveGold(random(6,12));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			PGRD A 5 A_FreezeDeath();
			PGRD A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			PGRD \ 4;
			PGRD PQRSTUVWXYZ[ 4;
			PGRD ONMLKJI 4;
			Goto See;
	}
}

class ReaverNew : AetheriusMonsterZSC replaces Reaver
{
	default
	{
		Tag "Order Reaver";
		Health 150;
		PainChance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.7;
		DamageFactor "Fire", 0.5;
		DamageFactor "Ice", 0.75;
		DamageFactor "Plasma", 1.375;
		DamageFactor "Thunder", 1.75;
		DamageFactor "Electric", 1.75;
		DamageFactor "Lightning", 1.75;
		Speed 12;
		Radius 20;
		Height 60;
		Monster;
		+NOBLOOD;
		+INCOMBAT;
		MinMissileChance 150;
		MaxDropoffHeight 32;
		Mass 500;
		SeeSound "reaver/sight";
		PainSound "reaver/pain";
		DeathSound "reaver/death";
		ActiveSound "reaver/active";
		HitObituary "$OB_REAVERHIT"; // "%o was sliced open by a Reaver.";
		Obituary "$OB_REAVER"; // "%o was shot down by a Reaver.";
	}

	States
	{
		Spawn:
			ROB1 A 0 NoDelay; 
			ROB1 A 10 A_Look();
			goto Spawn+1;
		See:
			ROB1 A 0;
			ROB1 BBCCDDEE 3 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			ROB1 H 6 Slow
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB1 I 8 Slow
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				A_CrisisMeleeAttack(random(1,8)*3, "reaver/blade");
			}
			ROB1 H 6 Slow
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
			}
			Goto See;
		Missile:
			TNT1 A 0;
			ROB1 F 8 Slow 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			ROB1 G 11 Slow
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 144) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 108) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 72) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 36) { A_SetTics(10); }
				A_FaceTarget();

				A_StartSound("reaver/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Multiple Pellets
				if (bullet_tracer_mode == 0)
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(11.0, 0, 3, random(3,24) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(11.0, 0, 3, random(1,8) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						if (levelbehavior && user_monsterlevel > 75) { A_CrisisSpawnProjectile("StrifeReaverBulletTracer2", "StrifeReaverBulletTracer2Crisis", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
						else { A_CrisisSpawnProjectile("StrifeReaverBulletTracer", "StrifeReaverBulletTracerCrisis", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					}
				}
			}
			Goto See;
		Pain:
			ROB1 A 2 Slow;
			ROB1 A 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			ROB1 A 2 Slow;
			ROB1 A 2 A_DVDSPain();
			ROB1 AA 2 Slow;
			Goto See;
		Pain.Kick:
			ROB1 A 2 Slow;
			ROB1 A 2 A_DVDSPain();
			ROB1 AAAA 2 Slow;
			Goto See;

		Death:
			TNT1 A 0 A_GiveGold(random(5,10));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ROB1 J 6;
			ROB1 K 6 A_Scream();
			ROB1 L 5;
			ROB1 M 5 A_NoBlocking();
			ROB1 NOP 5;
			ROB1 Q 6 A_Explode(32, 32, 1, 1);
			ROB1 R -1;
			Stop;
		XDeath:
			TNT1 A 0 A_GiveGold(random(5,10));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ROB1 L 5 A_TossGib();
			ROB1 M 5 A_Scream();
			ROB1 N 5 A_TossGib();
			ROB1 O 5 A_NoBlocking();
			ROB1 P 5 A_TossGib();
			Goto Death+10;

		Ice:
			TNT1 A 0 A_GiveGold(random(5,10));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ROB1 A 5 A_FreezeDeath();
			ROB1 A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			ROB1 Q 6;
			ROB1 PONML 5;
			ROB1 KJ 6;
			Goto See;
	}
}

class CrusaderNew : AetheriusMonsterZSC replaces Crusader
{
	default
	{
		Tag "Order Crusader";
		Speed 8;
		Radius 40;
		Height 56;
		Mass 400;
		Health 400;
		PainChance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		DamageFactor "Ice", 0.75;
		DamageFactor "Plasma", 1.375;
		DamageFactor "Thunder", 1.75;
		DamageFactor "Electric", 1.75;
		DamageFactor "Lightning", 1.75;
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.4;
		Monster;
		+FLOORCLIP;
		+DONTMORPH;
		+MISSILEMORE;
		+INCOMBAT;
		+NOICEDEATH;
		+NOBLOOD;
		MinMissileChance 120;
		MaxDropoffHeight 32;
		DropItem "EnergyPod", 256, 20;
		SeeSound "crusader/sight";
		PainSound "crusader/pain";
		DeathSound "crusader/death";
		ActiveSound "crusader/active";
		Obituary "$OB_CRUSADER"; // "%o was swept away by a Crusader.";
	}

	States
	{
		Spawn:
			ROB2 A 0 NoDelay; 
			ROB2 Q 10 A_Look();
			goto Spawn+1;
		See:
			ROB2 A 0;
			ROB2 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0;
			ROB2 E 3 Slow
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			ROB2 F 2 Slow Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_CrusaderChoose("FastFlameMissile","FastFlameMissileCrisis","CrusaderMissile","CrusaderMissileCrisis");
			}
			ROB2 E 2 Slow Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_CrusaderSweepLeft("FastFlameMissile","FastFlameMissileCrisis");
			}
			ROB2 F 3 Slow Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_CrusaderSweepLeft("FastFlameMissile","FastFlameMissileCrisis");
			}
			ROB2 EF 2 Slow Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_CrusaderSweepLeft("FastFlameMissile","FastFlameMissileCrisis");
			}
			ROB2 EFE 2 Slow Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_CrusaderSweepRight("FastFlameMissile","FastFlameMissileCrisis");
			}
			ROB2 F 2 Slow
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_CrusaderRefire();
			}
			Loop;
		Pain:
			ROB2 D 1 Slow A_DVDSPain();
			Goto See;
		Pain.Fist:
			ROB2 D 1 Slow A_DVDSPain();
			ROB2 DDD 1 Slow;
			Goto See;
		Pain.Kick:
			ROB2 D 1 Slow A_DVDSPain();
			ROB2 DDDDD 1 Slow;
			Goto See;

		Death:
			TNT1 A 0 A_GiveGold(random(7,16));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ROB2 G 3 A_Scream();
			ROB2 H 5 A_TossGib();
			ROB2 I 4 Bright A_TossGib();
			ROB2 J 4 Bright A_Explode(64, 64, 1, 1);
			ROB2 K 4 Bright A_Fall();
			ROB2 L 4 A_Explode(64, 64, 1, 1);
			ROB2 MN 4 A_TossGib();
			ROB2 O 4 A_Explode(64, 64, 1, 1);
			ROB2 P -1 A_CrusaderDeath();
			Stop;

		Ice:
			TNT1 A 0 A_GiveGold(random(7,16));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ROB2 D 5 A_FreezeDeath();
			ROB2 D 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			ROB2 O 6;
			ROB2 NMLKJI 6;
			ROB2 H 5;
			ROB2 G 3;
			Goto See;
	}
}

class InquisitorNew : AetheriusMonsterZSC // replaces Inquisitor
{
	default
	{
		Tag "Order Inquisitor";
		Health 1000;
		Speed 12;
		Radius 40;
		Height 110;
		Mass 80000;
		Monster;
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.2;
		DamageFactor "Fire", 0.25;
		DamageFactor "Ice", 0.5;
		DamageFactor "Plasma", 1.375;
		DamageFactor "Thunder", 1.75;
		DamageFactor "Electric", 1.75;
		DamageFactor "Lightning", 1.75;
		+DROPOFF;
		+NOBLOOD;
		+BOSS;
		+FLOORCLIP;
		+DONTMORPH;
		+NORADIUSDMG;
		MaxDropOffHeight 32;
		MinMissileChance 150;
		SeeSound "inquisitor/sight";
		DeathSound "inquisitor/death";
		ActiveSound "inquisitor/active";
		Obituary "$OB_INQUISITOR"; // "%o was sentenced by an Inquisitor.";
	}
	
	States
	{
		Spawn:
			ROB3 A 0 NoDelay;
			ROB3 AB 10 A_Look();
			goto Spawn+1;
		See:
			ROB3 A 0;
			ROB3 B 3 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_InquisitorWalk("Melee","Missile",0,1,3,1,1);
			}
			ROB3 B 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_InquisitorWalk("Melee","Missile",0,1,3,1,1);
			}
			ROB3 CCDD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			ROB3 E 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_InquisitorWalk("Melee","Missile",0,1,3,1,1);
			}
			ROB3 E 3 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_InquisitorDecide();
			}
			Loop;
		Missile:
			TNT1 A 0;
			ROB3 A 2
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_InquisitorDecide();
			}
			ROB3 F 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB3 G 8 Bright  // A_ReaverRanged
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				A_StartSound("reaver/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Multiple Pellets
				if (bullet_tracer_mode == 0)
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(11.0, 0, 3, random(3,24) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(11.0, 0, 3, random(1,8) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						if (levelbehavior && user_monsterlevel > 75) { A_CrisisSpawnProjectile("StrifeReaverBulletTracer2", "StrifeReaverBulletTracer2Crisis", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
						else { A_CrisisSpawnProjectile("StrifeReaverBulletTracer", "StrifeReaverBulletTracerCrisis", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					}
				}
			}
			ROB3 G 8 // A_ReaverRanged
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Pellets
				if (bullet_tracer_mode == 0)
				{
					if (levelbehavior && user_monsterlevel > 75) { A_CustomBulletAttack(11.0, 0, 3, random(3,24) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
					else { A_CustomBulletAttack(11.0, 0, 3, random(1,8) * 3, "StrifePuff", 0, CBAF_NORANDOM); }
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						if (levelbehavior && user_monsterlevel > 75) { A_CrisisSpawnProjectile("StrifeReaverBulletTracer2", "StrifeReaverBulletTracer2Crisis", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
						else { A_CrisisSpawnProjectile("StrifeReaverBulletTracer", "StrifeReaverBulletTracerCrisis", 80, -28, frandom(-5.5,5.5), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-0.0,0.0)); }
					}
				}
			}
			Goto See;
		Grenade:
			TNT1 A 0;
			ROB3 K 12 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
				A_FaceTarget();
			}
			ROB3 J 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_InquisitorAttack("InquisitorShotNew","InquisitorShotCrisis");
			}
			ROB3 K 12
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
			}
			Goto See;
		Jump:
			ROB3 H 8 Bright 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(7); }
				A_InquisitorJump();
			}
			ROB3 IH 4 Bright 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_InquisitorCheckLand();
			}
			Goto Jump+1;

		Pain:
			ROB3 G 6;
			ROB3 G 6 A_DVDSPain();
			Goto See;
		Pain.Fist:
			ROB3 G 6;
			ROB3 G 6 A_DVDSPain();
			ROB3 G 6;
			Goto See;
		Pain.Kick:
			ROB3 G 6;
			ROB3 G 6 A_DVDSPain();
			ROB3 GG 6;
			Goto See;
		Death:
			TNT1 A 0 A_GiveGold(random(100,150));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ROB3 L 0 A_StopSound(CHAN_ITEM);
			ROB3 L 4 A_TossGib();
			ROB3 M 4 A_Scream();
			ROB3 N 4 A_TossGib();
			ROB3 O 4 Bright A_Explode(128, 128, 1, 1);
			ROB3 P 4 Bright A_TossGib();
			ROB3 Q 4 Bright A_NoBlocking();
			ROB3 RSTUV 4 A_TossGib();
			ROB3 W 4 Bright A_Explode(128, 128, 1, 1);
			ROB3 XY 4 Bright A_TossGib();
			ROB3 Z 4 A_TossGib();
			ROB3 [ 4 A_TossGib();
			ROB3 \ 3 A_TossGib();
			ROB3 ] 3 Bright A_Explode(128, 128, 1, 1);
			RBB3 A 3 Bright A_TossArm();
			RBB3 B 3 Bright A_TossGib();
			RBB3 CD 3 A_TossGib();
			RBB3 E -1;
			Stop;

		Ice:
			TNT1 A 0 A_GiveGold(random(100,150));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ROB3 A 5 A_FreezeDeath();
			ROB3 A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			RBB3 C 3;
			RBB3 DBA 3;
			ROB3 ] 3;
			ROB3 \ 3;
			ROB3 [ 3;
			ROB3 ZYXWVUTSRQPONML 4;
			Goto See;
	}
}

// DARK INQUISITOR
class DarkInquisitor : InquisitorNew
{
	default
	{
		Tag "Order Dark Inquisitor";
		Health 2400; //If using in Strife, reduce to 1200.
		PainChance 1;
		Damagefactor "Disintegrate", 0.25;
		DamageFactor "Fire", 0.15;
		Damagefactor "Ice", 0;
		DamageFactor "Plasma", 1.625;
		DamageFactor "Thunder", 2.25;
		DamageFactor "Electric", 2.25;
		DamageFactor "Lightning", 2.25;
		DamageFactor "PoisonBolt", 0.125;
		DamageFactor "Crush", 0.2;
		Speed 20;
		FloatSpeed 15;
		Mass 120000;
		+BOSS;
		+BOSSDEATH;
		+FLOORCLIP;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOICEDEATH;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		+DROPOFF;
		SeeSound "darkinquisitor/sight";
		ActiveSound "darkinquisitor/active";
		DeathSound "darkinquisitor/death";
		PainSound "darkinquisitor/pain";
		Obituary "%o was executed by a Dark Inquisitor.";
	}
	
	States
	{
		Spawn:
			ROB4 A 0 NoDelay
			{
				bFLOAT = false;
				bNOGRAVITY = false;
				A_TakeInventory("FlightToken",0);
			}
			ROB4 A 10 A_Look();
			goto Spawn+1;
		See:
			ROB4 A 0;
			ROB4 B 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			ROB4 C 0 A_StartSound("darkinquisitor/step",6);
			ROB4 C 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");	//Lets it fly if it falls off a high enough ledge.
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 D 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 E 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 D 0 A_StartSound("darkinquisitor/step",6);
			ROB4 D 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			ROB4 C 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			TNT1 A 0 A_JumpIf(pos.z - floorz > 45, "Fly");
			ROB4 A 0 A_Jump(5,"TakeOff");
			Goto See;
		TakeOff: //Thanks for the code, Ghastly! ^^
			ROB4 A 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
			}
			ROB4 A 0 
			{
				bNOPAIN = true;
			}
			ROB4 I 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				ThrustThingZ(0, 42, 0, 1);
			}
			ROB4 A 0 
			{
				bFLOAT = true;
				bNOGRAVITY = true;
			}
			ROB4 H 4 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
			}
			ROB4 A 0 A_Stop();
			ROB4 A 0 A_StartSound("darkinquisitor/flight");
			ROB4 A 0 A_GiveInventory("FlightToken", 1);
			ROB4 A 0 { bNOPAIN = false; }
			Goto Fly;
		Land:
			ROB4 A 0 
			{
				bNOPAIN = true;
				bFLOAT = false;
				bNOGRAVITY = false;
			}
			ROB4 A 0 A_TakeInventory("FlightToken", 0);
			ROB4 A 3 A_CheckFloor(1);
			Goto Land+4;
			ROB4 A 0 { bNOPAIN = false; }
			TNT1 A 0 A_StopSound(CHAN_6);
			Goto See;
		Fly:
			ROB4 H 1 Bright A_StartSound("darkinquisitor/flight",6,CHANF_LOOPING,1.0,ATTN_NORM,1.0);
			ROB4 H 3 Bright A_DVDSChase(null,"Missile",CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");	//If low enough, it lands safely on the ground.
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 I 4 Bright 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase(null,"Missile",0,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 H 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase(null,"Missile",CHF_FASTCHASE,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 I 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase(null,"Missile",0,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			ROB4 H 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase(null,"Missile",CHF_FASTCHASE,1,3,1,1);
			}
			TNT1 A 0 Bright A_JumpIf(pos.z - floorz < 45, "Land");
			ROB4 A 0 A_Jump(1,"Land");
			Loop;
		Missile:
			TNT1 A 0;
			TNT1 A 0 A_Jump(80,2);
			ROB4 A 0 A_JumpIfCloser(850,"EMP");
			ROB4 A 6
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB4 F 4 Bright	
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_StartSound("darkinquisitor/darkmatterfire");

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("DarkMatterBall","DarkMatterBallCrisis",64,-32,0);
			}
			ROB4 G 6
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		EMP:
			ROB4 A 6
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			ROB4 J 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_StartSound("darkinquisitor/empfire");
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("EMPGrenade","EMPGrenadeCrisis",100,24,0,1);
				A_CrisisSpawnProjectile("EMPGrenade","EMPGrenadeCrisis",100,-24,0,1);
			}
			ROB4 G 6
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		Pain:
			ROB4 G 6;
			ROB4 G 6 A_DVDSPain();
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		Pain.Fist:
			ROB4 G 6;
			ROB4 G 6 A_DVDSPain();
			ROB4 G 6;
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;
		Pain.Kick:
			ROB4 G 6;
			ROB4 G 6 A_DVDSPain();
			ROB4 GG 6;
			TNT1 A 0 A_JumpIfInventory("FlightToken", 1, "Fly");
			Goto See;

		Death:
			TNT1 A 0 A_GiveGold(random(250,375));
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TNT1 A 0;
			ROB4 A 0 A_TakeInventory("FlightToken", 1);
			ROB4 A 0 
			{
				bFLOAT = false;
				bNOGRAVITY = false;
			}
			ROB4 A 0 A_StopSound(CHAN_6);
			ROB4 L 1 A_NoBlocking();
			ROB4 LLLLLLLLLLLLLLLLLLLLLLL 5 Bright A_SpawnProjectile("InquisitorDeathExplosion",0+random(20,120),0,0+random(0,370),0);
			ROB4 L 1 A_Scream();
			NULL AAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("DarkInquisitorGibber",50,0,frandom(0,360));
			NULL A 0 A_SpawnProjectile("DarkInquisitorBigExplosion",0,0,0);
			TNT1 A 0 Radius_Quake(8,40,0,35,0);
			Stop;
		Ice:
			TNT1 A 0 A_GiveGold(random(250,375));
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ROB4 A 5 A_FreezeDeath();
			ROB4 A 1 A_FreezeDeathChunks();
			Wait;
	}
}
