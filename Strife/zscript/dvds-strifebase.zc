class SpectralMonsterBase : AetheriusBossZSC
{
	Default
	{
		Monster;
		+SPECIAL
		+SPECTRAL
		+NOICEDEATH
	}
	
	override void Touch (Actor toucher)
	{
		int dmg = (random(1,256) & 9) * 5;
		if (CheckClass("AlienSpectre1New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 5;
		if (CheckClass("AlienSpectre2New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * random(5,6);
		if (CheckClass("AlienSpectre3New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 6;
		if (CheckClass("AlienSpectre4New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * random(6,7);
		if (CheckClass("AlienSpectre5New", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 7;
		if (CheckClass("EntityBossNew", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 10) * 7;
		if (CheckClass("EntitySecondNew", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 9) * 6;
		if (CheckClass("EntityAscended", AAPTR_DEFAULT) == 1) dmg = (random(1,256) & 11) * 8;
		dmg /= 5;
		A_MonsterCrisisCheck(); // Spectres/Entity - Touch Damage
		if (user_canusecrisisatk == 1) 
		{
			dmg *= CallACS("CrisisMultiplier");
			if (self.health > 0) A_PlayCrisisAtkSound(); 
		}
		//Console.Printf("dmg = %d", dmg);
		if (self.health > 0) toucher.DamageMobj (self, self, dmg, 'SpectralTouch');
	}
	

	//============================================================================

	void A_SpectreChunkSmall ()
	{
		Actor foo = Spawn("AlienChunkSmall", pos + (0, 0, 10), ALLOW_REPLACE);

		if (foo != null)
		{
			int t;

			t = random[SpectreChunk]() & 15;
			foo.Vel.X = (t - (random[SpectreChunk]() & 7));
			
			t = random[SpectreChunk]() & 15;
			foo.Vel.Y = (t - (random[SpectreChunk]() & 7));

			foo.Vel.Z = (random[SpectreChunk]() & 15);
		}
	}

	void A_SpectreChunkLarge ()
	{
		Actor foo = Spawn("AlienChunkLarge", pos + (0, 0, 10), ALLOW_REPLACE);

		if (foo != null)
		{
			int t;

			t = random[SpectreChunk]() & 7;
			foo.Vel.X = (t - (random[SpectreChunk]() & 15));
			
			t = random[SpectreChunk]() & 7;
			foo.Vel.Y = (t - (random[SpectreChunk]() & 15));

			foo.Vel.Z = (random[SpectreChunk]() & 7);
		}
	}

	void A_Spectre3Attack (string centerball = "SpectralLightningV2Monster", string centerballcrisis = "SpectralLightningV2MonsterCrisis", string subball = "SpectralLightningBall2Monster", string subballcrisis = "SpectralLightningBall2MonsterCrisis")
	{
		string atktype1 = centerball;
		string atktype2 = subball;
		A_MonsterCrisisCheck(); // Spectre3 - Lightning Ball 180
		if (user_canusecrisisatk == 1) 
		{
			atktype1 = centerballcrisis;
			atktype2 = subballcrisis;
			A_PlayCrisisAtkSound(); 
		}

		if (target == null)
			return;

		// Drops the center shot
		Actor foo = Spawn(atktype1, Pos + (0, 0, 32), ALLOW_REPLACE);
		if (foo != null)
		{
			foo.Vel.Z = -12;
			foo.target = self;
			foo.FriendPlayer = 0;
			foo.tracer = target;
		}

		// Fires the 180 attack
		Angle -= 90.;
		for (int i = 0; i < 20; ++i)
		{
			Angle += 9.;
			SpawnSubMissile (atktype2, self);
		}
		Angle -= 90.;
	}
	
	// Spectres
	void A_AlienSpectreDeath ()
	{
		PlayerPawn player = null;
		int log = 0;

		A_NoBlocking(); // [RH] Need this for Sigil rewarding
		if (!CheckBossDeath ())
		{
			return;
		}
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].health > 0)
			{
				player = players[i].mo;
				break;
			}
		}
		if (player == null)
		{
			return;
		}
		
		class<Actor> cls = GetClass();
		if (cls == "AlienSpectre1")
		{
			Floor_LowerToLowest(999, 8);
			log = 95;
		}
		else if (cls == "AlienSpectre2")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_BISHOP");
			log = 74;
			player.GiveInventoryType ("QuestItem21");
		}
		else if (cls == "AlienSpectre3")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_ORACLE");
			// If there are any Oracles still alive, kill them.
			ThinkerIterator it = ThinkerIterator.Create("Oracle");
			Actor oracle;

			while ( (oracle = Actor(it.Next())) != null)
			{
				if (oracle.health > 0)
				{
					oracle.health = 0;
					oracle.Die (self, self);
				}
			}
			player.GiveInventoryType ("QuestItem23");
			if (player.FindInventory ("QuestItem21"))
			{
				// If the Bishop is dead, set quest item 22
				player.GiveInventoryType ("QuestItem22");
			}
			if (player.FindInventory ("QuestItem24") == null)
			{
				// Macil is calling us back...
				log = 87;
			}
			else
			{
				// You wield the power of the complete Sigil.
				log = 85;
			}
			Door_Open(222, 64);
		}
		else if (cls == "AlienSpectre4")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_MACIL");
			player.GiveInventoryType ("QuestItem24");
			if (player.FindInventory ("QuestItem25") == null)
			{
				// Richter has taken over. Macil is a snake.
				log = 79;
			}
			else
			{
				// Back to the factory for another Sigil!
				log = 106;
			}
		}
		else if (cls == "AlienSpectre5")
		{
			Console.MidPrint("SmallFont", "$TXT_KILLED_LOREMASTER");

			player.GiveInventoryType ("QuestItem26");
			if (!multiplayer)
			{
				player.GiveInventoryType ("UpgradeStamina");
				player.GiveInventoryType ("UpgradeAccuracy");
			}
			Sigil sigl = Sigil(player.FindInventory("Sigil"));
			if (sigl != null && sigl.health == 5)
			{
				// You wield the power of the complete Sigil.
				log = 85;
			}
			else
			{
				// Another Sigil piece. Woohoo!
				log = 83;
			}
			Floor_LowerToLowest(666, 8);
		}
		if (log > 0)
		{
			String voc = "svox/voc" .. log;
			A_PlaySound(voc, CHAN_VOICE);
			player.player.SetLogNumber (log);
		}
	}

	// Entity
	private void A_SpectralMissile (class<Actor> missilename)
	{
		if (target != null)
		{
			Actor missile = SpawnMissileXYZ (Pos + (0,0,32), target, missilename, false);
			if (missile != null)
			{
				missile.tracer = target;
				missile.CheckMissileSpawn(radius);
			}
		}
	}

	void A_EntityAttack()
	{
		// Apparent Strife bug: Case 5 was unreachable because they used % 5 instead of % 6.
		// I've fixed that by making case 1 duplicate it, since case 1 did nothing.
		switch (random[Entity]() % 5)
		{
		case 0:
			A_SpotLightning("SpectralLightningSpotNew","SpectralLightningSpotCrisis");
			break;

		case 2:
			A_MonsterCrisisCheck(); // Entity Attack - 180 Spread
			A_CrisisSpawnProjectile("SpectralLightningH3Monster", "SpectralLightningH3MonsterCrisis", 32, 0);
			break;

		case 3:
			A_Spectre3Attack("SpectralLightningV2Monster","SpectralLightningV2MonsterCrisis","SpectralLightningBall2Monster","SpectralLightningBall2MonsterCrisis");
			break;

		case 4:
			A_MonsterCrisisCheck(); // Entity Attack - Large Lightning Column
			A_CrisisSpawnProjectile("SpectralLightningBigV2Monster", "SpectralLightningBigV2MonsterCrisis", 32, 0);
			break;

		default:
			A_MonsterCrisisCheck(); // Entity Attack - Giant Ball
			A_CrisisSpawnProjectile("SpectralLightningBigBall2New", "SpectralLightningBigBall2Crisis", 32, 0);
			break;
		}
	}

	void A_EntityDeath()
	{
		Actor second;
		double secondRadius = GetDefaultByType("EntitySecond").radius * 2;

		static const double turns[] = { 0, 90, -90 };

		Actor spot = tracer;
		if (spot == null) spot = self;

		for (int i = 0; i < 3; i++)
		{
			double an = Angle + turns[i];
			Vector3 pos = spot.Vec3Angle(secondRadius, an, tracer ? 70. : 0.);

			second = Spawn("EntitySecond", pos, ALLOW_REPLACE);
			if (second != null)
			{
				second.CopyFriendliness(self, true);
				second.A_FaceTarget();
				second.VelFromAngle(i == 0? 4.8828125 : secondRadius * 4., an);
			}
		}
	}
	
	// Sub-Entity
	void A_SubEntityDeath ()
	{
		if (CheckBossDeath ())
		{
			Exit_Normal(0);
		}
	}
}


// MONSTER SPAWNERS

class InquisitorSpawner : AetheriusMonsterSpawner replaces Inquisitor
{
	Default
	{
		Radius 40;
		Height 110;
	}

	override Name ChooseSpawn()
	{
		int modtype = CallACS("OtherVarCheckDECORATE",8);
		int doomtype = CallACS("OtherVarCheckDECORATE",7);
		int evolvechance = A_GetEvolveChance();
		int monstersoption = dvds_classicdviimonsters;
		int checkbombers = dvds_suicidebombers;
		
		if (random(1,1024) <= evolveChance)
			return "DarkInquisitor";
		else
			return "InquisitorNew";
	}
}

//
class AetheriusTeleporterBeaconNew : TeleporterBeacon
{
	void A_Beacon(string cname = "Rebel1New")
	{
		Actor owner = target;
		Actor rebel = Spawn(cname, (pos.xy, floorz), ALLOW_REPLACE);
		if (rebel == null)
		{
			return;
		}
		if (!rebel.TryMove (rebel.Pos.xy, true))
		{
			rebel.Destroy();
			return;
		}
		// Once the rebels start teleporting in, you can't pick up the beacon anymore.
		bSpecial = false;
		Inventory(self).DropTime = 0;
		// Set up the new rebel.
		rebel.threshold = rebel.DefThreshold;
		rebel.ChangeTID(1000);
		rebel.target = null;
		rebel.bInCombat = true;
		rebel.LastHeard = owner;	// Make sure the rebels look for targets
		if (deathmatch)
		{
			rebel.health *= 2;
		}
		if (owner != null)
		{
			// Rebels are the same color as their owner (but only in multiplayer)
			if (multiplayer)
			{
				rebel.Translation = owner.Translation;
			}
			rebel.SetFriendPlayer(owner.player);
			// Set the rebel's target to whatever last hurt the player, so long as it's not
			// one of the player's other rebels.
			if (owner.target != null && !rebel.IsFriend (owner.target))
			{
				rebel.target = owner.target;
			}
		}

		rebel.SetState (rebel.SeeState);
		rebel.Angle = Angle;
		rebel.SpawnTeleportFog(rebel.Vec3Angle(20., Angle, 0), false, true);
		if (--health < 0)
		{
			SetStateLabel("Death");
		}
	}
}


class HealthFillUpNew : DummyStrifeItem replaces HealthFillUp
{
	Default
	{
		Tag "$TAG_HEALTHFILLUP";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		AetheriusPlayerPawn cplayerpawn;

		
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		double healthrestorefactor = 1.0;
		double healthrestorelimit = 1.0;
		int CurrentHealth;
		int PlayerMaxHP = CallACS("StatCheck",1);
		if (TrueGameSkill == 0) { healthrestorefactor = 1.000; healthrestorelimit = 1.000; }
		if (TrueGameSkill == 1) { healthrestorefactor = 0.75; healthrestorelimit = 0.75; }
		if (TrueGameSkill == 2) { healthrestorefactor = 0.75; healthrestorelimit = 0.75; }
		if (TrueGameSkill == 3) { healthrestorefactor = 0.50; healthrestorelimit = 0.50; }
		if (TrueGameSkill == 4) { healthrestorefactor = 0.50; healthrestorelimit = 0.50; }
		if (TrueGameSkill == 5) { healthrestorefactor = 0.375; healthrestorelimit = 0.375; }
		if (TrueGameSkill == 6) { healthrestorefactor = 0.375; healthrestorelimit = 0.375; }
		if (TrueGameSkill == 7) { healthrestorefactor = 0.25; healthrestorelimit = 0.25; }
		if (TrueGameSkill == 8) { healthrestorefactor = 0.25; healthrestorelimit = 0.25; }
		if (TrueGameSkill == 9) { healthrestorefactor = 0.125; healthrestorelimit = 0.125; }
		healthrestorefactor *= 0.25;
		int HealLimit = (PlayerMaxHP * healthrestorelimit);
		
		if (toucher)
		{
			cplayerpawn = AetheriusPlayerPawn(toucher);
			if (cplayerpawn)
			{
				CurrentHealth = cplayerpawn.player.mo.health;
				if (CurrentHealth < HealLimit)
				{
					CurrentHealth += (PlayerMaxHP * healthrestorefactor);
					if (CurrentHealth >= HealLimit) CurrentHealth = HealLimit;
					cplayerpawn.player.mo.health = cplayerpawn.player.health = CurrentHealth;
					toucher.A_StartSound("gethealthkit",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					toucher.A_SetBlend("E0 E0 E0",0.33,random(17,18),"E0 E0 E0",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
					//Console.Printf("[True] CurrentHealth: %d, Limit: %d", CurrentHealth, (PlayerMaxHP * healthrestorelimit));
				}
				else
				{
					//Console.Printf("[False] CurrentHealth: %d, Limit: %d", CurrentHealth, (PlayerMaxHP * healthrestorelimit));
					return false;
				}
			}
			else
			{
				return false;
			}
		}

		GoAwayAndDie();
		return true;
	}
}

class AmmoFillupNew : DummyStrifeItem replaces AmmoFillup
{
	Default
	{
		Tag "$TAG_AMMOFILLUP";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		//Console.Printf("235252");
		int maxammo;
		Inventory item = toucher.FindInventory("ElectricBolts");
		if (item == NULL)
		{
			item = toucher.GiveInventoryType("ElectricBolts");
			if (item != NULL)
			{
				maxammo = item.MaxAmount;
				item.Amount = maxammo / 5;
				toucher.A_StartSound("misc/i_pkup",9,CHANF_DEFAULT,1.0,ATTN_NORM);
				toucher.A_SetBlend("FF FF FF",0.33,random(11,12),"FF FF FF",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
		}
		else 
		{
			maxammo = item.MaxAmount;
			if (item.Amount < (maxammo / 5))
			{
				item.Amount = maxammo / 5;
				toucher.A_StartSound("misc/i_pkup",9,CHANF_DEFAULT,1.0,ATTN_NORM);
				toucher.A_SetBlend("FF FF FF",0.33,random(11,12),"FF FF FF",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
			else
			{
				return false;
			}
		}
		GoAwayAndDie ();
		return true;
	}
	
}