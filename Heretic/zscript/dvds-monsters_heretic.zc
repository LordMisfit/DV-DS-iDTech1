class ChickenNew : AetheriusMorphedMonster replaces Chicken
{
	default
	{
		Tag "Chicken";
		Health 10;
		Radius 9;
		Height 22;
		Mass 40;
		Speed 4;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		DamageFactor "Crush", 4.0;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		+FLOORCLIP;
		SeeSound "chicken/pain";
		AttackSound "chicken/attack";
		PainSound "chicken/pain";
		DeathSound "chicken/death";
		ActiveSound "chicken/active";
		Obituary "$OB_CHICKEN";
	}
	
	States
	{
		Spawn:
			CHKN A 0 NoDelay;
			CHKN AB 10 A_Look();
			goto Spawn+1;
		See:
			CHKN A 0;
			CHKN AB 3
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			CHKN A 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			CHKN C 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ChicAttack](1,2));
			}
			Goto See;
		Pain:
			CHKN D 5 A_Feathers();
			CHKN C 5 A_DVDSPain();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CHKN E 6 A_Scream();
			CHKN F 6 A_Feathers();
			CHKN G 6;
			CHKN H 6 A_NoBlocking();
			CHKN IJK 6;
			CHKN L -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			wait;
	}
}
class FChicken : ChickenNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Gargoyles
class HereticImpNew : AetheriusMonsterZSC // replaces HereticImp
{ 
	default
	{
		Tag "Gargoyle";
		Health 40;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 10;
		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.25;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		Species "Gargoyle";
		DamageFunction (0);
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "$OB_HERETICIMP";
		HitObituary "$OB_HERETICIMPHIT";
	}
	
	states
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(24);
			goto Spawn+1;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(6,12,18,24,0.333,0.333);
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](5,12), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			IMPX A 0
			{
				if (levelbehavior && user_monsterlevel > 300) { user_chargechance = 70; }
				else if (levelbehavior && user_monsterlevel > 280) { user_chargechance = 67; }
				else if (levelbehavior && user_monsterlevel > 260) { user_chargechance = 64; }
				else if (levelbehavior && user_monsterlevel > 240) { user_chargechance = 61; }
				else if (levelbehavior && user_monsterlevel > 220) { user_chargechance = 58; }
				else if (levelbehavior && user_monsterlevel > 200) { user_chargechance = 55; }
				else if (levelbehavior && user_monsterlevel > 180) { user_chargechance = 52; }
				else if (levelbehavior && user_monsterlevel > 160) { user_chargechance = 49; }
				else if (levelbehavior && user_monsterlevel > 140) { user_chargechance = 46; }
				else if (levelbehavior && user_monsterlevel > 120) { user_chargechance = 43; }
				else if (levelbehavior && user_monsterlevel > 100) { user_chargechance = 40; }
				else if (levelbehavior && user_monsterlevel > 80) { user_chargechance = 37; }
				else if (levelbehavior && user_monsterlevel > 60) { user_chargechance = 34; }
				else if (levelbehavior && user_monsterlevel > 40) { user_chargechance = 31; }
				else if (levelbehavior && user_monsterlevel > 20) { user_chargechance = 28; }
				else { user_chargechance = 25; }

				if (random(1,100) > user_chargechance) { return resolvestate("See"); }
				else
				{
					A_GargDashCheck(); // if (AAPTR_TARGET == AAPTR_NULL) { return resolvestate("See"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Charge:
			IMPX A 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			IMPX B 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }

				// A_ImpMsAttack; Emulation
				SetDamage(((0+(user_monsterlevel/45))));
				A_MonsterCrisisCheck(); // SkullAttack
				if (user_canusecrisisatk == 1) 
				{
					if (user_monsterlevel >= 45) { A_PlayCrisisAtkSound(); } 
					SetDamage((((0+(user_monsterlevel/45)))*CrisisMultiplier)); 
				}
				A_SkullAttack(12+(user_monsterlevel/random(22,23)));
			}
			IMPX CBAB 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
			}
			IMPX A 0 A_GargDashCheck2();
			Goto Charge+2;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			goto See;
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GGGG 3;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Crash:
			IMPX I 7 A_ImpExplode();
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			IMPX H 5;
			IMPX G 4;
			goto See;
	}
}
class FHereticImp : HereticImpNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

class HereticImpLeaderNew : HereticImpNew // replaces HereticImpLeader
{
	default
	{
		Tag "NitroGargoyle";
		Health 80;
		Painchance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 225; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.25;
		Species "Gargoyle";
		-MISSILEMORE;
		+DONTHARMSPECIES;
		AttackSound "himp/leaderattack";
		Translation "141:141=144:144", "145:160=145:153", "248:254=248:251", "66:94=66:80", "95:110=95:103";
	}
	
	states
	{
		Melee:
			Stop;
		Missile:
			IMPX D 0;
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("HereticImpBallNew", "HereticImpBallCrisis", 16, random[ImpMsAttack2](5,12), "himp/leaderattack");
			}
			goto See;
	}
}
class FHereticImpLeader : HereticImpLeaderNew
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		dropitem "NoItemSpawn", 1;
	}
}

// Plague Gargoyle
class PlagueImp : HereticImpLeaderNew
{
	default
	{
		Tag "Plague Gargoyle";
		Health 120;
		DamageFactor "Crush", 0.95;
		Scale 1;
		Painchance 160;
		Painchance "Fist", 240; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 240; // Fist attacks have a +50% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
		Obituary "%o was poisoned by a plague gargoyle";
		HitObituary "%o was ripped up by a plague gargoyle";
		Translation "145:168=225:240", "255:248=0:0";
	}

	States
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](6,14), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			IMPX D 0
			{
				A_CheckIfTargetDead("See");
				user_shotsfired = 0;
				if (health <= user_HPLowRange) { user_theta = (80 - (user_monsterlevel * 0.5)); }
																	else { user_theta = (240 - (user_monsterlevel * 0.1667)); }

				if (random(1,256) <= user_theta)
				{
					user_shotsfiredmax = 1;
					return resolvestate("MissileSingle"); 
				}
				else 
				{ 
					user_shotsfiredmax = randompick(3,4,5,6) + (user_monsterlevel / frandompick(11.25,22.5,33.75,45));
					return resolvestate("MissileMulti"); 
				}
				return resolvestate(null);
			}
		MissileSingle:
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }

				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }

				A_MonsterCrisisCheck(); // Single Projectile
				if (random(1,256) <= 32) { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-0.6,0.6), frandom(-0.06,0.06)); }
														else { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-6.0,6.0), frandom(-0.6,0.6)); }
			}
			goto See;
		MissileMulti:
			IMPX DE 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }

				A_FaceTarget();
			}
			IMPX F 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }

				A_MonsterCrisisCheck(); // Single Projectile
				if (random(1,256) <= 32) { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-0.96,0.96), frandom(-0.096,0.096)); }
														else { A_CrisisSpawnProjectile("PlagueShot", "PlagueShotCrisis", 16, 0, frandom(-9.6,9.6), frandom(-0.96,0.96)); }
			}
			IMPX F 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				A_CheckIfTargetDead("See");
				return resolvestate(null);
			}
			Loop;
		Pain:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			goto See;	
		Pain.Fist:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GGGG 3;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Crash:
			IMPX I 0 
			{
				bNOGRAVITY = false;
				A_SpawnItemEx("HereticImpChunk1", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
				A_SpawnItemEx("HereticImpChunk2", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
			}
			IMPX I 7;
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Raise:
			IMPX L 0;
			IMPX L 0 A_RemoveChildren();
			IMPX LKJIHG 6;
			goto See;
	}
}

// Dark/Watcher Gargoyle
class WatcherImp : HereticImpNew 
{
	default
	{
		Tag "Watcher Gargoyle";
		Health 120;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 15;
		scale 1.2;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		+MISSILEMORE;
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "%o was burnt by a Watcher Gargoyle.";
		HitObituary "%o was slashed by a Watcher Gargoyle.";
		DamageFactor "Fire", 0.5;
		DamageFactor "Crush", 0.95;
		PainChance 50;
		Painchance "Fire", 25; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 75; // Fist attacks have a +50% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
	}
	
	States
	{
		Spawn:
			WATC A 0 NoDelay;
			WATC ABCB 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			WATC A 0;
			WATC AABBCCBB 3
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			goto See;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC D 0
			{
				user_firevolleys = 0;
				user_firevolleymax = random(2,3);
				if (random(1,16) == 1) { user_firevolleymax *= random(3,4); }
			}
			WATC D 0 BRIGHT A_Jump(85,"Beastball");
		MissileLoop:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("HereticImpBall2", "HereticImpBall2Crisis", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("HereticImpBall2", "HereticImpBall2Crisis", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC ] 0 BRIGHT
			{
				user_firevolleys += 1;
				if (user_firevolleys >= user_firevolleymax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Beastball:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 6 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			WATC F 6 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("BeastBall2", "BeastBall2Crisis", 14, random[BeastAttack](1,8)*3, "beast/attack");
			}
			goto See;
		Pain:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			goto See;
		Pain.Fist:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GG 3;
			goto See;
		Pain.Kick:
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GGGG 3;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC G 4 A_ImpDeath();
			WATC H 5;
			Wait;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC S 5 A_ImpXDeath1();
			WATC TU 5;
			WATC V 5 A_Gravity();
			WATC W 5;
			Wait;
		Crash:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC I 7 A_ImpExplode();
			WATC J 7 A_Scream();
			WATC K 7;
			WATC L -1;
			Stop;
		XCrash:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			WATC X 7;
			WATC Y 7;
			WATC Z -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			WATC G 5 A_GenericFreezeDeath();
			WATC G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WATC H 5;
			WATC G 4;
			goto See;
	}
}

//